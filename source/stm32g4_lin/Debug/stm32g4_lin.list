
stm32g4_lin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c80c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800c9e4  0800c9e4  0000d9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca6c  0800ca6c  0000e190  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca6c  0800ca6c  0000da6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca74  0800ca74  0000e190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca74  0800ca74  0000da74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca78  0800ca78  0000da78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  0800ca7c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  20000190  0800cc0c  0000e190  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001760  0800cc0c  0000e760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020056  00000000  00000000  0000e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052b8  00000000  00000000  0002e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  000334d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138a  00000000  00000000  00034e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023279  00000000  00000000  0003620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002479f  00000000  00000000  00059483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb914  00000000  00000000  0007dc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  0014957c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0014fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c9cc 	.word	0x0800c9cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	0800c9cc 	.word	0x0800c9cc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <RebootToBootloader>:
        HAL_FLASH_OB_Lock();
        HAL_FLASH_OB_Launch();
    }
}
#else
void RebootToBootloader(){}
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <bootloaderSwitcher>:
void bootloaderSwitcher(){}
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <toggleStatusLed>:
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on?GPIO_PIN_RESET:GPIO_PIN_SET);
}

void toggleStatusLed()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000528:	2110      	movs	r1, #16
 800052a:	4802      	ldr	r0, [pc, #8]	@ (8000534 <toggleStatusLed+0x10>)
 800052c:	f001 fe64 	bl	80021f8 <HAL_GPIO_TogglePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	48000400 	.word	0x48000400

08000538 <setLinkLed>:

void setLinkLed(bool on)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on?GPIO_PIN_RESET:GPIO_PIN_SET);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	2120      	movs	r1, #32
 800054e:	4803      	ldr	r0, [pc, #12]	@ (800055c <setLinkLed+0x24>)
 8000550:	f001 fe3a 	bl	80021c8 <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	48000400 	.word	0x48000400

08000560 <slcan_get_master_table_row>:

uint8_t lin_master_data[MAX_SLAVES_COUNT * 8];
t_master_frame_table_item master_frame_table[MAX_SLAVES_COUNT];
uint8_t master_frame_table_size = 0;

t_master_frame_table_item* slcan_get_master_table_row(open_lin_pid_t id, int8_t* out_index){
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
	uint8_t i = -1;
 800056c:	23ff      	movs	r3, #255	@ 0xff
 800056e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < master_frame_table_size; i++)
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	e00e      	b.n	8000594 <slcan_get_master_table_row+0x34>
	{
		if (id == master_frame_table[i].slot.pid)
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	4912      	ldr	r1, [pc, #72]	@ (80005c4 <slcan_get_master_table_row+0x64>)
 800057a:	4613      	mov	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	3304      	adds	r3, #4
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	429a      	cmp	r2, r3
 800058c:	d008      	beq.n	80005a0 <slcan_get_master_table_row+0x40>
	for (i = 0; i < master_frame_table_size; i++)
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3301      	adds	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <slcan_get_master_table_row+0x68>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	7bfa      	ldrb	r2, [r7, #15]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3eb      	bcc.n	8000576 <slcan_get_master_table_row+0x16>
 800059e:	e000      	b.n	80005a2 <slcan_get_master_table_row+0x42>
		{
			break;
 80005a0:	bf00      	nop
		}
	}
	(*out_index) = i;
 80005a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	701a      	strb	r2, [r3, #0]
	return &master_frame_table[i];
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4a03      	ldr	r2, [pc, #12]	@ (80005c4 <slcan_get_master_table_row+0x64>)
 80005b6:	4413      	add	r3, r2
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	2000022c 	.word	0x2000022c
 80005c8:	200002ec 	.word	0x200002ec

080005cc <addLinMasterRow>:
//T013151502AA55
//t0163112233

extern void open_lin_net_init(t_master_frame_table_item *a_slot_array, l_u8 a_slot_array_len);

uint8_t addLinMasterRow(uint8_t* line) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    uint32_t temp;
    int8_t i,out_index;
    t_master_frame_table_item* array_ptr = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
    uint16_t tFrame_Max_ms;
    uint8_t offset = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	77bb      	strb	r3, [r7, #30]
    if (line[0] < 'Z')
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b59      	cmp	r3, #89	@ 0x59
 80005e2:	d801      	bhi.n	80005e8 <addLinMasterRow+0x1c>
    	offset = 5;
 80005e4:	2305      	movs	r3, #5
 80005e6:	77bb      	strb	r3, [r7, #30]
    // reset schedule table
    if (line[1] == '2')
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b32      	cmp	r3, #50	@ 0x32
 80005f0:	d109      	bne.n	8000606 <addLinMasterRow+0x3a>
    {
    	open_lin_hw_reset();
 80005f2:	f00b fd5b 	bl	800c0ac <open_lin_hw_reset>
        slcan_state = SLCAN_STATE_CONFIG;
 80005f6:	4b78      	ldr	r3, [pc, #480]	@ (80007d8 <addLinMasterRow+0x20c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
        master_frame_table_size = 0;
 80005fc:	4b77      	ldr	r3, [pc, #476]	@ (80007dc <addLinMasterRow+0x210>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
        return 1;
 8000602:	2301      	movs	r3, #1
 8000604:	e0e4      	b.n	80007d0 <addLinMasterRow+0x204>
    }
    // start sending
    if (line[1] == '1'){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b31      	cmp	r3, #49	@ 0x31
 800060e:	d115      	bne.n	800063c <addLinMasterRow+0x70>
    	if (lin_type == LIN_SLAVE)
 8000610:	4b73      	ldr	r3, [pc, #460]	@ (80007e0 <addLinMasterRow+0x214>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d106      	bne.n	8000626 <addLinMasterRow+0x5a>
    	{
    		open_lin_net_init(master_frame_table,master_frame_table_size);
 8000618:	4b70      	ldr	r3, [pc, #448]	@ (80007dc <addLinMasterRow+0x210>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4871      	ldr	r0, [pc, #452]	@ (80007e4 <addLinMasterRow+0x218>)
 8000620:	f00c f830 	bl	800c684 <open_lin_net_init>
 8000624:	e005      	b.n	8000632 <addLinMasterRow+0x66>
    	} else {
			open_lin_master_dl_init(master_frame_table,master_frame_table_size);
 8000626:	4b6d      	ldr	r3, [pc, #436]	@ (80007dc <addLinMasterRow+0x210>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	486d      	ldr	r0, [pc, #436]	@ (80007e4 <addLinMasterRow+0x218>)
 800062e:	f00b fe61 	bl	800c2f4 <open_lin_master_dl_init>
    		 //wakeUpLin();
    	}
        slcan_state = SLCAN_STATE_OPEN;
 8000632:	4b69      	ldr	r3, [pc, #420]	@ (80007d8 <addLinMasterRow+0x20c>)
 8000634:	2202      	movs	r2, #2
 8000636:	701a      	strb	r2, [r3, #0]
        return 1;
 8000638:	2301      	movs	r3, #1
 800063a:	e0c9      	b.n	80007d0 <addLinMasterRow+0x204>
    }

    // id
    if (!parseHex(&line[2], 2, &temp)) return 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3302      	adds	r3, #2
 8000640:	f107 0210 	add.w	r2, r7, #16
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fac4 	bl	8000bd4 <parseHex>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <addLinMasterRow+0x8a>
 8000652:	2300      	movs	r3, #0
 8000654:	e0bc      	b.n	80007d0 <addLinMasterRow+0x204>

	array_ptr = slcan_get_master_table_row(temp, &out_index);
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f107 020f 	add.w	r2, r7, #15
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff7d 	bl	8000560 <slcan_get_master_table_row>
 8000666:	61b8      	str	r0, [r7, #24]
    array_ptr->slot.pid= temp;
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	711a      	strb	r2, [r3, #4]
    if ((temp == 0x3d) || (temp == 0x3c))
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	2b3d      	cmp	r3, #61	@ 0x3d
    {
//    	extern l_u8 diagnostic_slot;
//    	diagnostic_slot = 1;
    }
    // len
    if (!parseHex(&line[4 + offset], 1, &temp)) return 0;
 8000674:	7fbb      	ldrb	r3, [r7, #30]
 8000676:	3304      	adds	r3, #4
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	f107 0210 	add.w	r2, r7, #16
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f000 faa5 	bl	8000bd4 <parseHex>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <addLinMasterRow+0xc8>
 8000690:	2300      	movs	r3, #0
 8000692:	e09d      	b.n	80007d0 <addLinMasterRow+0x204>
    if (array_ptr->slot.data_length  > 8) return 0;
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	799b      	ldrb	r3, [r3, #6]
 8000698:	2b08      	cmp	r3, #8
 800069a:	d901      	bls.n	80006a0 <addLinMasterRow+0xd4>
 800069c:	2300      	movs	r3, #0
 800069e:	e097      	b.n	80007d0 <addLinMasterRow+0x204>
    array_ptr->slot.data_length = temp;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	719a      	strb	r2, [r3, #6]

    // type
    if ((line[0] == 'r') || (line[0] == 'R'))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b72      	cmp	r3, #114	@ 0x72
 80006ae:	d003      	beq.n	80006b8 <addLinMasterRow+0xec>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b52      	cmp	r3, #82	@ 0x52
 80006b6:	d103      	bne.n	80006c0 <addLinMasterRow+0xf4>
    	array_ptr->slot.frame_type = OPEN_LIN_FRAME_TYPE_RECEIVE;
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	2201      	movs	r2, #1
 80006bc:	715a      	strb	r2, [r3, #5]
 80006be:	e002      	b.n	80006c6 <addLinMasterRow+0xfa>
	else
		array_ptr->slot.frame_type = OPEN_LIN_FRAME_TYPE_TRANSMIT;
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	2200      	movs	r2, #0
 80006c4:	715a      	strb	r2, [r3, #5]
    // data
    array_ptr->slot.data_ptr = &(lin_master_data[out_index * 8]); //data is later set in case of override
 80006c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4a46      	ldr	r2, [pc, #280]	@ (80007e8 <addLinMasterRow+0x21c>)
 80006ce:	441a      	add	r2, r3
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	609a      	str	r2, [r3, #8]
    // period
    if (line[0] < 'Z') // if upper case
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b59      	cmp	r3, #89	@ 0x59
 80006da:	d822      	bhi.n	8000722 <addLinMasterRow+0x156>
    {
    	if (!parseHex(&line[4], 2, &temp)) return 0;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3304      	adds	r3, #4
 80006e0:	f107 0210 	add.w	r2, r7, #16
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa74 	bl	8000bd4 <parseHex>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d101      	bne.n	80006f6 <addLinMasterRow+0x12a>
 80006f2:	2300      	movs	r3, #0
 80006f4:	e06c      	b.n	80007d0 <addLinMasterRow+0x204>
    	array_ptr->offset_ms = temp;
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	701a      	strb	r2, [r3, #0]
    	if (!parseHex(&line[6], 2, &temp)) return 0;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	f107 0210 	add.w	r2, r7, #16
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fa63 	bl	8000bd4 <parseHex>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <addLinMasterRow+0x14c>
 8000714:	2300      	movs	r3, #0
 8000716:	e05b      	b.n	80007d0 <addLinMasterRow+0x204>
    	array_ptr->response_wait_ms	= temp;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	e015      	b.n	800074e <addLinMasterRow+0x182>
    } else
    {
		array_ptr->offset_ms = 15;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	220f      	movs	r2, #15
 8000726:	701a      	strb	r2, [r3, #0]
		// timeout
		tFrame_Max_ms = (((uint16_t)array_ptr->slot.data_length * 10U + 44U) * 7U / 100U) + 1;
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	799b      	ldrb	r3, [r3, #6]
 800072c:	461a      	mov	r2, r3
 800072e:	2346      	movs	r3, #70	@ 0x46
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8000738:	4a2c      	ldr	r2, [pc, #176]	@ (80007ec <addLinMasterRow+0x220>)
 800073a:	fba2 2303 	umull	r2, r3, r2, r3
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	b29b      	uxth	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	82fb      	strh	r3, [r7, #22]
		array_ptr->response_wait_ms = (uint8_t)(tFrame_Max_ms);
 8000746:	8afb      	ldrh	r3, [r7, #22]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	705a      	strb	r2, [r3, #1]
    }

    if (array_ptr->slot.frame_type == OPEN_LIN_FRAME_TYPE_TRANSMIT)
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d12a      	bne.n	80007ac <addLinMasterRow+0x1e0>
    {
        for (i = 0; i < array_ptr->slot.data_length; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	77fb      	strb	r3, [r7, #31]
 800075a:	e021      	b.n	80007a0 <addLinMasterRow+0x1d4>
        {
            if (!parseHex(&line[5 + offset + i * 2], 2, &temp)) return 0;
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	1d5a      	adds	r2, r3, #5
 8000760:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	f107 0210 	add.w	r2, r7, #16
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fa2d 	bl	8000bd4 <parseHex>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <addLinMasterRow+0x1b8>
 8000780:	2300      	movs	r3, #0
 8000782:	e025      	b.n	80007d0 <addLinMasterRow+0x204>
            array_ptr->slot.data_ptr[i] = temp;
 8000784:	6939      	ldr	r1, [r7, #16]
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800078e:	4413      	add	r3, r2
 8000790:	b2ca      	uxtb	r2, r1
 8000792:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < array_ptr->slot.data_length; i++)
 8000794:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	3301      	adds	r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	77fb      	strb	r3, [r7, #31]
 80007a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	7992      	ldrb	r2, [r2, #6]
 80007a8:	4293      	cmp	r3, r2
 80007aa:	dbd7      	blt.n	800075c <addLinMasterRow+0x190>
        }
    }

    if ((out_index == master_frame_table_size) && (master_frame_table_size < MAX_SLAVES_COUNT))
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <addLinMasterRow+0x210>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d109      	bne.n	80007ce <addLinMasterRow+0x202>
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <addLinMasterRow+0x210>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d805      	bhi.n	80007ce <addLinMasterRow+0x202>
    	 master_frame_table_size ++;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <addLinMasterRow+0x210>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <addLinMasterRow+0x210>)
 80007cc:	701a      	strb	r2, [r3, #0]

    return 1;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000314 	.word	0x20000314
 80007dc:	200002ec 	.word	0x200002ec
 80007e0:	20000000 	.word	0x20000000
 80007e4:	2000022c 	.word	0x2000022c
 80007e8:	200001ac 	.word	0x200001ac
 80007ec:	51eb851f 	.word	0x51eb851f

080007f0 <lin_slcan_reset>:
static l_u8 slcan_lin_slave_state_data_count;
static uint8_t slcan_lin_data_array[9];
static t_open_lin_data_layer_frame open_lin_data_layer_frame;
uint32_t slcan_lin_timeout_counter = 0;

void lin_slcan_reset(void){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	slcan_lin_slave_state = OPEN_LIN_SLAVE_IDLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <lin_slcan_reset+0x20>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	slcan_lin_slave_state_data_count = 0;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <lin_slcan_reset+0x24>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	slcan_lin_timeout_counter = 0;
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <lin_slcan_reset+0x28>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
//	open_lin_hw_reset();
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	200002ed 	.word	0x200002ed
 8000814:	200002ee 	.word	0x200002ee
 8000818:	20000308 	.word	0x20000308

0800081c <lin_slcan_rx_handler>:

open_lin_frame_slot_t lin_slcan_slot;
void lin_slcan_rx_handler(t_open_lin_data_layer_frame *f)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	lin_slcan_slot.pid = f->pid;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 800082a:	701a      	strb	r2, [r3, #0]
	lin_slcan_slot.data_ptr = f->data_ptr;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000832:	6053      	str	r3, [r2, #4]
	lin_slcan_slot.frame_type = OPEN_LIN_FRAME_TYPE_RECEIVE;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000836:	2201      	movs	r2, #1
 8000838:	705a      	strb	r2, [r3, #1]
	lin_slcan_slot.data_length = f->lenght;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	785a      	ldrb	r2, [r3, #1]
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000840:	709a      	strb	r2, [r3, #2]
	slcanReciveCanFrame(&lin_slcan_slot);
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000844:	f000 fd4c 	bl	80012e0 <slcanReciveCanFrame>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000030c 	.word	0x2000030c

08000854 <open_lin_on_rx_frame>:

void open_lin_on_rx_frame(open_lin_frame_slot_t *slot)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	slcanReciveCanFrame(slot);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 fd3f 	bl	80012e0 <slcanReciveCanFrame>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <lin_slcan_rx_timeout_handler>:

void lin_slcan_rx_timeout_handler()
{
 800086c:	b598      	push	{r3, r4, r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if (slcan_state == SLCAN_STATE_OPEN)
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <lin_slcan_rx_timeout_handler+0x64>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d127      	bne.n	80008c8 <lin_slcan_rx_timeout_handler+0x5c>
	{
		if (slcan_lin_slave_state_data_count == 0)
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <lin_slcan_rx_timeout_handler+0x68>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d106      	bne.n	800088e <lin_slcan_rx_timeout_handler+0x22>
		{
			/* header send no respone */
			open_lin_data_layer_frame.lenght = 0;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 8000882:	2200      	movs	r2, #0
 8000884:	705a      	strb	r2, [r3, #1]
			lin_slcan_rx_handler(&open_lin_data_layer_frame);
 8000886:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 8000888:	f7ff ffc8 	bl	800081c <lin_slcan_rx_handler>
 800088c:	e01c      	b.n	80008c8 <lin_slcan_rx_timeout_handler+0x5c>
		} else
		{
			open_lin_data_layer_frame.lenght = slcan_lin_slave_state_data_count - 1;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <lin_slcan_rx_timeout_handler+0x68>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 8000898:	705a      	strb	r2, [r3, #1]
			/* checksum calculation */
			if (slcan_lin_data_array[open_lin_data_layer_frame.lenght] == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <lin_slcan_rx_timeout_handler+0x70>)
 80008a2:	5c9c      	ldrb	r4, [r3, r2]
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008b0:	7851      	ldrb	r1, [r2, #1]
					open_lin_data_layer_frame.lenght, open_lin_data_layer_frame.data_ptr)) /* TODO remove from interrupt possible function */
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008b4:	6852      	ldr	r2, [r2, #4]
			if (slcan_lin_data_array[open_lin_data_layer_frame.lenght] == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00b fcbe 	bl	800c238 <open_lin_data_layer_checksum>
 80008bc:	4603      	mov	r3, r0
 80008be:	429c      	cmp	r4, r3
 80008c0:	d102      	bne.n	80008c8 <lin_slcan_rx_timeout_handler+0x5c>
			{
				/* valid checksum */
				lin_slcan_rx_handler(&open_lin_data_layer_frame);
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008c4:	f7ff ffaa 	bl	800081c <lin_slcan_rx_handler>
			}
		}
	}
	lin_slcan_reset();
 80008c8:	f7ff ff92 	bl	80007f0 <lin_slcan_reset>
}
 80008cc:	bf00      	nop
 80008ce:	bd98      	pop	{r3, r4, r7, pc}
 80008d0:	20000314 	.word	0x20000314
 80008d4:	200002ee 	.word	0x200002ee
 80008d8:	200002fc 	.word	0x200002fc
 80008dc:	200002f0 	.word	0x200002f0

080008e0 <lin_slcan_skip_header_reception>:



void lin_slcan_skip_header_reception(uint8_t pid)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	open_lin_hw_reset();
 80008ea:	f00b fbdf 	bl	800c0ac <open_lin_hw_reset>
	lin_slcan_reset();
 80008ee:	f7ff ff7f 	bl	80007f0 <lin_slcan_reset>
	slcan_lin_slave_state = OPEN_LIN_SLAVE_DATA_RX;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <lin_slcan_skip_header_reception+0x38>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	701a      	strb	r2, [r3, #0]
	open_lin_data_layer_frame.pid = pid;
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <lin_slcan_skip_header_reception+0x3c>)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	7013      	strb	r3, [r2, #0]
	open_lin_data_layer_frame.data_ptr = slcan_lin_data_array;
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <lin_slcan_skip_header_reception+0x3c>)
 8000900:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <lin_slcan_skip_header_reception+0x40>)
 8000902:	605a      	str	r2, [r3, #4]
	slcan_lin_timeout_counter = HAL_GetTick();
 8000904:	f001 f932 	bl	8001b6c <HAL_GetTick>
 8000908:	4603      	mov	r3, r0
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <lin_slcan_skip_header_reception+0x44>)
 800090c:	6013      	str	r3, [r2, #0]
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200002ed 	.word	0x200002ed
 800091c:	200002fc 	.word	0x200002fc
 8000920:	200002f0 	.word	0x200002f0
 8000924:	20000308 	.word	0x20000308

08000928 <lin_slcan_rx>:

void lin_slcan_rx(l_u8 rx_byte)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	if (open_lin_hw_check_for_break() == l_true)
 8000932:	f00b fb8d 	bl	800c050 <open_lin_hw_check_for_break>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d007      	beq.n	800094c <lin_slcan_rx+0x24>
	{
		lin_slcan_reset();
 800093c:	f7ff ff58 	bl	80007f0 <lin_slcan_reset>
		slcan_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 8000940:	4b3a      	ldr	r3, [pc, #232]	@ (8000a2c <lin_slcan_rx+0x104>)
 8000942:	2202      	movs	r2, #2
 8000944:	701a      	strb	r2, [r3, #0]
		#ifdef OPEN_LIN_AUTO_BAUND
			open_lin_hw_set_auto_baud();
 8000946:	f00b fba3 	bl	800c090 <open_lin_hw_set_auto_baud>
			default:
				lin_slcan_reset();
				break;
		}
	}
}
 800094a:	e06b      	b.n	8000a24 <lin_slcan_rx+0xfc>
		switch (slcan_lin_slave_state){
 800094c:	4b37      	ldr	r3, [pc, #220]	@ (8000a2c <lin_slcan_rx+0x104>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d031      	beq.n	80009b8 <lin_slcan_rx+0x90>
 8000954:	2b03      	cmp	r3, #3
 8000956:	dc61      	bgt.n	8000a1c <lin_slcan_rx+0xf4>
 8000958:	2b01      	cmp	r3, #1
 800095a:	d002      	beq.n	8000962 <lin_slcan_rx+0x3a>
 800095c:	2b02      	cmp	r3, #2
 800095e:	d00a      	beq.n	8000976 <lin_slcan_rx+0x4e>
 8000960:	e05c      	b.n	8000a1c <lin_slcan_rx+0xf4>
				if (rx_byte != OPEN_LIN_SYNCH_BYTE)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b55      	cmp	r3, #85	@ 0x55
 8000966:	d002      	beq.n	800096e <lin_slcan_rx+0x46>
					lin_slcan_reset();
 8000968:	f7ff ff42 	bl	80007f0 <lin_slcan_reset>
				break;
 800096c:	e05a      	b.n	8000a24 <lin_slcan_rx+0xfc>
					slcan_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 800096e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a2c <lin_slcan_rx+0x104>)
 8000970:	2202      	movs	r2, #2
 8000972:	701a      	strb	r2, [r3, #0]
				break;
 8000974:	e056      	b.n	8000a24 <lin_slcan_rx+0xfc>
				if (rx_byte == 0) break;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d052      	beq.n	8000a22 <lin_slcan_rx+0xfa>
				if (open_lin_data_layer_parity(rx_byte) == rx_byte)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f00b fc11 	bl	800c1a6 <open_lin_data_layer_parity>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4293      	cmp	r3, r2
 800098c:	d109      	bne.n	80009a2 <lin_slcan_rx+0x7a>
					open_lin_data_layer_frame.pid = (open_lin_pid_t)(rx_byte & OPEN_LIN_ID_MASK);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <lin_slcan_rx+0x108>)
 8000998:	701a      	strb	r2, [r3, #0]
					open_lin_data_layer_frame.data_ptr = slcan_lin_data_array;
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <lin_slcan_rx+0x108>)
 800099c:	4a25      	ldr	r2, [pc, #148]	@ (8000a34 <lin_slcan_rx+0x10c>)
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	e001      	b.n	80009a6 <lin_slcan_rx+0x7e>
					lin_slcan_reset();
 80009a2:	f7ff ff25 	bl	80007f0 <lin_slcan_reset>
				slcan_lin_slave_state = OPEN_LIN_SLAVE_DATA_RX;
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <lin_slcan_rx+0x104>)
 80009a8:	2203      	movs	r2, #3
 80009aa:	701a      	strb	r2, [r3, #0]
				slcan_lin_timeout_counter = HAL_GetTick();
 80009ac:	f001 f8de 	bl	8001b6c <HAL_GetTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <lin_slcan_rx+0x110>)
 80009b4:	6013      	str	r3, [r2, #0]
				break;
 80009b6:	e035      	b.n	8000a24 <lin_slcan_rx+0xfc>
				slcan_lin_timeout_counter = HAL_GetTick();
 80009b8:	f001 f8d8 	bl	8001b6c <HAL_GetTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a1e      	ldr	r2, [pc, #120]	@ (8000a38 <lin_slcan_rx+0x110>)
 80009c0:	6013      	str	r3, [r2, #0]
				if (slcan_lin_slave_state_data_count < 8)
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	d80d      	bhi.n	80009e6 <lin_slcan_rx+0xbe>
					open_lin_data_layer_frame.data_ptr[slcan_lin_slave_state_data_count] = rx_byte;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	701a      	strb	r2, [r3, #0]
					slcan_lin_slave_state_data_count ++;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009e2:	701a      	strb	r2, [r3, #0]
				break;
 80009e4:	e01e      	b.n	8000a24 <lin_slcan_rx+0xfc>
					open_lin_data_layer_frame.lenght = slcan_lin_slave_state_data_count;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009ec:	705a      	strb	r2, [r3, #1]
					if (rx_byte == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009fa:	7851      	ldrb	r1, [r2, #1]
							open_lin_data_layer_frame.lenght, open_lin_data_layer_frame.data_ptr)) /* TODO remove from interrupt possible function */
 80009fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009fe:	6852      	ldr	r2, [r2, #4]
					if (rx_byte == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00b fc19 	bl	800c238 <open_lin_data_layer_checksum>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d102      	bne.n	8000a16 <lin_slcan_rx+0xee>
						lin_slcan_rx_handler(&open_lin_data_layer_frame);
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <lin_slcan_rx+0x108>)
 8000a12:	f7ff ff03 	bl	800081c <lin_slcan_rx_handler>
					lin_slcan_reset();
 8000a16:	f7ff feeb 	bl	80007f0 <lin_slcan_reset>
				break;
 8000a1a:	e003      	b.n	8000a24 <lin_slcan_rx+0xfc>
				lin_slcan_reset();
 8000a1c:	f7ff fee8 	bl	80007f0 <lin_slcan_reset>
				break;
 8000a20:	e000      	b.n	8000a24 <lin_slcan_rx+0xfc>
				if (rx_byte == 0) break;
 8000a22:	bf00      	nop
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200002ed 	.word	0x200002ed
 8000a30:	200002fc 	.word	0x200002fc
 8000a34:	200002f0 	.word	0x200002f0
 8000a38:	20000308 	.word	0x20000308
 8000a3c:	200002ee 	.word	0x200002ee

08000a40 <slcanSetOutputChar>:
  * @brief  Adds data to send buffer
  * @param  c - data to add
  * @retval None
  */
static void slcanSetOutputChar(uint8_t c)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if (sl_frame_len < sizeof(sl_frame))
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b3d      	cmp	r3, #61	@ 0x3d
 8000a50:	d80b      	bhi.n	8000a6a <slcanSetOutputChar+0x2a>
	{
		sl_frame[sl_frame_len] = c;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <slcanSetOutputChar+0x3c>)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	5453      	strb	r3, [r2, r1]
		sl_frame_len ++;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a68:	701a      	strb	r2, [r3, #0]
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000356 	.word	0x20000356
 8000a7c:	20000318 	.word	0x20000318

08000a80 <slCanSendNibble>:
  * @brief  Add given nible value as hexadecimal string to bufferr
  * @param  c - data to add
  * @retval None
  */
static void slCanSendNibble(uint8_t ch)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	ch = ch > 9 ? ch - 10 + 'A' : ch + '0';
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b09      	cmp	r3, #9
 8000a8e:	d903      	bls.n	8000a98 <slCanSendNibble+0x18>
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	3337      	adds	r3, #55	@ 0x37
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	e002      	b.n	8000a9e <slCanSendNibble+0x1e>
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	3330      	adds	r3, #48	@ 0x30
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	71fb      	strb	r3, [r7, #7]
	slcanSetOutputChar(ch);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffcc 	bl	8000a40 <slcanSetOutputChar>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <slcanSetOutputAsHex>:
/**
  * @brief  Add given byte value as hexadecimal string to buffer
  * @param  value - data to add
  * @retval None
  */
static void slcanSetOutputAsHex(uint8_t ch) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	slCanSendNibble(ch >> 4);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	091b      	lsrs	r3, r3, #4
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffdd 	bl	8000a80 <slCanSendNibble>
	slCanSendNibble(ch & 0x0F);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffd6 	bl	8000a80 <slCanSendNibble>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <slcanOutputFlush>:

static void slcanOutputFlush(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	while (((USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData)->TxState){;} //should change by hardware
 8000ae0:	bf00      	nop
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <slcanOutputFlush+0x34>)
 8000ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000ae8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f8      	bne.n	8000ae2 <slcanOutputFlush+0x6>
	while (CDC_Transmit_FS(sl_frame, sl_frame_len) != USBD_OK);
 8000af0:	bf00      	nop
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <slcanOutputFlush+0x38>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <slcanOutputFlush+0x3c>)
 8000afa:	f00a fe33 	bl	800b764 <CDC_Transmit_FS>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f6      	bne.n	8000af2 <slcanOutputFlush+0x16>
    sl_frame_len = 0;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <slcanOutputFlush+0x38>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000560 	.word	0x20000560
 8000b14:	20000356 	.word	0x20000356
 8000b18:	20000318 	.word	0x20000318

08000b1c <slCanHandler>:

void slCanHandler(uint8_t time_passed_ms)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
    if (slcan_state == SLCAN_STATE_OPEN)
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <slCanHandler+0x40>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d107      	bne.n	8000b3e <slCanHandler+0x22>
    {        
        if (lin_type == LIN_MASTER)
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <slCanHandler+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <slCanHandler+0x22>
        	open_lin_master_dl_handler(time_passed_ms);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00b fd03 	bl	800c544 <open_lin_master_dl_handler>
    }
    setLinkLed(slcan_state == SLCAN_STATE_OPEN);
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <slCanHandler+0x40>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fcf3 	bl	8000538 <setLinkLed>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000314 	.word	0x20000314
 8000b60:	20000000 	.word	0x20000000

08000b64 <slCanProccesInput>:
  * @param  ch - data to add
  * @retval None
  */
static uint8_t command[LINE_MAXLEN];
int slCanProccesInput(uint8_t ch)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	static uint8_t line[LINE_MAXLEN];
	static uint8_t linepos = 0;

    if (ch == SLCAN_CR) {
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b0d      	cmp	r3, #13
 8000b72:	d111      	bne.n	8000b98 <slCanProccesInput+0x34>
        line[linepos] = 0;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <slCanProccesInput+0x68>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	5499      	strb	r1, [r3, r2]
        memcpy(command,line,linepos);
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <slCanProccesInput+0x68>)
 8000b88:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <slCanProccesInput+0x6c>)
 8000b8a:	f00b ff11 	bl	800c9b0 <memcpy>
        linepos = 0;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
        return 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e013      	b.n	8000bc0 <slCanProccesInput+0x5c>
    } else if (ch != SLCAN_LR) {
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d00f      	beq.n	8000bbe <slCanProccesInput+0x5a>
        line[linepos] = ch;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <slCanProccesInput+0x68>)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	5453      	strb	r3, [r2, r1]
        if (linepos < LINE_MAXLEN - 1) linepos++;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b3c      	cmp	r3, #60	@ 0x3c
 8000bb0:	d805      	bhi.n	8000bbe <slCanProccesInput+0x5a>
 8000bb2:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000bbc:	701a      	strb	r2, [r3, #0]
    }
    return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000397 	.word	0x20000397
 8000bcc:	20000398 	.word	0x20000398
 8000bd0:	20000358 	.word	0x20000358

08000bd4 <parseHex>:
  * @param  canmsg - line Input string
  * 		len    - of characters to interpret
  * 		value  - Pointer to variable for the resulting decoded value
  * @retval 0 on error, 1 on success
  */
uint8_t parseHex(uint8_t* line, uint8_t len, uint32_t* value) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	72fb      	strb	r3, [r7, #11]
    *value = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
    while (len--) {
 8000be8:	e045      	b.n	8000c76 <parseHex+0xa2>
        if (*line == 0) return 0;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <parseHex+0x22>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e045      	b.n	8000c82 <parseHex+0xae>
        *value <<= 4;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	011a      	lsls	r2, r3, #4
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
        if ((*line >= '0') && (*line <= '9')) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c06:	d90d      	bls.n	8000c24 <parseHex+0x50>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b39      	cmp	r3, #57	@ 0x39
 8000c0e:	d809      	bhi.n	8000c24 <parseHex+0x50>
           *value += *line - '0';
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	e025      	b.n	8000c70 <parseHex+0x9c>
        } else if ((*line >= 'A') && (*line <= 'F')) {
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b40      	cmp	r3, #64	@ 0x40
 8000c2a:	d90d      	bls.n	8000c48 <parseHex+0x74>
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b46      	cmp	r3, #70	@ 0x46
 8000c32:	d809      	bhi.n	8000c48 <parseHex+0x74>
           *value += *line - 'A' + 10;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f1a3 0237 	sub.w	r2, r3, #55	@ 0x37
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e013      	b.n	8000c70 <parseHex+0x9c>
        } else if ((*line >= 'a') && (*line <= 'f')) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b60      	cmp	r3, #96	@ 0x60
 8000c4e:	d90d      	bls.n	8000c6c <parseHex+0x98>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b66      	cmp	r3, #102	@ 0x66
 8000c56:	d809      	bhi.n	8000c6c <parseHex+0x98>
           *value += *line - 'a' + 10;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	f1a3 0257 	sub.w	r2, r3, #87	@ 0x57
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e001      	b.n	8000c70 <parseHex+0x9c>
        } else return 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e008      	b.n	8000c82 <parseHex+0xae>
        line++;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3301      	adds	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
    while (len--) {
 8000c76:	7afb      	ldrb	r3, [r7, #11]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	72fa      	strb	r2, [r7, #11]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1b4      	bne.n	8000bea <parseHex+0x16>
    }
    return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <transmitStd>:
/**
 * @brief  Interprets given line and transmit can message
 * @param  line Line string which contains the transmit command
 * @retval HAL status
 */
static uint8_t transmitStd(uint8_t* line) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b088      	sub	sp, #32
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
    uint32_t temp;
    open_lin_frame_slot_t slot;
    uint8_t data_buff[8];
    uint8_t offset = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	77fb      	strb	r3, [r7, #31]

    bool lin_data = ((line[0] == 't') || (line[0] == 'T'));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b74      	cmp	r3, #116	@ 0x74
 8000ca0:	d003      	beq.n	8000caa <transmitStd+0x1c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b54      	cmp	r3, #84	@ 0x54
 8000ca8:	d101      	bne.n	8000cae <transmitStd+0x20>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <transmitStd+0x22>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	777b      	strb	r3, [r7, #29]
 8000cb2:	7f7b      	ldrb	r3, [r7, #29]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	777b      	strb	r3, [r7, #29]

    slot.data_ptr = data_buff;
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	617b      	str	r3, [r7, #20]
    if (line[0] < 'Z')
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b59      	cmp	r3, #89	@ 0x59
 8000cc6:	d801      	bhi.n	8000ccc <transmitStd+0x3e>
		offset = 5;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	77fb      	strb	r3, [r7, #31]
    // id
    if (!parseHex(&line[2 + offset], 2, &temp)) return 0;
 8000ccc:	7ffb      	ldrb	r3, [r7, #31]
 8000cce:	3302      	adds	r3, #2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f107 0218 	add.w	r2, r7, #24
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff79 	bl	8000bd4 <parseHex>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <transmitStd+0x5e>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e059      	b.n	8000da0 <transmitStd+0x112>
    	slot.pid = open_lin_data_layer_parity((open_lin_pid_t)temp); // add parity
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00b fa58 	bl	800c1a6 <open_lin_data_layer_parity>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	743b      	strb	r3, [r7, #16]
    // len
    if (!parseHex(&line[4 + offset], 1, &temp)) return 0;
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	461a      	mov	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	f107 0218 	add.w	r2, r7, #24
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff62 	bl	8000bd4 <parseHex>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <transmitStd+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	e042      	b.n	8000da0 <transmitStd+0x112>
    slot.data_length = temp;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	74bb      	strb	r3, [r7, #18]

    if (slot.data_length > 8) return 0;
 8000d20:	7cbb      	ldrb	r3, [r7, #18]
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d901      	bls.n	8000d2a <transmitStd+0x9c>
 8000d26:	2300      	movs	r3, #0
 8000d28:	e03a      	b.n	8000da0 <transmitStd+0x112>
    if (lin_data)
 8000d2a:	7f7b      	ldrb	r3, [r7, #29]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d022      	beq.n	8000d76 <transmitStd+0xe8>
    {
        uint8_t i;
        for (i = 0; i < slot.data_length; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	77bb      	strb	r3, [r7, #30]
 8000d34:	e01b      	b.n	8000d6e <transmitStd+0xe0>
            if (!parseHex(&line[5 + offset + i*2], 2, &temp)) return 0;
 8000d36:	7ffb      	ldrb	r3, [r7, #31]
 8000d38:	1d5a      	adds	r2, r3, #5
 8000d3a:	7fbb      	ldrb	r3, [r7, #30]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	f107 0218 	add.w	r2, r7, #24
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff41 	bl	8000bd4 <parseHex>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <transmitStd+0xce>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e021      	b.n	8000da0 <transmitStd+0x112>
            slot.data_ptr[i] = temp;
 8000d5c:	69b9      	ldr	r1, [r7, #24]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	7fbb      	ldrb	r3, [r7, #30]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2ca      	uxtb	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < slot.data_length; i++) {
 8000d68:	7fbb      	ldrb	r3, [r7, #30]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	77bb      	strb	r3, [r7, #30]
 8000d6e:	7cbb      	ldrb	r3, [r7, #18]
 8000d70:	7fba      	ldrb	r2, [r7, #30]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3df      	bcc.n	8000d36 <transmitStd+0xa8>
        }
    }

    if (offset == 0)
 8000d76:	7ffb      	ldrb	r3, [r7, #31]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <transmitStd+0xf8>
    {
    	open_lin_master_data_tx_header(&slot);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00b fb03 	bl	800c38c <open_lin_master_data_tx_header>
    }
    if (lin_data)
 8000d86:	7f7b      	ldrb	r3, [r7, #29]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <transmitStd+0x108>
    {
    	open_lin_master_data_tx_data(&slot);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00b fb3e 	bl	800c412 <open_lin_master_data_tx_data>
    }
    /* set data recepcion state machine */
	lin_slcan_skip_header_reception(slot.pid);
 8000d96:	7c3b      	ldrb	r3, [r7, #16]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fda1 	bl	80008e0 <lin_slcan_skip_header_reception>

    return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <USART1_UART_Init>:
extern uint32_t lin_baund_rate;

l_u8 classicChecksum = 0;

void USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <USART1_UART_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = lin_baund_rate;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <USART1_UART_Init+0x7c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000db8:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dec:	2208      	movs	r2, #8
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000df2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000df6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dfc:	f004 fac6 	bl	800538c <HAL_LIN_Init>
  {
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e00:	2100      	movs	r1, #0
 8000e02:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000e04:	f006 fb55 	bl	80074b2 <HAL_UARTEx_SetTxFifoThreshold>
  {
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000e0c:	f006 fb8f 	bl	800752e <HAL_UARTEx_SetRxFifoThreshold>
  {
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000e12:	f006 fb15 	bl	8007440 <HAL_UARTEx_DisableFifoMode>
  {
  }
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000430 	.word	0x20000430
 8000e20:	40013800 	.word	0x40013800
 8000e24:	20000008 	.word	0x20000008

08000e28 <slCanCheckCommand>:


void slCanCheckCommand()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
	uint8_t result = SLCAN_BELL;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	73fb      	strb	r3, [r7, #15]
	uint8_t *line = command;
 8000e32:	4bd3      	ldr	r3, [pc, #844]	@ (8001180 <slCanCheckCommand+0x358>)
 8000e34:	60bb      	str	r3, [r7, #8]
    static uint32_t tm = 0;
    if(millis() - tm > 1000)
 8000e36:	f000 fa91 	bl	800135c <millis>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4bd1      	ldr	r3, [pc, #836]	@ (8001184 <slCanCheckCommand+0x35c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e46:	d906      	bls.n	8000e56 <slCanCheckCommand+0x2e>
    {
        tm = millis();
 8000e48:	f000 fa88 	bl	800135c <millis>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4acd      	ldr	r2, [pc, #820]	@ (8001184 <slCanCheckCommand+0x35c>)
 8000e50:	6013      	str	r3, [r2, #0]
        toggleStatusLed();
 8000e52:	f7ff fb67 	bl	8000524 <toggleStatusLed>
    }
    switch (line[0]) {
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b76      	cmp	r3, #118	@ 0x76
 8000e5c:	f200 8212 	bhi.w	8001284 <slCanCheckCommand+0x45c>
 8000e60:	a201      	add	r2, pc, #4	@ (adr r2, 8000e68 <slCanCheckCommand+0x40>)
 8000e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e66:	bf00      	nop
 8000e68:	080012c3 	.word	0x080012c3
 8000e6c:	08001285 	.word	0x08001285
 8000e70:	08001285 	.word	0x08001285
 8000e74:	08001285 	.word	0x08001285
 8000e78:	08001285 	.word	0x08001285
 8000e7c:	08001285 	.word	0x08001285
 8000e80:	08001285 	.word	0x08001285
 8000e84:	08001285 	.word	0x08001285
 8000e88:	08001285 	.word	0x08001285
 8000e8c:	08001285 	.word	0x08001285
 8000e90:	08001285 	.word	0x08001285
 8000e94:	08001285 	.word	0x08001285
 8000e98:	08001285 	.word	0x08001285
 8000e9c:	08001285 	.word	0x08001285
 8000ea0:	08001285 	.word	0x08001285
 8000ea4:	08001285 	.word	0x08001285
 8000ea8:	08001285 	.word	0x08001285
 8000eac:	08001285 	.word	0x08001285
 8000eb0:	08001285 	.word	0x08001285
 8000eb4:	08001285 	.word	0x08001285
 8000eb8:	08001285 	.word	0x08001285
 8000ebc:	08001285 	.word	0x08001285
 8000ec0:	08001285 	.word	0x08001285
 8000ec4:	08001285 	.word	0x08001285
 8000ec8:	08001285 	.word	0x08001285
 8000ecc:	08001285 	.word	0x08001285
 8000ed0:	08001285 	.word	0x08001285
 8000ed4:	08001285 	.word	0x08001285
 8000ed8:	08001285 	.word	0x08001285
 8000edc:	08001285 	.word	0x08001285
 8000ee0:	08001285 	.word	0x08001285
 8000ee4:	08001285 	.word	0x08001285
 8000ee8:	08001285 	.word	0x08001285
 8000eec:	08001285 	.word	0x08001285
 8000ef0:	08001285 	.word	0x08001285
 8000ef4:	08001285 	.word	0x08001285
 8000ef8:	08001285 	.word	0x08001285
 8000efc:	08001285 	.word	0x08001285
 8000f00:	08001285 	.word	0x08001285
 8000f04:	08001285 	.word	0x08001285
 8000f08:	08001285 	.word	0x08001285
 8000f0c:	08001285 	.word	0x08001285
 8000f10:	08001285 	.word	0x08001285
 8000f14:	08001285 	.word	0x08001285
 8000f18:	08001285 	.word	0x08001285
 8000f1c:	08001285 	.word	0x08001285
 8000f20:	08001285 	.word	0x08001285
 8000f24:	08001285 	.word	0x08001285
 8000f28:	08001285 	.word	0x08001285
 8000f2c:	08001285 	.word	0x08001285
 8000f30:	08001285 	.word	0x08001285
 8000f34:	08001285 	.word	0x08001285
 8000f38:	08001285 	.word	0x08001285
 8000f3c:	08001285 	.word	0x08001285
 8000f40:	08001285 	.word	0x08001285
 8000f44:	08001285 	.word	0x08001285
 8000f48:	08001285 	.word	0x08001285
 8000f4c:	08001285 	.word	0x08001285
 8000f50:	08001285 	.word	0x08001285
 8000f54:	08001285 	.word	0x08001285
 8000f58:	08001285 	.word	0x08001285
 8000f5c:	08001285 	.word	0x08001285
 8000f60:	08001285 	.word	0x08001285
 8000f64:	08001285 	.word	0x08001285
 8000f68:	08001285 	.word	0x08001285
 8000f6c:	08001285 	.word	0x08001285
 8000f70:	08001285 	.word	0x08001285
 8000f74:	0800116d 	.word	0x0800116d
 8000f78:	08001285 	.word	0x08001285
 8000f7c:	08001285 	.word	0x08001285
 8000f80:	0800108f 	.word	0x0800108f
 8000f84:	08001063 	.word	0x08001063
 8000f88:	08001285 	.word	0x08001285
 8000f8c:	08001285 	.word	0x08001285
 8000f90:	08001285 	.word	0x08001285
 8000f94:	08001285 	.word	0x08001285
 8000f98:	08001121 	.word	0x08001121
 8000f9c:	08001285 	.word	0x08001285
 8000fa0:	080010c5 	.word	0x080010c5
 8000fa4:	08001109 	.word	0x08001109
 8000fa8:	08001285 	.word	0x08001285
 8000fac:	08001285 	.word	0x08001285
 8000fb0:	0800119d 	.word	0x0800119d
 8000fb4:	08001063 	.word	0x08001063
 8000fb8:	0800119d 	.word	0x0800119d
 8000fbc:	08001285 	.word	0x08001285
 8000fc0:	08001097 	.word	0x08001097
 8000fc4:	08001063 	.word	0x08001063
 8000fc8:	08001285 	.word	0x08001285
 8000fcc:	08001285 	.word	0x08001285
 8000fd0:	08001285 	.word	0x08001285
 8000fd4:	08001285 	.word	0x08001285
 8000fd8:	08001285 	.word	0x08001285
 8000fdc:	08001285 	.word	0x08001285
 8000fe0:	08001285 	.word	0x08001285
 8000fe4:	08001285 	.word	0x08001285
 8000fe8:	08001285 	.word	0x08001285
 8000fec:	08001045 	.word	0x08001045
 8000ff0:	08001285 	.word	0x08001285
 8000ff4:	08001285 	.word	0x08001285
 8000ff8:	08001285 	.word	0x08001285
 8000ffc:	08001285 	.word	0x08001285
 8001000:	08001285 	.word	0x08001285
 8001004:	08001285 	.word	0x08001285
 8001008:	08001285 	.word	0x08001285
 800100c:	08001285 	.word	0x08001285
 8001010:	08001285 	.word	0x08001285
 8001014:	08001285 	.word	0x08001285
 8001018:	08001147 	.word	0x08001147
 800101c:	08001285 	.word	0x08001285
 8001020:	08001285 	.word	0x08001285
 8001024:	08001109 	.word	0x08001109
 8001028:	08001285 	.word	0x08001285
 800102c:	08001285 	.word	0x08001285
 8001030:	0800119d 	.word	0x0800119d
 8001034:	08001063 	.word	0x08001063
 8001038:	0800119d 	.word	0x0800119d
 800103c:	08001285 	.word	0x08001285
 8001040:	080010ab 	.word	0x080010ab
    	case 0:
    		return;
    	case 'a':
    	{
    		if (terminator == SLCAN_CR)
 8001044:	4b50      	ldr	r3, [pc, #320]	@ (8001188 <slCanCheckCommand+0x360>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b0d      	cmp	r3, #13
 800104a:	d103      	bne.n	8001054 <slCanCheckCommand+0x22c>
    			terminator = SLCAN_LR;
 800104c:	4b4e      	ldr	r3, [pc, #312]	@ (8001188 <slCanCheckCommand+0x360>)
 800104e:	220a      	movs	r2, #10
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e002      	b.n	800105a <slCanCheckCommand+0x232>
    		else
    			terminator = SLCAN_CR;
 8001054:	4b4c      	ldr	r3, [pc, #304]	@ (8001188 <slCanCheckCommand+0x360>)
 8001056:	220d      	movs	r2, #13
 8001058:	701a      	strb	r2, [r3, #0]
    		result = terminator;
 800105a:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <slCanCheckCommand+0x360>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	73fb      	strb	r3, [r7, #15]
    		break;
 8001060:	e110      	b.n	8001284 <slCanCheckCommand+0x45c>
    	}
        case 'S':
        case 'G':
        case 'W':
        case 's':
        	if (line[1] == '2')
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b32      	cmp	r3, #50	@ 0x32
 800106a:	d104      	bne.n	8001076 <slCanCheckCommand+0x24e>
        	{
        		lin_baund_rate = 9600;
 800106c:	4b47      	ldr	r3, [pc, #284]	@ (800118c <slCanCheckCommand+0x364>)
 800106e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e003      	b.n	800107e <slCanCheckCommand+0x256>
        	} else
        	{
        		lin_baund_rate = 19200;
 8001076:	4b45      	ldr	r3, [pc, #276]	@ (800118c <slCanCheckCommand+0x364>)
 8001078:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800107c:	601a      	str	r2, [r3, #0]

        	}
        	USART1_UART_Init();
 800107e:	f7ff fe93 	bl	8000da8 <USART1_UART_Init>
        	open_lin_hw_reset();
 8001082:	f00b f813 	bl	800c0ac <open_lin_hw_reset>
        	result = terminator;
 8001086:	4b40      	ldr	r3, [pc, #256]	@ (8001188 <slCanCheckCommand+0x360>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	73fb      	strb	r3, [r7, #15]
        	break;
 800108c:	e0fa      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'F': // Read status flags
      		result = terminator;
 800108e:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <slCanCheckCommand+0x360>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	73fb      	strb	r3, [r7, #15]
            break;
 8001094:	e0f6      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'V': // Get hardware version
            {
                slcanSetOutputChar('V');
 8001096:	2056      	movs	r0, #86	@ 0x56
 8001098:	f7ff fcd2 	bl	8000a40 <slcanSetOutputChar>
//                slcanSetOutputAsHex(VERSION_HARDWARE_MAJOR);
                slcanSetOutputAsHex(VERSION_HARDWARE_MINOR);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fd07 	bl	8000ab0 <slcanSetOutputAsHex>
                result = terminator;
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <slCanCheckCommand+0x360>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80010a8:	e0ec      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'v': // Get firmware version
            {
                slcanSetOutputChar('v');
 80010aa:	2076      	movs	r0, #118	@ 0x76
 80010ac:	f7ff fcc8 	bl	8000a40 <slcanSetOutputChar>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MAJOR);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f7ff fcfd 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MINOR);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fcfa 	bl	8000ab0 <slcanSetOutputAsHex>
                result = terminator;
 80010bc:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <slCanCheckCommand+0x360>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80010c2:	e0df      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'N': // Get serial number
            {

                slcanSetOutputChar('N');
 80010c4:	204e      	movs	r0, #78	@ 0x4e
 80010c6:	f7ff fcbb 	bl	8000a40 <slcanSetOutputChar>
                slcanSetOutputAsHex((uint8_t)(serialNumber));
 80010ca:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <slCanCheckCommand+0x368>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fced 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>8));
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <slCanCheckCommand+0x368>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	121b      	asrs	r3, r3, #8
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fce6 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>16));
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <slCanCheckCommand+0x368>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	141b      	asrs	r3, r3, #16
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fcdf 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>24));
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <slCanCheckCommand+0x368>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	161b      	asrs	r3, r3, #24
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fcd8 	bl	8000ab0 <slcanSetOutputAsHex>
                result = terminator;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <slCanCheckCommand+0x360>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001106:	e0bd      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'o':  // master mode
        case 'O':
            if (slcan_state == SLCAN_STATE_CONFIG)
 8001108:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <slCanCheckCommand+0x36c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 80b4 	bne.w	800127a <slCanCheckCommand+0x452>
            {
                lin_type = LIN_MASTER;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <slCanCheckCommand+0x370>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <slCanCheckCommand+0x360>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800111e:	e0ac      	b.n	800127a <slCanCheckCommand+0x452>
        case 'L': // slave mode
        	 if (slcan_state == SLCAN_STATE_CONFIG){
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <slCanCheckCommand+0x36c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f040 80aa 	bne.w	800127e <slCanCheckCommand+0x456>
        		 result = terminator;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <slCanCheckCommand+0x360>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	73fb      	strb	r3, [r7, #15]
				 lin_type = LIN_SLAVE;
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <slCanCheckCommand+0x370>)
 8001132:	2202      	movs	r2, #2
 8001134:	701a      	strb	r2, [r3, #0]
				 slcan_state = SLCAN_STATE_OPEN;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <slCanCheckCommand+0x36c>)
 8001138:	2202      	movs	r2, #2
 800113a:	701a      	strb	r2, [r3, #0]
				 open_lin_hw_reset();
 800113c:	f00a ffb6 	bl	800c0ac <open_lin_hw_reset>
				 lin_slcan_reset();
 8001140:	f7ff fb56 	bl	80007f0 <lin_slcan_reset>
        	 }
        	 break;
 8001144:	e09b      	b.n	800127e <slCanCheckCommand+0x456>
        case 'l':  // monitor
            if (slcan_state == SLCAN_STATE_CONFIG)
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <slCanCheckCommand+0x36c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 8099 	bne.w	8001282 <slCanCheckCommand+0x45a>
            {
				result = terminator;
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <slCanCheckCommand+0x360>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	73fb      	strb	r3, [r7, #15]
                lin_type = LIN_MONITOR;
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <slCanCheckCommand+0x370>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
                slcan_state = SLCAN_STATE_OPEN;
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <slCanCheckCommand+0x36c>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
            	open_lin_hw_reset();
 8001162:	f00a ffa3 	bl	800c0ac <open_lin_hw_reset>
            	lin_slcan_reset();
 8001166:	f7ff fb43 	bl	80007f0 <lin_slcan_reset>
            }
            break;
 800116a:	e08a      	b.n	8001282 <slCanCheckCommand+0x45a>

        case 'C': // Close LIN channel
            slcan_state = SLCAN_STATE_CONFIG;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <slCanCheckCommand+0x36c>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
            result = terminator;
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <slCanCheckCommand+0x360>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	73fb      	strb	r3, [r7, #15]
            lin_type = LIN_MASTER;
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <slCanCheckCommand+0x370>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
            break;
 800117e:	e081      	b.n	8001284 <slCanCheckCommand+0x45c>
 8001180:	20000358 	.word	0x20000358
 8001184:	200003d8 	.word	0x200003d8
 8001188:	20000001 	.word	0x20000001
 800118c:	20000008 	.word	0x20000008
 8001190:	200003dc 	.word	0x200003dc
 8001194:	20000314 	.word	0x20000314
 8001198:	20000000 	.word	0x20000000
        case 'R':
        case 'r': // Transmit header
        case 'T':
        case 't': // Transmit full frame
            // shame on you that you put this code here ...
        	if (line[1] == '3')
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b33      	cmp	r3, #51	@ 0x33
 80011a4:	d112      	bne.n	80011cc <slCanCheckCommand+0x3a4>
			{
				if (line[2] == '1')
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3302      	adds	r3, #2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b31      	cmp	r3, #49	@ 0x31
 80011ae:	d103      	bne.n	80011b8 <slCanCheckCommand+0x390>
					classicChecksum  = 1;
 80011b0:	4b46      	ldr	r3, [pc, #280]	@ (80012cc <slCanCheckCommand+0x4a4>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e002      	b.n	80011be <slCanCheckCommand+0x396>
				else
					classicChecksum  = 0;
 80011b8:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <slCanCheckCommand+0x4a4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				 slcanSetOutputChar('Z');
 80011be:	205a      	movs	r0, #90	@ 0x5a
 80011c0:	f7ff fc3e 	bl	8000a40 <slcanSetOutputChar>
				result = terminator;
 80011c4:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	73fb      	strb	r3, [r7, #15]
				break;
 80011ca:	e05b      	b.n	8001284 <slCanCheckCommand+0x45c>
			}

            // baud rate selection
            if (line[2] == '4')
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3302      	adds	r3, #2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b34      	cmp	r3, #52	@ 0x34
 80011d4:	d114      	bne.n	8001200 <slCanCheckCommand+0x3d8>
            {
        		uint32_t temp;
        		parseHex(&line[3], 4, &temp);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3303      	adds	r3, #3
 80011da:	1d3a      	adds	r2, r7, #4
 80011dc:	2104      	movs	r1, #4
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fcf8 	bl	8000bd4 <parseHex>
        		lin_baund_rate = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	@ (80012d4 <slCanCheckCommand+0x4ac>)
 80011e8:	6013      	str	r3, [r2, #0]
        		USART1_UART_Init();
 80011ea:	f7ff fddd 	bl	8000da8 <USART1_UART_Init>
        		open_lin_hw_reset();
 80011ee:	f00a ff5d 	bl	800c0ac <open_lin_hw_reset>
        		 slcanSetOutputChar('Z');
 80011f2:	205a      	movs	r0, #90	@ 0x5a
 80011f4:	f7ff fc24 	bl	8000a40 <slcanSetOutputChar>
        		result = terminator;
 80011f8:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	73fb      	strb	r3, [r7, #15]
        		break;
 80011fe:	e041      	b.n	8001284 <slCanCheckCommand+0x45c>
            }


        	switch (lin_type)
 8001200:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <slCanCheckCommand+0x4b0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d006      	beq.n	8001216 <slCanCheckCommand+0x3ee>
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc32      	bgt.n	8001272 <slCanCheckCommand+0x44a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <slCanCheckCommand+0x3ee>
 8001210:	2b01      	cmp	r3, #1
 8001212:	d015      	beq.n	8001240 <slCanCheckCommand+0x418>
	                        result = terminator;
	                    }
	                }
					break;
				default:
					break;
 8001214:	e02d      	b.n	8001272 <slCanCheckCommand+0x44a>
	                if (addLinMasterRow(line) == 1){
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff f9d8 	bl	80005cc <addLinMasterRow>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d10a      	bne.n	8001238 <slCanCheckCommand+0x410>
	                	if (line[0] < 'Z') slcanSetOutputChar('Z');
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b59      	cmp	r3, #89	@ 0x59
 8001228:	d803      	bhi.n	8001232 <slCanCheckCommand+0x40a>
 800122a:	205a      	movs	r0, #90	@ 0x5a
 800122c:	f7ff fc08 	bl	8000a40 <slcanSetOutputChar>
 8001230:	e002      	b.n	8001238 <slCanCheckCommand+0x410>
	                	else slcanSetOutputChar('z');
 8001232:	207a      	movs	r0, #122	@ 0x7a
 8001234:	f7ff fc04 	bl	8000a40 <slcanSetOutputChar>
	                result = terminator;
 8001238:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	73fb      	strb	r3, [r7, #15]
					break;
 800123e:	e01b      	b.n	8001278 <slCanCheckCommand+0x450>
	                if (slcan_state == SLCAN_STATE_OPEN)
 8001240:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <slCanCheckCommand+0x4b4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d116      	bne.n	8001276 <slCanCheckCommand+0x44e>
	                    if (transmitStd(line) == 1) {
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f7ff fd20 	bl	8000c8e <transmitStd>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d110      	bne.n	8001276 <slCanCheckCommand+0x44e>
	                        if (line[0] < 'Z') slcanSetOutputChar('Z');
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b59      	cmp	r3, #89	@ 0x59
 800125a:	d803      	bhi.n	8001264 <slCanCheckCommand+0x43c>
 800125c:	205a      	movs	r0, #90	@ 0x5a
 800125e:	f7ff fbef 	bl	8000a40 <slcanSetOutputChar>
 8001262:	e002      	b.n	800126a <slCanCheckCommand+0x442>
	                        else slcanSetOutputChar('z');
 8001264:	207a      	movs	r0, #122	@ 0x7a
 8001266:	f7ff fbeb 	bl	8000a40 <slcanSetOutputChar>
	                        result = terminator;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	73fb      	strb	r3, [r7, #15]
					break;
 8001270:	e001      	b.n	8001276 <slCanCheckCommand+0x44e>
					break;
 8001272:	bf00      	nop
 8001274:	e006      	b.n	8001284 <slCanCheckCommand+0x45c>
					break;
 8001276:	bf00      	nop
        	}
            break;
 8001278:	e004      	b.n	8001284 <slCanCheckCommand+0x45c>
            break;
 800127a:	bf00      	nop
 800127c:	e002      	b.n	8001284 <slCanCheckCommand+0x45c>
        	 break;
 800127e:	bf00      	nop
 8001280:	e000      	b.n	8001284 <slCanCheckCommand+0x45c>
            break;
 8001282:	bf00      	nop
    }

    if ((line[0] == 'b') && (line[1] == 'o') && (line[2] == 'o') && (line[3] == 't'))
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b62      	cmp	r3, #98	@ 0x62
 800128a:	d110      	bne.n	80012ae <slCanCheckCommand+0x486>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	3301      	adds	r3, #1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b6f      	cmp	r3, #111	@ 0x6f
 8001294:	d10b      	bne.n	80012ae <slCanCheckCommand+0x486>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3302      	adds	r3, #2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b6f      	cmp	r3, #111	@ 0x6f
 800129e:	d106      	bne.n	80012ae <slCanCheckCommand+0x486>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3303      	adds	r3, #3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b74      	cmp	r3, #116	@ 0x74
 80012a8:	d101      	bne.n	80012ae <slCanCheckCommand+0x486>
    {
    	RebootToBootloader();
 80012aa:	f7ff f92d 	bl	8000508 <RebootToBootloader>
    }

   line[0] = 0;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
   slcanSetOutputChar(result);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fbc2 	bl	8000a40 <slcanSetOutputChar>
   slcanOutputFlush();
 80012bc:	f7ff fc0e 	bl	8000adc <slcanOutputFlush>
 80012c0:	e000      	b.n	80012c4 <slCanCheckCommand+0x49c>
    		return;
 80012c2:	bf00      	nop
}
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000396 	.word	0x20000396
 80012d0:	20000001 	.word	0x20000001
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000314 	.word	0x20000314

080012e0 <slcanReciveCanFrame>:
 * @param  canmsg Pointer to can message
 * 			step Current step
 * @retval Next character to print out
 */
uint8_t slcanReciveCanFrame(open_lin_frame_slot_t *pRxMsg)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	open_lin_pid_t pid;

    slcanSetOutputChar('t');
 80012e8:	2074      	movs	r0, #116	@ 0x74
 80012ea:	f7ff fba9 	bl	8000a40 <slcanSetOutputChar>

    pid = pRxMsg->pid & 0x3F;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012f6:	73bb      	strb	r3, [r7, #14]

    slCanSendNibble(0); // for slcan compatibility
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fbc1 	bl	8000a80 <slCanSendNibble>
    slcanSetOutputAsHex(pid);
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fbd5 	bl	8000ab0 <slcanSetOutputAsHex>
	slCanSendNibble(pRxMsg->data_length);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fbb8 	bl	8000a80 <slCanSendNibble>
	if (pRxMsg->data_length > 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d012      	beq.n	800133e <slcanReciveCanFrame+0x5e>
	{
		for (i = 0;  i != pRxMsg->data_length; i ++)
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e00a      	b.n	8001334 <slcanReciveCanFrame+0x54>
		{
			slcanSetOutputAsHex(pRxMsg->data_ptr[i]);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fbc1 	bl	8000ab0 <slcanSetOutputAsHex>
		for (i = 0;  i != pRxMsg->data_length; i ++)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	789b      	ldrb	r3, [r3, #2]
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	429a      	cmp	r2, r3
 800133c:	d1ef      	bne.n	800131e <slcanReciveCanFrame+0x3e>
		}
	}
	slcanSetOutputChar(terminator);
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <slcanReciveCanFrame+0x78>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fb7c 	bl	8000a40 <slcanSetOutputChar>
	slcanOutputFlush();
 8001348:	f7ff fbc8 	bl	8000adc <slcanOutputFlush>
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000001 	.word	0x20000001

0800135c <millis>:
#include "stm32g4xx_hal.h"
#include "util.h"

uint32_t millis()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001360:	f000 fc04 	bl	8001b6c <HAL_GetTick>
 8001364:	4603      	mov	r3, r0
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a2e      	ldr	r2, [pc, #184]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001388:	f043 0320 	orr.w	r3, r3, #32
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <MX_GPIO_Init+0xd4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f000 fef9 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2170      	movs	r1, #112	@ 0x70
 80013da:	481a      	ldr	r0, [pc, #104]	@ (8001444 <MX_GPIO_Init+0xd8>)
 80013dc:	f000 fef4 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e0:	2320      	movs	r3, #32
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fa:	f000 fd63 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001416:	f000 fd55 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800141a:	2370      	movs	r3, #112	@ 0x70
 800141c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4619      	mov	r1, r3
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_GPIO_Init+0xd8>)
 8001432:	f000 fd47 	bl	8001ec4 <HAL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	serialNumber = uid[0] ^ uid[1] ^ uid[2];
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <main+0x50>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <main+0x50>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	405a      	eors	r2, r3
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <main+0x50>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3308      	adds	r3, #8
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4053      	eors	r3, r2
 8001466:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <main+0x54>)
 8001468:	6013      	str	r3, [r2, #0]
	bootloaderSwitcher();
 800146a:	f7ff f854 	bl	8000516 <bootloaderSwitcher>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146e:	f000 fb52 	bl	8001b16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001472:	f000 f819 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f7ff ff79 	bl	800136c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800147a:	f000 f9bf 	bl	80017fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800147e:	f000 fa0f 	bl	80018a0 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8001482:	f00a f89f 	bl	800b5c4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &Uart2RxFifo, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	4905      	ldr	r1, [pc, #20]	@ (80014a0 <main+0x58>)
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <main+0x5c>)
 800148c:	f004 f87c 	bl	8005588 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	slCanCheckCommand();
 8001490:	f7ff fcca 	bl	8000e28 <slCanCheckCommand>
 8001494:	e7fc      	b.n	8001490 <main+0x48>
 8001496:	bf00      	nop
 8001498:	20000004 	.word	0x20000004
 800149c:	200003dc 	.word	0x200003dc
 80014a0:	200003e0 	.word	0x200003e0
 80014a4:	20000430 	.word	0x20000430

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	@ 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2238      	movs	r2, #56	@ 0x38
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00b fa4e 	bl	800c958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f002 fbe4 	bl	8003c98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014d0:	2321      	movs	r3, #33	@ 0x21
 80014d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014da:	2301      	movs	r3, #1
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e2:	2303      	movs	r3, #3
 80014e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014ea:	2355      	movs	r3, #85	@ 0x55
 80014ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fc7e 	bl	8003e00 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800150a:	f000 f865 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2303      	movs	r3, #3
 8001514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2104      	movs	r1, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f002 ff7c 	bl	8004424 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001532:	f000 f851 	bl	80015d8 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	@ 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	extern LinType_t lin_type;
	uint8_t rbyte = Uart2RxFifo;
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_UART_RxCpltCallback+0x54>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	73fb      	strb	r3, [r7, #15]
	if (slcan_state == SLCAN_STATE_OPEN)
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_UART_RxCpltCallback+0x58>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d114      	bne.n	8001580 <HAL_UART_RxCpltCallback+0x40>
	{
		switch (lin_type)
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_UART_RxCpltCallback+0x5c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_UART_RxCpltCallback+0x24>
 800155e:	2b02      	cmp	r3, #2
 8001560:	d005      	beq.n	800156e <HAL_UART_RxCpltCallback+0x2e>
 8001562:	e008      	b.n	8001576 <HAL_UART_RxCpltCallback+0x36>
		{
		case LIN_MASTER:
			open_lin_master_dl_rx(rbyte);
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	4618      	mov	r0, r3
 8001568:	f00a ff9c 	bl	800c4a4 <open_lin_master_dl_rx>
			break;
 800156c:	e008      	b.n	8001580 <HAL_UART_RxCpltCallback+0x40>
		case LIN_SLAVE:
			open_lin_slave_rx_header(rbyte);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	4618      	mov	r0, r3
 8001572:	f00b f925 	bl	800c7c0 <open_lin_slave_rx_header>
		default: /* Monitor */
			lin_slcan_rx(rbyte);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f9d5 	bl	8000928 <lin_slcan_rx>
			break;
 800157e:	bf00      	nop
		}
	}
	HAL_UART_Receive_IT(huart, &Uart2RxFifo, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	4904      	ldr	r1, [pc, #16]	@ (8001594 <HAL_UART_RxCpltCallback+0x54>)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f003 ffff 	bl	8005588 <HAL_UART_Receive_IT>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200003e0 	.word	0x200003e0
 8001598:	20000314 	.word	0x20000314
 800159c:	20000000 	.word	0x20000000

080015a0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c6:	f000 fabf 	bl	8001b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40012c00 	.word	0x40012c00

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <HAL_MspInit+0x44>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_MspInit+0x44>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_MspInit+0x44>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	6593      	str	r3, [r2, #88]	@ 0x58
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_MspInit+0x44>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800161a:	f002 fbe1 	bl	8003de0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <HAL_InitTick+0xc4>)
 800163e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001640:	4a2b      	ldr	r2, [pc, #172]	@ (80016f0 <HAL_InitTick+0xc4>)
 8001642:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001646:	6613      	str	r3, [r2, #96]	@ 0x60
 8001648:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <HAL_InitTick+0xc4>)
 800164a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001654:	f107 020c 	add.w	r2, r7, #12
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f003 f8b6 	bl	80047d0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001664:	f003 f89e 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8001668:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166c:	4a21      	ldr	r2, [pc, #132]	@ (80016f4 <HAL_InitTick+0xc8>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0c9b      	lsrs	r3, r3, #18
 8001674:	3b01      	subs	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001678:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <HAL_InitTick+0xcc>)
 800167a:	4a20      	ldr	r2, [pc, #128]	@ (80016fc <HAL_InitTick+0xd0>)
 800167c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <HAL_InitTick+0xcc>)
 8001680:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001684:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001686:	4a1c      	ldr	r2, [pc, #112]	@ (80016f8 <HAL_InitTick+0xcc>)
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_InitTick+0xcc>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_InitTick+0xcc>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001698:	4817      	ldr	r0, [pc, #92]	@ (80016f8 <HAL_InitTick+0xcc>)
 800169a:	f003 fb01 	bl	8004ca0 <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d11b      	bne.n	80016e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016ac:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <HAL_InitTick+0xcc>)
 80016ae:	f003 fb59 	bl	8004d64 <HAL_TIM_Base_Start_IT>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d111      	bne.n	80016e4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016c0:	2019      	movs	r0, #25
 80016c2:	f000 fb31 	bl	8001d28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d808      	bhi.n	80016de <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	2019      	movs	r0, #25
 80016d2:	f000 fb0f 	bl	8001cf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_InitTick+0xd4>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e002      	b.n	80016e4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3730      	adds	r7, #48	@ 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	200003e4 	.word	0x200003e4
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	20000010 	.word	0x20000010

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <USB_LP_IRQHandler+0x10>)
 800176a:	f000 fe4f 	bl	800240c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20001230 	.word	0x20001230

08001778 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  extern uint32_t slcan_lin_timeout_counter ;

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800177c:	480a      	ldr	r0, [pc, #40]	@ (80017a8 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800177e:	f003 fb5b 	bl	8004e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  slCanHandler(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff f9ca 	bl	8000b1c <slCanHandler>

  if ((slcan_lin_timeout_counter != 0) && (HAL_GetTick() - slcan_lin_timeout_counter > 3))
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <TIM1_UP_TIM16_IRQHandler+0x34>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <TIM1_UP_TIM16_IRQHandler+0x2c>
 8001790:	f000 f9ec 	bl	8001b6c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <TIM1_UP_TIM16_IRQHandler+0x34>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d901      	bls.n	80017a4 <TIM1_UP_TIM16_IRQHandler+0x2c>
  {
	  lin_slcan_rx_timeout_handler();
 80017a0:	f7ff f864 	bl	800086c <lin_slcan_rx_timeout_handler>
  }

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200003e4 	.word	0x200003e4
 80017ac:	20000308 	.word	0x20000308

080017b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <USART1_IRQHandler+0x10>)
 80017b6:	f003 ff33 	bl	8005620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000430 	.word	0x20000430

080017c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <USART2_IRQHandler+0x10>)
 80017ca:	f003 ff29 	bl	8005620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200004c4 	.word	0x200004c4

080017d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001802:	4a26      	ldr	r2, [pc, #152]	@ (800189c <MX_USART1_UART_Init+0xa0>)
 8001804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001840:	2208      	movs	r2, #8
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001846:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800184a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 800184c:	2120      	movs	r1, #32
 800184e:	4812      	ldr	r0, [pc, #72]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001850:	f003 fd9c 	bl	800538c <HAL_LIN_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 800185a:	f7ff febd 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185e:	2100      	movs	r1, #0
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001862:	f005 fe26 	bl	80074b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_USART1_UART_Init+0x74>
  {
    Error_Handler();
 800186c:	f7ff feb4 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001870:	2100      	movs	r1, #0
 8001872:	4809      	ldr	r0, [pc, #36]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001874:	f005 fe5b 	bl	800752e <HAL_UARTEx_SetRxFifoThreshold>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART1_UART_Init+0x86>
  {
    Error_Handler();
 800187e:	f7ff feab 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	@ (8001898 <MX_USART1_UART_Init+0x9c>)
 8001884:	f005 fddc 	bl	8007440 <HAL_UARTEx_DisableFifoMode>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART1_UART_Init+0x96>
  {
    Error_Handler();
 800188e:	f7ff fea3 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000430 	.word	0x20000430
 800189c:	40013800 	.word	0x40013800

080018a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <MX_USART2_UART_Init+0x94>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018ea:	f003 fcff 	bl	80052ec <HAL_UART_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018f4:	f7ff fe70 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 80018fc:	f005 fdd9 	bl	80074b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001906:	f7ff fe67 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 800190e:	f005 fe0e 	bl	800752e <HAL_UARTEx_SetRxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001918:	f7ff fe5e 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_USART2_UART_Init+0x90>)
 800191e:	f005 fd8f 	bl	8007440 <HAL_UARTEx_DisableFifoMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001928:	f7ff fe56 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200004c4 	.word	0x200004c4
 8001934:	40004400 	.word	0x40004400

08001938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b09e      	sub	sp, #120	@ 0x78
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	2244      	movs	r2, #68	@ 0x44
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f00a fffd 	bl	800c958 <memset>
  if(uartHandle->Instance==USART1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a54      	ldr	r2, [pc, #336]	@ (8001ab4 <HAL_UART_MspInit+0x17c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d140      	bne.n	80019ea <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001968:	2301      	movs	r3, #1
 800196a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001970:	f107 0320 	add.w	r3, r7, #32
 8001974:	4618      	mov	r0, r3
 8001976:	f002 ffa3 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001980:	f7ff fe2a 	bl	80015d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001984:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001988:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 800198a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001990:	4b49      	ldr	r3, [pc, #292]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a45      	ldr	r2, [pc, #276]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a8:	4b43      	ldr	r3, [pc, #268]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c6:	2307      	movs	r3, #7
 80019c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d4:	f000 fa76 	bl	8001ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2025      	movs	r0, #37	@ 0x25
 80019de:	f000 f989 	bl	8001cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019e2:	2025      	movs	r0, #37	@ 0x25
 80019e4:	f000 f9a0 	bl	8001d28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019e8:	e060      	b.n	8001aac <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a33      	ldr	r2, [pc, #204]	@ (8001abc <HAL_UART_MspInit+0x184>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d15b      	bne.n	8001aac <HAL_UART_MspInit+0x174>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 ff5d 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001a0c:	f7ff fde4 	bl	80015d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a10:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	4a28      	ldr	r2, [pc, #160]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1c:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	4a22      	ldr	r2, [pc, #136]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a34:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a44:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <HAL_UART_MspInit+0x180>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a5c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a78:	f000 fa24 	bl	8001ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a94:	4619      	mov	r1, r3
 8001a96:	480a      	ldr	r0, [pc, #40]	@ (8001ac0 <HAL_UART_MspInit+0x188>)
 8001a98:	f000 fa14 	bl	8001ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2026      	movs	r0, #38	@ 0x26
 8001aa2:	f000 f927 	bl	8001cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa6:	2026      	movs	r0, #38	@ 0x26
 8001aa8:	f000 f93e 	bl	8001d28 <HAL_NVIC_EnableIRQ>
}
 8001aac:	bf00      	nop
 8001aae:	3778      	adds	r7, #120	@ 0x78
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	48000400 	.word	0x48000400

08001ac4 <Reset_Handler>:
 8001ac4:	480d      	ldr	r0, [pc, #52]	@ (8001afc <LoopForever+0x2>)
 8001ac6:	4685      	mov	sp, r0
 8001ac8:	f7ff fe86 	bl	80017d8 <SystemInit>
 8001acc:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <LoopForever+0x6>)
 8001ace:	490d      	ldr	r1, [pc, #52]	@ (8001b04 <LoopForever+0xa>)
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <LoopForever+0xe>)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:
 8001ad6:	58d4      	ldr	r4, [r2, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:
 8001adc:	18c4      	adds	r4, r0, r3
 8001ade:	428c      	cmp	r4, r1
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <LoopForever+0x12>)
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8001b10 <LoopForever+0x16>)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:
 8001aee:	42a2      	cmp	r2, r4
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>
 8001af2:	f00a ff39 	bl	800c968 <__libc_init_array>
 8001af6:	f7ff fca7 	bl	8001448 <main>

08001afa <LoopForever>:
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
 8001afc:	20008000 	.word	0x20008000
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000190 	.word	0x20000190
 8001b08:	0800ca7c 	.word	0x0800ca7c
 8001b0c:	20000190 	.word	0x20000190
 8001b10:	20001760 	.word	0x20001760

08001b14 <ADC1_2_IRQHandler>:
 8001b14:	e7fe      	b.n	8001b14 <ADC1_2_IRQHandler>

08001b16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f8dc 	bl	8001cde <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b26:	200f      	movs	r0, #15
 8001b28:	f7ff fd80 	bl	800162c <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	e001      	b.n	8001b3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b38:	f7ff fd54 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_IncTick+0x1c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_IncTick+0x20>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a03      	ldr	r2, [pc, #12]	@ (8001b64 <HAL_IncTick+0x1c>)
 8001b58:	6013      	str	r3, [r2, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20000558 	.word	0x20000558
 8001b68:	20000014 	.word	0x20000014

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000558 	.word	0x20000558

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	@ (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	@ (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ff4c 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d02:	f7ff ff63 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	6978      	ldr	r0, [r7, #20]
 8001d0e:	f7ff ffb3 	bl	8001c78 <NVIC_EncodePriority>
 8001d12:	4602      	mov	r2, r0
 8001d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff82 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d20:	bf00      	nop
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff56 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d005      	beq.n	8001d68 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e037      	b.n	8001dd8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 020e 	bic.w	r2, r2, #14
 8001d76:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d86:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001db4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dcc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dd6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2204      	movs	r2, #4
 8001e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e047      	b.n	8001eba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 020e 	bic.w	r2, r2, #14
 8001e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f003 021f 	and.w	r2, r3, #31
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00c      	beq.n	8001e9a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
    }
  }
  return status;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ed2:	e15a      	b.n	800218a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 814c 	beq.w	8002184 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d005      	beq.n	8001f04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d130      	bne.n	8001f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 0201 	and.w	r2, r3, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d017      	beq.n	8001fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d123      	bne.n	8001ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	6939      	ldr	r1, [r7, #16]
 8001ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0203 	and.w	r2, r3, #3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a6 	beq.w	8002184 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002038:	4b5b      	ldr	r3, [pc, #364]	@ (80021a8 <HAL_GPIO_Init+0x2e4>)
 800203a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203c:	4a5a      	ldr	r2, [pc, #360]	@ (80021a8 <HAL_GPIO_Init+0x2e4>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6613      	str	r3, [r2, #96]	@ 0x60
 8002044:	4b58      	ldr	r3, [pc, #352]	@ (80021a8 <HAL_GPIO_Init+0x2e4>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002050:	4a56      	ldr	r2, [pc, #344]	@ (80021ac <HAL_GPIO_Init+0x2e8>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800207a:	d01f      	beq.n	80020bc <HAL_GPIO_Init+0x1f8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4c      	ldr	r2, [pc, #304]	@ (80021b0 <HAL_GPIO_Init+0x2ec>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d019      	beq.n	80020b8 <HAL_GPIO_Init+0x1f4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4b      	ldr	r2, [pc, #300]	@ (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_GPIO_Init+0x1f0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a4a      	ldr	r2, [pc, #296]	@ (80021b8 <HAL_GPIO_Init+0x2f4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00d      	beq.n	80020b0 <HAL_GPIO_Init+0x1ec>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a49      	ldr	r2, [pc, #292]	@ (80021bc <HAL_GPIO_Init+0x2f8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <HAL_GPIO_Init+0x1e8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a48      	ldr	r2, [pc, #288]	@ (80021c0 <HAL_GPIO_Init+0x2fc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_GPIO_Init+0x1e4>
 80020a4:	2305      	movs	r3, #5
 80020a6:	e00a      	b.n	80020be <HAL_GPIO_Init+0x1fa>
 80020a8:	2306      	movs	r3, #6
 80020aa:	e008      	b.n	80020be <HAL_GPIO_Init+0x1fa>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e006      	b.n	80020be <HAL_GPIO_Init+0x1fa>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e004      	b.n	80020be <HAL_GPIO_Init+0x1fa>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x1fa>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_GPIO_Init+0x1fa>
 80020bc:	2300      	movs	r3, #0
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ce:	4937      	ldr	r1, [pc, #220]	@ (80021ac <HAL_GPIO_Init+0x2e8>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020dc:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002100:	4a30      	ldr	r2, [pc, #192]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002106:	4b2f      	ldr	r3, [pc, #188]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800212a:	4a26      	ldr	r2, [pc, #152]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002130:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002154:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800217e:	4a11      	ldr	r2, [pc, #68]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f ae9d 	bne.w	8001ed4 <HAL_GPIO_Init+0x10>
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48001000 	.word	0x48001000
 80021c0:	48001400 	.word	0x48001400
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	041a      	lsls	r2, r3, #16
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43d9      	mvns	r1, r3
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	400b      	ands	r3, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0c0      	b.n	80023c0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f009 fbce 	bl	800b9f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2203      	movs	r2, #3
 800225c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fa06 	bl	8007676 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e03e      	b.n	80022ee <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	3311      	adds	r3, #17
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3310      	adds	r3, #16
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	3313      	adds	r3, #19
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3320      	adds	r3, #32
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3324      	adds	r3, #36	@ 0x24
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	3301      	adds	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	791b      	ldrb	r3, [r3, #4]
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d3bb      	bcc.n	8002270 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e044      	b.n	8002388 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	3301      	adds	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	429a      	cmp	r2, r3
 8002390:	d3b5      	bcc.n	80022fe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800239e:	f005 f985 	bl	80076ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7a9b      	ldrb	r3, [r3, #10]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f001 fc42 	bl	8003c42 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_PCD_Start+0x16>
 80023da:	2302      	movs	r3, #2
 80023dc:	e012      	b.n	8002404 <HAL_PCD_Start+0x3c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f005 f92c 	bl	8007648 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f007 fbed 	bl	8009bd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f007 fbf2 	bl	8009c02 <USB_ReadInterrupts>
 800241e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fb06 	bl	8002a3c <PCD_EP_ISR_Handler>

    return;
 8002430:	e110      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800244e:	b292      	uxth	r2, r2
 8002450:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f009 fb5e 	bl	800bb16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800245a:	2100      	movs	r1, #0
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f8fc 	bl	800265a <HAL_PCD_SetAddress>

    return;
 8002462:	e0f7      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00c      	beq.n	8002488 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002480:	b292      	uxth	r2, r2
 8002482:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002486:	e0e5      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024a4:	b292      	uxth	r2, r2
 80024a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024aa:	e0d3      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d034      	beq.n	8002520 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024be:	b29a      	uxth	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0204 	bic.w	r2, r2, #4
 80024c8:	b292      	uxth	r2, r2
 80024ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0208 	bic.w	r2, r2, #8
 80024e0:	b292      	uxth	r2, r2
 80024e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024f8:	2100      	movs	r1, #0
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f009 fcfe 	bl	800befc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f009 fb41 	bl	800bb88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800250e:	b29a      	uxth	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002518:	b292      	uxth	r2, r2
 800251a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800251e:	e099      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002526:	2b00      	cmp	r3, #0
 8002528:	d027      	beq.n	800257a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0208 	orr.w	r2, r2, #8
 800253c:	b292      	uxth	r2, r2
 800253e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002554:	b292      	uxth	r2, r2
 8002556:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002562:	b29a      	uxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0204 	orr.w	r2, r2, #4
 800256c:	b292      	uxth	r2, r2
 800256e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f009 faee 	bl	800bb54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002578:	e06c      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d040      	beq.n	8002606 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002596:	b292      	uxth	r2, r2
 8002598:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d12b      	bne.n	80025fe <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0204 	orr.w	r2, r2, #4
 80025b8:	b292      	uxth	r2, r2
 80025ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0208 	orr.w	r2, r2, #8
 80025d0:	b292      	uxth	r2, r2
 80025d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025f4:	2101      	movs	r1, #1
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f009 fc80 	bl	800befc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80025fc:	e02a      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f009 faa8 	bl	800bb54 <HAL_PCD_SuspendCallback>
    return;
 8002604:	e026      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002622:	b292      	uxth	r2, r2
 8002624:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f009 fa66 	bl	800bafa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800262e:	e011      	b.n	8002654 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800264c:	b292      	uxth	r2, r2
 800264e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002652:	bf00      	nop
  }
}
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_PCD_SetAddress+0x1a>
 8002670:	2302      	movs	r3, #2
 8002672:	e012      	b.n	800269a <HAL_PCD_SetAddress+0x40>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f007 fa8e 	bl	8009bac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	4608      	mov	r0, r1
 80026ac:	4611      	mov	r1, r2
 80026ae:	461a      	mov	r2, r3
 80026b0:	4603      	mov	r3, r0
 80026b2:	70fb      	strb	r3, [r7, #3]
 80026b4:	460b      	mov	r3, r1
 80026b6:	803b      	strh	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da0e      	bge.n	80026e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 0207 	and.w	r2, r3, #7
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	3310      	adds	r3, #16
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	705a      	strb	r2, [r3, #1]
 80026e4:	e00e      	b.n	8002704 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 0207 	and.w	r2, r3, #7
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002710:	883b      	ldrh	r3, [r7, #0]
 8002712:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	78ba      	ldrb	r2, [r7, #2]
 800271e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002720:	78bb      	ldrb	r3, [r7, #2]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d102      	bne.n	800272c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_PCD_EP_Open+0x98>
 8002736:	2302      	movs	r3, #2
 8002738:	e00e      	b.n	8002758 <HAL_PCD_EP_Open+0xb6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	4618      	mov	r0, r3
 800274a:	f004 ffcd 	bl	80076e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002756:	7afb      	ldrb	r3, [r7, #11]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800276c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002770:	2b00      	cmp	r3, #0
 8002772:	da0e      	bge.n	8002792 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 0207 	and.w	r2, r3, #7
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	3310      	adds	r3, #16
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	705a      	strb	r2, [r3, #1]
 8002790:	e00e      	b.n	80027b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 0207 	and.w	r2, r3, #7
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_PCD_EP_Close+0x6a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e00e      	b.n	80027e8 <HAL_PCD_EP_Close+0x88>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	4618      	mov	r0, r3
 80027da:	f005 fb49 	bl	8007e70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	460b      	mov	r3, r1
 80027fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	f003 0207 	and.w	r2, r3, #7
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	b2da      	uxtb	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6979      	ldr	r1, [r7, #20]
 8002842:	4618      	mov	r0, r3
 8002844:	f005 fd01 	bl	800824a <USB_EPStartXfer>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 0207 	and.w	r2, r3, #7
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002874:	681b      	ldr	r3, [r3, #0]
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	460b      	mov	r3, r1
 8002890:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f003 0207 	and.w	r2, r3, #7
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	3310      	adds	r3, #16
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2201      	movs	r2, #1
 80028cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f005 fcb2 	bl	800824a <USB_EPStartXfer>

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	7912      	ldrb	r2, [r2, #4]
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e03e      	b.n	800298c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800290e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da0e      	bge.n	8002934 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 0207 	and.w	r2, r3, #7
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	3310      	adds	r3, #16
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	705a      	strb	r2, [r3, #1]
 8002932:	e00c      	b.n	800294e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_PCD_EP_SetStall+0x7e>
 800296a:	2302      	movs	r3, #2
 800296c:	e00e      	b.n	800298c <HAL_PCD_EP_SetStall+0x9c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	4618      	mov	r0, r3
 800297e:	f007 f816 	bl	80099ae <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	7912      	ldrb	r2, [r2, #4]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e040      	b.n	8002a34 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0e      	bge.n	80029d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 0207 	and.w	r2, r3, #7
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	3310      	adds	r3, #16
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	705a      	strb	r2, [r3, #1]
 80029d6:	e00e      	b.n	80029f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0207 	and.w	r2, r3, #7
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_EP_ClrStall+0x82>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e00e      	b.n	8002a34 <HAL_PCD_EP_ClrStall+0xa0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f007 f813 	bl	8009a50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b096      	sub	sp, #88	@ 0x58
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a44:	e3ad      	b.n	80031a2 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a4e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8002a60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 816f 	bne.w	8002d48 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d14c      	bne.n	8002b10 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a86:	81fb      	strh	r3, [r7, #14]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	89fb      	ldrh	r3, [r7, #14]
 8002a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	441a      	add	r2, r3
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f008 fff4 	bl	800bac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7b1b      	ldrb	r3, [r3, #12]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 835c 	beq.w	80031a2 <PCD_EP_ISR_Handler+0x766>
 8002aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8357 	bne.w	80031a2 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7b1b      	ldrb	r3, [r3, #12]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	731a      	strb	r2, [r3, #12]
 8002b0e:	e348      	b.n	80031a2 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b16:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d032      	beq.n	8002b94 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b62:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b66:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f007 f89c 	bl	8009ca6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	823b      	strh	r3, [r7, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	8a3a      	ldrh	r2, [r7, #16]
 8002b84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f008 ff6d 	bl	800ba6c <HAL_PCD_SetupStageCallback>
 8002b92:	e306      	b.n	80031a2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b94:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f280 8302 	bge.w	80031a2 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002baa:	4013      	ands	r3, r2
 8002bac:	83fb      	strh	r3, [r7, #30]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	8bfa      	ldrh	r2, [r7, #30]
 8002bb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d019      	beq.n	8002c20 <PCD_EP_ISR_Handler+0x1e4>
 8002bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfa:	6959      	ldr	r1, [r3, #20]
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f007 f84e 	bl	8009ca6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	441a      	add	r2, r3
 8002c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f008 ff38 	bl	800ba90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 82b5 	bne.w	80031a2 <PCD_EP_ISR_Handler+0x766>
 8002c38:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002c3c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c44:	f000 82ad 	beq.w	80031a2 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <PCD_EP_ISR_Handler+0x25a>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	e039      	b.n	8002d0a <PCD_EP_ISR_Handler+0x2ce>
 8002c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c9c:	d818      	bhi.n	8002cd0 <PCD_EP_ISR_Handler+0x294>
 8002c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <PCD_EP_ISR_Handler+0x27c>
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e01c      	b.n	8002d0a <PCD_EP_ISR_Handler+0x2ce>
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <PCD_EP_ISR_Handler+0x2ae>
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1a:	827b      	strh	r3, [r7, #18]
 8002d1c:	8a7b      	ldrh	r3, [r7, #18]
 8002d1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d22:	827b      	strh	r3, [r7, #18]
 8002d24:	8a7b      	ldrh	r3, [r7, #18]
 8002d26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d2a:	827b      	strh	r3, [r7, #18]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	8a7b      	ldrh	r3, [r7, #18]
 8002d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8013      	strh	r3, [r2, #0]
 8002d46:	e22c      	b.n	80031a2 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d5c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f280 80f6 	bge.w	8002f52 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002d94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d9c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db4:	7b1b      	ldrb	r3, [r3, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d123      	bne.n	8002e02 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dde:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002de2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 808e 	beq.w	8002f08 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df2:	6959      	ldr	r1, [r3, #20]
 8002df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df6:	88da      	ldrh	r2, [r3, #6]
 8002df8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dfc:	f006 ff53 	bl	8009ca6 <USB_ReadPMA>
 8002e00:	e082      	b.n	8002f08 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d10a      	bne.n	8002e20 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9d3 	bl	80031be <HAL_PCD_EP_DB_Receive>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002e1e:	e073      	b.n	8002f08 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	441a      	add	r2, r3
 8002e4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d022      	beq.n	8002ec4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002ea6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d02c      	beq.n	8002f08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb4:	6959      	ldr	r1, [r3, #20]
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb8:	891a      	ldrh	r2, [r3, #8]
 8002eba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ebe:	f006 fef2 	bl	8009ca6 <USB_ReadPMA>
 8002ec2:	e021      	b.n	8002f08 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002eec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d009      	beq.n	8002f08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efa:	6959      	ldr	r1, [r3, #20]
 8002efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efe:	895a      	ldrh	r2, [r3, #10]
 8002f00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f04:	f006 fecf 	bl	8009ca6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f10:	441a      	add	r2, r3
 8002f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f1e:	441a      	add	r2, r3
 8002f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <PCD_EP_ISR_Handler+0x4fc>
 8002f2c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d206      	bcs.n	8002f46 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f008 fda6 	bl	800ba90 <HAL_PCD_DataOutStageCallback>
 8002f44:	e005      	b.n	8002f52 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f005 f97c 	bl	800824a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8121 	beq.w	80031a2 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f60:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	3310      	adds	r3, #16
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	441a      	add	r2, r3
 8002fa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	78db      	ldrb	r3, [r3, #3]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	f040 80a2 	bne.w	80030fe <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8002fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc2:	7b1b      	ldrb	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8093 	beq.w	80030f0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d046      	beq.n	8003064 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d126      	bne.n	800302c <PCD_EP_ISR_Handler+0x5f0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	4413      	add	r3, r2
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	00da      	lsls	r2, r3, #3
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	4413      	add	r3, r2
 8003000:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003010:	b29a      	uxth	r2, r3
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003024:	b29a      	uxth	r2, r3
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	e061      	b.n	80030f0 <PCD_EP_ISR_Handler+0x6b4>
 800302c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d15d      	bne.n	80030f0 <PCD_EP_ISR_Handler+0x6b4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003042:	b29b      	uxth	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003048:	4413      	add	r3, r2
 800304a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	00da      	lsls	r2, r3, #3
 8003052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003054:	4413      	add	r3, r2
 8003056:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800305a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	2200      	movs	r2, #0
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	e045      	b.n	80030f0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800306a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d126      	bne.n	80030c0 <PCD_EP_ISR_Handler+0x684>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	637b      	str	r3, [r7, #52]	@ 0x34
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003086:	4413      	add	r3, r2
 8003088:	637b      	str	r3, [r7, #52]	@ 0x34
 800308a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	00da      	lsls	r2, r3, #3
 8003090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003092:	4413      	add	r3, r2
 8003094:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003098:	633b      	str	r3, [r7, #48]	@ 0x30
 800309a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	e017      	b.n	80030f0 <PCD_EP_ISR_Handler+0x6b4>
 80030c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d113      	bne.n	80030f0 <PCD_EP_ISR_Handler+0x6b4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d6:	4413      	add	r3, r2
 80030d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	00da      	lsls	r2, r3, #3
 80030e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f008 fce5 	bl	800bac6 <HAL_PCD_DataInStageCallback>
 80030fc:	e051      	b.n	80031a2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d144      	bne.n	8003194 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	4413      	add	r3, r2
 8003124:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800313a:	429a      	cmp	r2, r3
 800313c:	d907      	bls.n	800314e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800313e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003146:	1ad2      	subs	r2, r2, r3
 8003148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314a:	619a      	str	r2, [r3, #24]
 800314c:	e002      	b.n	8003154 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800314e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800315c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f008 fcaf 	bl	800bac6 <HAL_PCD_DataInStageCallback>
 8003168:	e01b      	b.n	80031a2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800316a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003172:	441a      	add	r2, r3
 8003174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003176:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003180:	441a      	add	r2, r3
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800318c:	4618      	mov	r0, r3
 800318e:	f005 f85c 	bl	800824a <USB_EPStartXfer>
 8003192:	e006      	b.n	80031a2 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003194:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003198:	461a      	mov	r2, r3
 800319a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f917 	bl	80033d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f6ff ac49 	blt.w	8002a46 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3758      	adds	r7, #88	@ 0x58
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b088      	sub	sp, #32
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	4613      	mov	r3, r2
 80031ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d07c      	beq.n	80032d0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	8b7b      	ldrh	r3, [r7, #26]
 8003202:	429a      	cmp	r2, r3
 8003204:	d306      	bcc.n	8003214 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	8b7b      	ldrh	r3, [r7, #26]
 800320c:	1ad2      	subs	r2, r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	619a      	str	r2, [r3, #24]
 8003212:	e002      	b.n	800321a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d123      	bne.n	800326a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800323c:	833b      	strh	r3, [r7, #24]
 800323e:	8b3b      	ldrh	r3, [r7, #24]
 8003240:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003244:	833b      	strh	r3, [r7, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	8b3b      	ldrh	r3, [r7, #24]
 8003256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800325a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800325e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01f      	beq.n	80032b4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328e:	82fb      	strh	r3, [r7, #22]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	8afb      	ldrh	r3, [r7, #22]
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032b4:	8b7b      	ldrh	r3, [r7, #26]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8085 	beq.w	80033c6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	6959      	ldr	r1, [r3, #20]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	891a      	ldrh	r2, [r3, #8]
 80032c8:	8b7b      	ldrh	r3, [r7, #26]
 80032ca:	f006 fcec 	bl	8009ca6 <USB_ReadPMA>
 80032ce:	e07a      	b.n	80033c6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032d8:	b29b      	uxth	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	8b7b      	ldrh	r3, [r7, #26]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d306      	bcc.n	800330e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	8b7b      	ldrh	r3, [r7, #26]
 8003306:	1ad2      	subs	r2, r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	619a      	str	r2, [r3, #24]
 800330c:	e002      	b.n	8003314 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d123      	bne.n	8003364 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003336:	83fb      	strh	r3, [r7, #30]
 8003338:	8bfb      	ldrh	r3, [r7, #30]
 800333a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800333e:	83fb      	strh	r3, [r7, #30]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	8bfb      	ldrh	r3, [r7, #30]
 8003350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800335c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003360:	b29b      	uxth	r3, r3
 8003362:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11f      	bne.n	80033ae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003388:	83bb      	strh	r3, [r7, #28]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	8bbb      	ldrh	r3, [r7, #28]
 800339a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800339e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033ae:	8b7b      	ldrh	r3, [r7, #26]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	895a      	ldrh	r2, [r3, #10]
 80033c0:	8b7b      	ldrh	r3, [r7, #26]
 80033c2:	f006 fc70 	bl	8009ca6 <USB_ReadPMA>
    }
  }

  return count;
 80033c6:	8b7b      	ldrh	r3, [r7, #26]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b0a4      	sub	sp, #144	@ 0x90
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 81db 	beq.w	80037a0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	4413      	add	r3, r2
 8003404:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800341a:	429a      	cmp	r2, r3
 800341c:	d907      	bls.n	800342e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003426:	1ad2      	subs	r2, r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	619a      	str	r2, [r3, #24]
 800342c:	e002      	b.n	8003434 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 80b9 	bne.w	80035b0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d126      	bne.n	8003494 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003454:	b29b      	uxth	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	4413      	add	r3, r2
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	00da      	lsls	r2, r3, #3
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	4413      	add	r3, r2
 8003468:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003478:	b29a      	uxth	r2, r3
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800348c:	b29a      	uxth	r2, r3
 800348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	e01a      	b.n	80034ca <HAL_PCD_EP_DB_Transmit+0xfa>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d116      	bne.n	80034ca <HAL_PCD_EP_DB_Transmit+0xfa>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	4413      	add	r3, r2
 80034b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	00da      	lsls	r2, r3, #3
 80034ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034bc:	4413      	add	r3, r2
 80034be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d126      	bne.n	8003526 <HAL_PCD_EP_DB_Transmit+0x156>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	00da      	lsls	r2, r3, #3
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350a:	b29a      	uxth	r2, r3
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	801a      	strh	r2, [r3, #0]
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351e:	b29a      	uxth	r2, r3
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	e017      	b.n	8003556 <HAL_PCD_EP_DB_Transmit+0x186>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d113      	bne.n	8003556 <HAL_PCD_EP_DB_Transmit+0x186>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	4413      	add	r3, r2
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	00da      	lsls	r2, r3, #3
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	4413      	add	r3, r2
 800354a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800354e:	623b      	str	r3, [r7, #32]
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	2200      	movs	r2, #0
 8003554:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	4619      	mov	r1, r3
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f008 fab2 	bl	800bac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 82fa 	beq.w	8003b62 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003588:	82fb      	strh	r3, [r7, #22]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	441a      	add	r2, r3
 8003598:	8afb      	ldrh	r3, [r7, #22]
 800359a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800359e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	8013      	strh	r3, [r2, #0]
 80035ae:	e2d8      	b.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d021      	beq.n	80035fe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80035ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 82ac 	bne.w	8003b62 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003612:	441a      	add	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003620:	441a      	add	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	429a      	cmp	r2, r3
 8003630:	d30b      	bcc.n	800364a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003642:	1ad2      	subs	r2, r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	621a      	str	r2, [r3, #32]
 8003648:	e017      	b.n	800367a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003652:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003662:	e00a      	b.n	800367a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d165      	bne.n	800374e <HAL_PCD_EP_DB_Transmit+0x37e>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003696:	4413      	add	r3, r2
 8003698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	00da      	lsls	r2, r3, #3
 80036a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a2:	4413      	add	r3, r2
 80036a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x308>
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	e057      	b.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80036d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80036de:	d818      	bhi.n	8003712 <HAL_PCD_EP_DB_Transmit+0x342>
 80036e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_PCD_EP_DB_Transmit+0x32a>
 80036f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f6:	3301      	adds	r3, #1
 80036f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003702:	b29b      	uxth	r3, r3
 8003704:	029b      	lsls	r3, r3, #10
 8003706:	b29b      	uxth	r3, r3
 8003708:	4313      	orrs	r3, r2
 800370a:	b29a      	uxth	r2, r3
 800370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	e03a      	b.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800371a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_PCD_EP_DB_Transmit+0x35c>
 8003726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003728:	3b01      	subs	r3, #1
 800372a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29a      	uxth	r2, r3
 8003732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003734:	b29b      	uxth	r3, r3
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	b29b      	uxth	r3, r3
 800373a:	4313      	orrs	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003746:	b29a      	uxth	r2, r3
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	801a      	strh	r2, [r3, #0]
 800374c:	e01c      	b.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	785b      	ldrb	r3, [r3, #1]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d118      	bne.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	647b      	str	r3, [r7, #68]	@ 0x44
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003764:	b29b      	uxth	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800376a:	4413      	add	r3, r2
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	00da      	lsls	r2, r3, #3
 8003774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003776:	4413      	add	r3, r2
 8003778:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800377c:	643b      	str	r3, [r7, #64]	@ 0x40
 800377e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003782:	b29a      	uxth	r2, r3
 8003784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003786:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6959      	ldr	r1, [r3, #20]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	891a      	ldrh	r2, [r3, #8]
 8003794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003798:	b29b      	uxth	r3, r3
 800379a:	f006 fa42 	bl	8009c22 <USB_WritePMA>
 800379e:	e1e0      	b.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	4413      	add	r3, r2
 80037ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d307      	bcc.n	80037e4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	619a      	str	r2, [r3, #24]
 80037e2:	e002      	b.n	80037ea <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2200      	movs	r2, #0
 80037e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 80c0 	bne.w	8003974 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d126      	bne.n	800384a <HAL_PCD_EP_DB_Transmit+0x47a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003810:	4413      	add	r3, r2
 8003812:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00da      	lsls	r2, r3, #3
 800381a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800381c:	4413      	add	r3, r2
 800381e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003822:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382e:	b29a      	uxth	r2, r3
 8003830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003832:	801a      	strh	r2, [r3, #0]
 8003834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003842:	b29a      	uxth	r2, r3
 8003844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	e01a      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d116      	bne.n	8003880 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	667b      	str	r3, [r7, #100]	@ 0x64
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003860:	b29b      	uxth	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003866:	4413      	add	r3, r2
 8003868:	667b      	str	r3, [r7, #100]	@ 0x64
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	00da      	lsls	r2, r3, #3
 8003870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003872:	4413      	add	r3, r2
 8003874:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003878:	663b      	str	r3, [r7, #96]	@ 0x60
 800387a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800387c:	2200      	movs	r2, #0
 800387e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	677b      	str	r3, [r7, #116]	@ 0x74
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d12b      	bne.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x516>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389c:	b29b      	uxth	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a2:	4413      	add	r3, r2
 80038a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	00da      	lsls	r2, r3, #3
 80038ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ae:	4413      	add	r3, r2
 80038b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ca:	801a      	strh	r2, [r3, #0]
 80038cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038dc:	b29a      	uxth	r2, r3
 80038de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e017      	b.n	8003916 <HAL_PCD_EP_DB_Transmit+0x546>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d113      	bne.n	8003916 <HAL_PCD_EP_DB_Transmit+0x546>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038fc:	4413      	add	r3, r2
 80038fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00da      	lsls	r2, r3, #3
 8003906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003908:	4413      	add	r3, r2
 800390a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800390e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f008 f8d2 	bl	800bac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 811a 	bne.w	8003b62 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003948:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800395e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800396a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]
 8003972:	e0f6      	b.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d121      	bne.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003998:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 80ca 	bne.w	8003b62 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80039d6:	441a      	add	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80039e4:	441a      	add	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d30b      	bcc.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a06:	1ad2      	subs	r2, r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	621a      	str	r2, [r3, #32]
 8003a0c:	e017      	b.n	8003a3e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003a16:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a26:	e00a      	b.n	8003a3e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2200      	movs	r2, #0
 8003a34:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d165      	bne.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x748>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a60:	4413      	add	r3, r2
 8003a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00da      	lsls	r2, r3, #3
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8003a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a9e:	801a      	strh	r2, [r3, #0]
 8003aa0:	e054      	b.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003aa8:	d818      	bhi.n	8003adc <HAL_PCD_EP_DB_Transmit+0x70c>
 8003aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8003abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	029b      	lsls	r3, r3, #10
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	e037      	b.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x726>
 8003af0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003af2:	3b01      	subs	r3, #1
 8003af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003af6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	029b      	lsls	r3, r3, #10
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e019      	b.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d115      	bne.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2e:	4413      	add	r3, r2
 8003b30:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	00da      	lsls	r2, r3, #3
 8003b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b40:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6959      	ldr	r1, [r3, #20]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	895a      	ldrh	r2, [r3, #10]
 8003b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f006 f860 	bl	8009c22 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b7c:	82bb      	strh	r3, [r7, #20]
 8003b7e:	8abb      	ldrh	r3, [r7, #20]
 8003b80:	f083 0310 	eor.w	r3, r3, #16
 8003b84:	82bb      	strh	r3, [r7, #20]
 8003b86:	8abb      	ldrh	r3, [r7, #20]
 8003b88:	f083 0320 	eor.w	r3, r3, #32
 8003b8c:	82bb      	strh	r3, [r7, #20]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	441a      	add	r2, r3
 8003b9c:	8abb      	ldrh	r3, [r7, #20]
 8003b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3790      	adds	r7, #144	@ 0x90
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	817b      	strh	r3, [r7, #10]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003bce:	897b      	ldrh	r3, [r7, #10]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	897b      	ldrh	r3, [r7, #10]
 8003bdc:	f003 0207 	and.w	r2, r3, #7
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	3310      	adds	r3, #16
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e009      	b.n	8003c06 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bf2:	897a      	ldrh	r2, [r7, #10]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c06:	893b      	ldrh	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	80da      	strh	r2, [r3, #6]
 8003c1a:	e00b      	b.n	8003c34 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d141      	bne.n	8003d2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb2:	d131      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb4:	4b47      	ldr	r3, [pc, #284]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cba:	4a46      	ldr	r2, [pc, #280]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc4:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ccc:	4a41      	ldr	r2, [pc, #260]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd4:	4b40      	ldr	r3, [pc, #256]	@ (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2232      	movs	r2, #50	@ 0x32
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a3f      	ldr	r2, [pc, #252]	@ (8003ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cea:	e002      	b.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf2:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cfe:	d102      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f2      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d06:	4b33      	ldr	r3, [pc, #204]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d158      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e057      	b.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d18:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d28:	e04d      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d30:	d141      	bne.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d131      	bne.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d40:	4b24      	ldr	r3, [pc, #144]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d46:	4a23      	ldr	r2, [pc, #140]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d58:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2232      	movs	r2, #50	@ 0x32
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	0c9b      	lsrs	r3, r3, #18
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d76:	e002      	b.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8a:	d102      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f2      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d112      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e011      	b.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003db4:	e007      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dbe:	4a05      	ldr	r2, [pc, #20]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	431bde83 	.word	0x431bde83

08003de0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dee:	6093      	str	r3, [r2, #8]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e2fe      	b.n	8004410 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d075      	beq.n	8003f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1e:	4b97      	ldr	r3, [pc, #604]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e28:	4b94      	ldr	r3, [pc, #592]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3e>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b8d      	ldr	r3, [pc, #564]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e2d9      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x74>
 8003e66:	4b85      	ldr	r3, [pc, #532]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a84      	ldr	r2, [pc, #528]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7e      	ldr	r2, [pc, #504]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7b      	ldr	r2, [pc, #492]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	4b78      	ldr	r3, [pc, #480]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a77      	ldr	r2, [pc, #476]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b75      	ldr	r3, [pc, #468]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a74      	ldr	r2, [pc, #464]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fe58 	bl	8001b6c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fd fe54 	bl	8001b6c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e29e      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fe44 	bl	8001b6c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fe40 	bl	8001b6c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	@ 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e28a      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	4b60      	ldr	r3, [pc, #384]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d075      	beq.n	8004002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f16:	4b59      	ldr	r3, [pc, #356]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f20:	4b56      	ldr	r3, [pc, #344]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	d102      	bne.n	8003f36 <HAL_RCC_OscConfig+0x136>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_OscConfig+0x13c>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11f      	bne.n	8003f7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_OscConfig+0x154>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e25d      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b49      	ldr	r3, [pc, #292]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	4946      	ldr	r1, [pc, #280]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f68:	4b45      	ldr	r3, [pc, #276]	@ (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd fb5d 	bl	800162c <HAL_InitTick>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d043      	beq.n	8004000 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e249      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d023      	beq.n	8003fcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f84:	4b3d      	ldr	r3, [pc, #244]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd fdec 	bl	8001b6c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f98:	f7fd fde8 	bl	8001b6c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e232      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003faa:	4b34      	ldr	r3, [pc, #208]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	492d      	ldr	r1, [pc, #180]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
 8003fca:	e01a      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fdc8 	bl	8001b6c <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fd fdc4 	bl	8001b6c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e20e      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ff2:	4b22      	ldr	r3, [pc, #136]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1e0>
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d041      	beq.n	8004092 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01c      	beq.n	8004050 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004016:	4b19      	ldr	r3, [pc, #100]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401c:	4a17      	ldr	r2, [pc, #92]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd fda1 	bl	8001b6c <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fd fd9d 	bl	8001b6c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1e7      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ef      	beq.n	800402e <HAL_RCC_OscConfig+0x22e>
 800404e:	e020      	b.n	8004092 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004056:	4a09      	ldr	r2, [pc, #36]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd fd84 	bl	8001b6c <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004066:	e00d      	b.n	8004084 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004068:	f7fd fd80 	bl	8001b6c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d906      	bls.n	8004084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1ca      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004084:	4b8c      	ldr	r3, [pc, #560]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1ea      	bne.n	8004068 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80a6 	beq.w	80041ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a4:	4b84      	ldr	r3, [pc, #528]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2b4>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x2b6>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b7f      	ldr	r3, [pc, #508]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	4a7e      	ldr	r2, [pc, #504]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c6:	4b7c      	ldr	r3, [pc, #496]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	4b79      	ldr	r3, [pc, #484]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e2:	4b76      	ldr	r3, [pc, #472]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a75      	ldr	r2, [pc, #468]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fd fd3d 	bl	8001b6c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fd fd39 	bl	8001b6c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e183      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004108:	4b6c      	ldr	r3, [pc, #432]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d108      	bne.n	800412e <HAL_RCC_OscConfig+0x32e>
 800411c:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800412c:	e024      	b.n	8004178 <HAL_RCC_OscConfig+0x378>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d110      	bne.n	8004158 <HAL_RCC_OscConfig+0x358>
 8004136:	4b60      	ldr	r3, [pc, #384]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413c:	4a5e      	ldr	r2, [pc, #376]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004146:	4b5c      	ldr	r3, [pc, #368]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414c:	4a5a      	ldr	r2, [pc, #360]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004156:	e00f      	b.n	8004178 <HAL_RCC_OscConfig+0x378>
 8004158:	4b57      	ldr	r3, [pc, #348]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	4a56      	ldr	r2, [pc, #344]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004168:	4b53      	ldr	r3, [pc, #332]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416e:	4a52      	ldr	r2, [pc, #328]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d016      	beq.n	80041ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fd fcf4 	bl	8001b6c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004186:	e00a      	b.n	800419e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fcf0 	bl	8001b6c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e138      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419e:	4b46      	ldr	r3, [pc, #280]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ed      	beq.n	8004188 <HAL_RCC_OscConfig+0x388>
 80041ac:	e015      	b.n	80041da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fd fcdd 	bl	8001b6c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fd fcd9 	bl	8001b6c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e121      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041cc:	4b3a      	ldr	r3, [pc, #232]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ed      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041da:	7ffb      	ldrb	r3, [r7, #31]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e0:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e4:	4a34      	ldr	r2, [pc, #208]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03c      	beq.n	8004272 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01c      	beq.n	800423a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004200:	4b2d      	ldr	r3, [pc, #180]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004206:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fd fcac 	bl	8001b6c <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004218:	f7fd fca8 	bl	8001b6c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0f2      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800422a:	4b23      	ldr	r3, [pc, #140]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ef      	beq.n	8004218 <HAL_RCC_OscConfig+0x418>
 8004238:	e01b      	b.n	8004272 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800423a:	4b1f      	ldr	r3, [pc, #124]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800423c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004240:	4a1d      	ldr	r2, [pc, #116]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fd fc8f 	bl	8001b6c <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004252:	f7fd fc8b 	bl	8001b6c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0d5      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004264:	4b14      	ldr	r3, [pc, #80]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ef      	bne.n	8004252 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80c9 	beq.w	800440e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427c:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b0c      	cmp	r3, #12
 8004286:	f000 8083 	beq.w	8004390 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d15e      	bne.n	8004350 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd fc65 	bl	8001b6c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a4:	e00c      	b.n	80042c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fd fc61 	bl	8001b6c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d905      	bls.n	80042c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0ab      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c0:	4b55      	ldr	r3, [pc, #340]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1ec      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042cc:	4b52      	ldr	r3, [pc, #328]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	4b52      	ldr	r3, [pc, #328]	@ (800441c <HAL_RCC_OscConfig+0x61c>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6a11      	ldr	r1, [r2, #32]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042dc:	3a01      	subs	r2, #1
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042e6:	0212      	lsls	r2, r2, #8
 80042e8:	4311      	orrs	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042ee:	0852      	lsrs	r2, r2, #1
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0552      	lsls	r2, r2, #21
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0652      	lsls	r2, r2, #25
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004306:	06d2      	lsls	r2, r2, #27
 8004308:	430a      	orrs	r2, r1
 800430a:	4943      	ldr	r1, [pc, #268]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 800430c:	4313      	orrs	r3, r2
 800430e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b41      	ldr	r3, [pc, #260]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a40      	ldr	r2, [pc, #256]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800431a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431c:	4b3e      	ldr	r3, [pc, #248]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a3d      	ldr	r2, [pc, #244]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004326:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fc20 	bl	8001b6c <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd fc1c 	bl	8001b6c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e066      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	4b35      	ldr	r3, [pc, #212]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x530>
 800434e:	e05e      	b.n	800440e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b31      	ldr	r3, [pc, #196]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fd fc06 	bl	8001b6c <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fd fc02 	bl	8001b6c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e04c      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004376:	4b28      	ldr	r3, [pc, #160]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004382:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	4924      	ldr	r1, [pc, #144]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 8004388:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <HAL_RCC_OscConfig+0x620>)
 800438a:	4013      	ands	r3, r2
 800438c:	60cb      	str	r3, [r1, #12]
 800438e:	e03e      	b.n	800440e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e039      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800439c:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <HAL_RCC_OscConfig+0x618>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0203 	and.w	r2, r3, #3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d12c      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	3b01      	subs	r3, #1
 80043bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d123      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d11b      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d113      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d109      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	019f800c 	.word	0x019f800c
 8004420:	feeefffc 	.word	0xfeeefffc

08004424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e11e      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b91      	ldr	r3, [pc, #580]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d910      	bls.n	800446c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b8e      	ldr	r3, [pc, #568]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 020f 	bic.w	r2, r3, #15
 8004452:	498c      	ldr	r1, [pc, #560]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b8a      	ldr	r3, [pc, #552]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e106      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d073      	beq.n	8004560 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d129      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004480:	4b81      	ldr	r3, [pc, #516]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0f4      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004490:	f000 f9d0 	bl	8004834 <RCC_GetSysClockFreqFromPLLSource>
 8004494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4a7c      	ldr	r2, [pc, #496]	@ (800468c <HAL_RCC_ClockConfig+0x268>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d93f      	bls.n	800451e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800449e:	4b7a      	ldr	r3, [pc, #488]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d033      	beq.n	800451e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12f      	bne.n	800451e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044be:	4b72      	ldr	r3, [pc, #456]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c6:	4a70      	ldr	r2, [pc, #448]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044ce:	2380      	movs	r3, #128	@ 0x80
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e024      	b.n	800451e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d107      	bne.n	80044ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0c6      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ec:	4b66      	ldr	r3, [pc, #408]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0be      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80044fc:	f000 f8ce 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004500:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4a61      	ldr	r2, [pc, #388]	@ (800468c <HAL_RCC_ClockConfig+0x268>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d909      	bls.n	800451e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800450a:	4b5f      	ldr	r3, [pc, #380]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004512:	4a5d      	ldr	r2, [pc, #372]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004518:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b5a      	ldr	r3, [pc, #360]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4957      	ldr	r1, [pc, #348]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fd fb1c 	bl	8001b6c <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7fd fb18 	bl	8001b6c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e095      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b4e      	ldr	r3, [pc, #312]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d023      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b43      	ldr	r3, [pc, #268]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a42      	ldr	r2, [pc, #264]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800457e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004582:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004590:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004598:	4a3b      	ldr	r2, [pc, #236]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800459a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800459e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b39      	ldr	r3, [pc, #228]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4936      	ldr	r1, [pc, #216]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b80      	cmp	r3, #128	@ 0x80
 80045b8:	d105      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045ba:	4b33      	ldr	r3, [pc, #204]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4a32      	ldr	r2, [pc, #200]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d21d      	bcs.n	8004610 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 020f 	bic.w	r2, r3, #15
 80045dc:	4929      	ldr	r1, [pc, #164]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045e4:	f7fd fac2 	bl	8001b6c <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fd fabe 	bl	8001b6c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e03b      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b20      	ldr	r3, [pc, #128]	@ (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d1ed      	bne.n	80045ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800461c:	4b1a      	ldr	r3, [pc, #104]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4917      	ldr	r1, [pc, #92]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800463a:	4b13      	ldr	r3, [pc, #76]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	490f      	ldr	r1, [pc, #60]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800464e:	f000 f825 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004652:	4602      	mov	r2, r0
 8004654:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	490c      	ldr	r1, [pc, #48]	@ (8004690 <HAL_RCC_ClockConfig+0x26c>)
 8004660:	5ccb      	ldrb	r3, [r1, r3]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <HAL_RCC_ClockConfig+0x270>)
 800466c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <HAL_RCC_ClockConfig+0x274>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc ffda 	bl	800162c <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40022000 	.word	0x40022000
 8004688:	40021000 	.word	0x40021000
 800468c:	04c4b400 	.word	0x04c4b400
 8004690:	0800ca2c 	.word	0x0800ca2c
 8004694:	2000000c 	.word	0x2000000c
 8004698:	20000010 	.word	0x20000010

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d102      	bne.n	80046b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004758 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	e047      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046b4:	4b27      	ldr	r3, [pc, #156]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d102      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c0:	4b26      	ldr	r3, [pc, #152]	@ (800475c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	e03e      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046c6:	4b23      	ldr	r3, [pc, #140]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d136      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046d2:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3301      	adds	r3, #1
 80046e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d10c      	bne.n	800470a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f0:	4a1a      	ldr	r2, [pc, #104]	@ (800475c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	4a16      	ldr	r2, [pc, #88]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fa:	68d2      	ldr	r2, [r2, #12]
 80046fc:	0a12      	lsrs	r2, r2, #8
 80046fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
      break;
 8004708:	e00c      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470a:	4a13      	ldr	r2, [pc, #76]	@ (8004758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	4a10      	ldr	r2, [pc, #64]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	0a12      	lsrs	r2, r2, #8
 8004718:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
      break;
 8004722:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004724:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	0e5b      	lsrs	r3, r3, #25
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	3301      	adds	r3, #1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e001      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004744:	693b      	ldr	r3, [r7, #16]
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	00f42400 	.word	0x00f42400
 800475c:	007a1200 	.word	0x007a1200

08004760 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004764:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <HAL_RCC_GetHCLKFreq+0x14>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	2000000c 	.word	0x2000000c

08004778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800477c:	f7ff fff0 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4904      	ldr	r1, [pc, #16]	@ (80047a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	0800ca3c 	.word	0x0800ca3c

080047a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047a8:	f7ff ffda 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0adb      	lsrs	r3, r3, #11
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4904      	ldr	r1, [pc, #16]	@ (80047cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	0800ca3c 	.word	0x0800ca3c

080047d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	220f      	movs	r2, #15
 80047de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047e0:	4b12      	ldr	r3, [pc, #72]	@ (800482c <HAL_RCC_GetClockConfig+0x5c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0203 	and.w	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <HAL_RCC_GetClockConfig+0x5c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047f8:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <HAL_RCC_GetClockConfig+0x5c>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004804:	4b09      	ldr	r3, [pc, #36]	@ (800482c <HAL_RCC_GetClockConfig+0x5c>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	08db      	lsrs	r3, r3, #3
 800480a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004812:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <HAL_RCC_GetClockConfig+0x60>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	601a      	str	r2, [r3, #0]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000
 8004830:	40022000 	.word	0x40022000

08004834 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800483a:	4b1e      	ldr	r3, [pc, #120]	@ (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004844:	4b1b      	ldr	r3, [pc, #108]	@ (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d10c      	bne.n	8004872 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004858:	4a17      	ldr	r2, [pc, #92]	@ (80048b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004862:	68d2      	ldr	r2, [r2, #12]
 8004864:	0a12      	lsrs	r2, r2, #8
 8004866:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	617b      	str	r3, [r7, #20]
    break;
 8004870:	e00c      	b.n	800488c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004872:	4a12      	ldr	r2, [pc, #72]	@ (80048bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	4a0e      	ldr	r2, [pc, #56]	@ (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	0a12      	lsrs	r2, r2, #8
 8004880:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
    break;
 800488a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0e5b      	lsrs	r3, r3, #25
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	3301      	adds	r3, #1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048a6:	687b      	ldr	r3, [r7, #4]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40021000 	.word	0x40021000
 80048b8:	007a1200 	.word	0x007a1200
 80048bc:	00f42400 	.word	0x00f42400

080048c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048c8:	2300      	movs	r3, #0
 80048ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048cc:	2300      	movs	r3, #0
 80048ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8098 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e2:	4b43      	ldr	r3, [pc, #268]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10d      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	4b40      	ldr	r3, [pc, #256]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	4a3f      	ldr	r2, [pc, #252]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048fa:	4b3d      	ldr	r3, [pc, #244]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004906:	2301      	movs	r3, #1
 8004908:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490a:	4b3a      	ldr	r3, [pc, #232]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a39      	ldr	r2, [pc, #228]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004916:	f7fd f929 	bl	8001b6c <HAL_GetTick>
 800491a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800491c:	e009      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fd f925 	bl	8001b6c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d902      	bls.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	74fb      	strb	r3, [r7, #19]
        break;
 8004930:	e005      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004932:	4b30      	ldr	r3, [pc, #192]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ef      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d159      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004944:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01e      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	429a      	cmp	r2, r3
 800495e:	d019      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004960:	4b23      	ldr	r3, [pc, #140]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800496c:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	4a1f      	ldr	r2, [pc, #124]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800497c:	4b1c      	ldr	r3, [pc, #112]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800498c:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d016      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499e:	f7fd f8e5 	bl	8001b6c <HAL_GetTick>
 80049a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a4:	e00b      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a6:	f7fd f8e1 	bl	8001b6c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d902      	bls.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	74fb      	strb	r3, [r7, #19]
            break;
 80049bc:	e006      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049be:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0ec      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d2:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	4903      	ldr	r1, [pc, #12]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049e8:	e008      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	74bb      	strb	r3, [r7, #18]
 80049ee:	e005      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fc:	7c7b      	ldrb	r3, [r7, #17]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d105      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a02:	4ba6      	ldr	r3, [pc, #664]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a06:	4aa5      	ldr	r2, [pc, #660]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a1a:	4ba0      	ldr	r3, [pc, #640]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a20:	f023 0203 	bic.w	r2, r3, #3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	499c      	ldr	r1, [pc, #624]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a3c:	4b97      	ldr	r3, [pc, #604]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a42:	f023 020c 	bic.w	r2, r3, #12
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	4994      	ldr	r1, [pc, #592]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5e:	4b8f      	ldr	r3, [pc, #572]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	498b      	ldr	r1, [pc, #556]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a80:	4b86      	ldr	r3, [pc, #536]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	4983      	ldr	r1, [pc, #524]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aa2:	4b7e      	ldr	r3, [pc, #504]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	497a      	ldr	r1, [pc, #488]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac4:	4b75      	ldr	r3, [pc, #468]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	4972      	ldr	r1, [pc, #456]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	4969      	ldr	r1, [pc, #420]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b08:	4b64      	ldr	r3, [pc, #400]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4961      	ldr	r1, [pc, #388]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	4958      	ldr	r1, [pc, #352]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d015      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b4c:	4b53      	ldr	r3, [pc, #332]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5a:	4950      	ldr	r1, [pc, #320]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a4a      	ldr	r2, [pc, #296]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b76:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b84:	4b45      	ldr	r3, [pc, #276]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	4942      	ldr	r1, [pc, #264]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d015      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bbc:	4b37      	ldr	r3, [pc, #220]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	4934      	ldr	r1, [pc, #208]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf4:	4b29      	ldr	r3, [pc, #164]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c02:	4926      	ldr	r1, [pc, #152]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c12:	d105      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c14:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4a20      	ldr	r2, [pc, #128]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	4918      	ldr	r1, [pc, #96]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4c:	4b13      	ldr	r3, [pc, #76]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d015      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c64:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c72:	490a      	ldr	r1, [pc, #40]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a04      	ldr	r2, [pc, #16]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c90:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e049      	b.n	8004d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f841 	bl	8004d4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f000 fa22 	bl	8005128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d001      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e04a      	b.n	8004e12 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a21      	ldr	r2, [pc, #132]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d018      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da6:	d013      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1d      	ldr	r2, [pc, #116]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xc0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a19      	ldr	r2, [pc, #100]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d115      	bne.n	8004dfc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	4b17      	ldr	r3, [pc, #92]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d015      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0xaa>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de8:	d011      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	e008      	b.n	8004e0e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e000      	b.n	8004e10 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	00010007 	.word	0x00010007

08004e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d020      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0202 	mvn.w	r2, #2
 8004e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f931 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f923 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f934 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d020      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01b      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0204 	mvn.w	r2, #4
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f90b 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f8fd 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f90e 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d020      	beq.n	8004f34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0208 	mvn.w	r2, #8
 8004f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f8e5 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8d7 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8e8 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0210 	mvn.w	r2, #16
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2208      	movs	r2, #8
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8bf 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8b1 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8c2 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00c      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0201 	mvn.w	r2, #1
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc fb08 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00c      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f951 	bl	8005274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00c      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f949 	bl	8005288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00c      	beq.n	800501a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f87c 	bl	8005112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00c      	beq.n	800503e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f06f 0220 	mvn.w	r2, #32
 8005036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f911 	bl	8005260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00c      	beq.n	8005062 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d007      	beq.n	8005062 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800505a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f91d 	bl	800529c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f915 	bl	80052b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80050a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f90d 	bl	80052c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f905 	bl	80052d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a42      	ldr	r2, [pc, #264]	@ (8005244 <TIM_Base_SetConfig+0x11c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00f      	beq.n	8005160 <TIM_Base_SetConfig+0x38>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005146:	d00b      	beq.n	8005160 <TIM_Base_SetConfig+0x38>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a3f      	ldr	r2, [pc, #252]	@ (8005248 <TIM_Base_SetConfig+0x120>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_Base_SetConfig+0x38>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a3e      	ldr	r2, [pc, #248]	@ (800524c <TIM_Base_SetConfig+0x124>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_Base_SetConfig+0x38>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3d      	ldr	r2, [pc, #244]	@ (8005250 <TIM_Base_SetConfig+0x128>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d108      	bne.n	8005172 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a33      	ldr	r2, [pc, #204]	@ (8005244 <TIM_Base_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01b      	beq.n	80051b2 <TIM_Base_SetConfig+0x8a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005180:	d017      	beq.n	80051b2 <TIM_Base_SetConfig+0x8a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a30      	ldr	r2, [pc, #192]	@ (8005248 <TIM_Base_SetConfig+0x120>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <TIM_Base_SetConfig+0x8a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2f      	ldr	r2, [pc, #188]	@ (800524c <TIM_Base_SetConfig+0x124>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_Base_SetConfig+0x8a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2e      	ldr	r2, [pc, #184]	@ (8005250 <TIM_Base_SetConfig+0x128>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_Base_SetConfig+0x8a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2d      	ldr	r2, [pc, #180]	@ (8005254 <TIM_Base_SetConfig+0x12c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_Base_SetConfig+0x8a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005258 <TIM_Base_SetConfig+0x130>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_Base_SetConfig+0x8a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2b      	ldr	r2, [pc, #172]	@ (800525c <TIM_Base_SetConfig+0x134>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d108      	bne.n	80051c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a16      	ldr	r2, [pc, #88]	@ (8005244 <TIM_Base_SetConfig+0x11c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0xe8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a17      	ldr	r2, [pc, #92]	@ (8005250 <TIM_Base_SetConfig+0x128>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0xe8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a16      	ldr	r2, [pc, #88]	@ (8005254 <TIM_Base_SetConfig+0x12c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0xe8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <TIM_Base_SetConfig+0x130>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0xe8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a14      	ldr	r2, [pc, #80]	@ (800525c <TIM_Base_SetConfig+0x134>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d103      	bne.n	8005218 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f023 0201 	bic.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]
  }
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40013400 	.word	0x40013400
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e042      	b.n	8005384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fc fb11 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2224      	movs	r2, #36	@ 0x24
 800531a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 ffc0 	bl	80062bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fcf1 	bl	8005d24 <UART_SetConfig>
 8005342:	4603      	mov	r3, r0
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e01b      	b.n	8005384 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800535a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800536a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 f83f 	bl	8006400 <UART_CheckIdleState>
 8005382:	4603      	mov	r3, r0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e061      	b.n	8005464 <HAL_LIN_Init+0xd8>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	d101      	bne.n	80053ae <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e05a      	b.n	8005464 <HAL_LIN_Init+0xd8>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e054      	b.n	8005464 <HAL_LIN_Init+0xd8>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <HAL_LIN_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fc fab3 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2224      	movs	r2, #36	@ 0x24
 80053d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0201 	bic.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <HAL_LIN_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 ff62 	bl	80062bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fc93 	bl	8005d24 <UART_SetConfig>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_LIN_Init+0x7c>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e02d      	b.n	8005464 <HAL_LIN_Init+0xd8>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005426:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005436:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f023 0120 	bic.w	r1, r3, #32
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 ffcf 	bl	8006400 <UART_CheckIdleState>
 8005462:	4603      	mov	r3, r0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	@ 0x28
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005482:	2b20      	cmp	r3, #32
 8005484:	d17b      	bne.n	800557e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_UART_Transmit+0x26>
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e074      	b.n	8005580 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2221      	movs	r2, #33	@ 0x21
 80054a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a6:	f7fc fb61 	bl	8001b6c <HAL_GetTick>
 80054aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c4:	d108      	bne.n	80054d8 <HAL_UART_Transmit+0x6c>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	e003      	b.n	80054e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054e0:	e030      	b.n	8005544 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	@ 0x80
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f001 f831 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e03d      	b.n	8005580 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	3302      	adds	r3, #2
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e007      	b.n	8005532 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3301      	adds	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1c8      	bne.n	80054e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	2140      	movs	r1, #64	@ 0x40
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fffa 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e006      	b.n	8005580 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e000      	b.n	8005580 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
  }
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	@ 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	4613      	mov	r3, r2
 8005594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800559c:	2b20      	cmp	r3, #32
 800559e:	d137      	bne.n	8005610 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Receive_IT+0x24>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e030      	b.n	8005612 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_UART_Receive_IT+0x94>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01f      	beq.n	8005600 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d018      	beq.n	8005600 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	613b      	str	r3, [r7, #16]
   return(result);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	623b      	str	r3, [r7, #32]
 80055ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e6      	bne.n	80055ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	461a      	mov	r2, r3
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f001 f812 	bl	8006630 <UART_Start_Receive_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	e000      	b.n	8005612 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3728      	adds	r7, #40	@ 0x28
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40008000 	.word	0x40008000

08005620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b0ba      	sub	sp, #232	@ 0xe8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800564a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800564e:	4013      	ands	r3, r2
 8005650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11b      	bne.n	8005694 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800565c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d015      	beq.n	8005694 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8300 	beq.w	8005c8a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
      }
      return;
 8005692:	e2fa      	b.n	8005c8a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8123 	beq.w	80058e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800569e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80056a2:	4b8d      	ldr	r3, [pc, #564]	@ (80058d8 <HAL_UART_IRQHandler+0x2b8>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80056ae:	4b8b      	ldr	r3, [pc, #556]	@ (80058dc <HAL_UART_IRQHandler+0x2bc>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 8116 	beq.w	80058e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d011      	beq.n	80056e8 <HAL_UART_IRQHandler+0xc8>
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2201      	movs	r2, #1
 80056d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056de:	f043 0201 	orr.w	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d011      	beq.n	8005718 <HAL_UART_IRQHandler+0xf8>
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2202      	movs	r2, #2
 8005706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	f043 0204 	orr.w	r2, r3, #4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d011      	beq.n	8005748 <HAL_UART_IRQHandler+0x128>
 8005724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2204      	movs	r2, #4
 8005736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573e:	f043 0202 	orr.w	r2, r3, #2
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d017      	beq.n	8005784 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005760:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005764:	4b5c      	ldr	r3, [pc, #368]	@ (80058d8 <HAL_UART_IRQHandler+0x2b8>)
 8005766:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2208      	movs	r2, #8
 8005772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577a:	f043 0208 	orr.w	r2, r3, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800578c:	2b00      	cmp	r3, #0
 800578e:	d012      	beq.n	80057b6 <HAL_UART_IRQHandler+0x196>
 8005790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005794:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8266 	beq.w	8005c8e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d013      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580a:	2b40      	cmp	r3, #64	@ 0x40
 800580c:	d005      	beq.n	800581a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800580e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005812:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005816:	2b00      	cmp	r3, #0
 8005818:	d054      	beq.n	80058c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 f82a 	bl	8006874 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	d146      	bne.n	80058bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800584c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3308      	adds	r3, #8
 8005856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800585a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800585e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1d9      	bne.n	800582e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	d017      	beq.n	80058b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800588a:	4a15      	ldr	r2, [pc, #84]	@ (80058e0 <HAL_UART_IRQHandler+0x2c0>)
 800588c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005894:	4618      	mov	r0, r3
 8005896:	f7fc faae 	bl	8001df6 <HAL_DMA_Abort_IT>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d019      	beq.n	80058d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80058ae:	4610      	mov	r0, r2
 80058b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b2:	e00f      	b.n	80058d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fb fe73 	bl	80015a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ba:	e00b      	b.n	80058d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fb fe6f 	bl	80015a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c2:	e007      	b.n	80058d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fb fe6b 	bl	80015a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80058d2:	e1dc      	b.n	8005c8e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	bf00      	nop
    return;
 80058d6:	e1da      	b.n	8005c8e <HAL_UART_IRQHandler+0x66e>
 80058d8:	10000001 	.word	0x10000001
 80058dc:	04000120 	.word	0x04000120
 80058e0:	08006941 	.word	0x08006941

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	f040 8170 	bne.w	8005bce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8169 	beq.w	8005bce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8162 	beq.w	8005bce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2210      	movs	r2, #16
 8005910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b40      	cmp	r3, #64	@ 0x40
 800591e:	f040 80d8 	bne.w	8005ad2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80af 	beq.w	8005a98 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005944:	429a      	cmp	r2, r3
 8005946:	f080 80a7 	bcs.w	8005a98 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005950:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 8087 	bne.w	8005a76 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800597c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005984:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005992:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005996:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800599e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1da      	bne.n	8005968 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e1      	bne.n	80059b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e3      	bne.n	80059ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a44:	f023 0310 	bic.w	r3, r3, #16
 8005a48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e4      	bne.n	8005a34 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fc f967 	bl	8001d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f911 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a96:	e0fc      	b.n	8005c92 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	f040 80f5 	bne.w	8005c92 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	f040 80eb 	bne.w	8005c92 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8f4 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
      return;
 8005ad0:	e0df      	b.n	8005c92 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80d1 	beq.w	8005c96 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80cc 	beq.w	8005c96 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e4      	bne.n	8005afe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	623b      	str	r3, [r7, #32]
   return(result);
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e1      	bne.n	8005b34 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	69b9      	ldr	r1, [r7, #24]
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e4      	bne.n	8005b84 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f876 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bcc:	e063      	b.n	8005c96 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x5d8>
 8005bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 fc07 	bl	8007404 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bf6:	e051      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d014      	beq.n	8005c2e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d03a      	beq.n	8005c9a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
    }
    return;
 8005c2c:	e035      	b.n	8005c9a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <HAL_UART_IRQHandler+0x62e>
 8005c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fe90 	bl	800696c <UART_EndTransmit_IT>
    return;
 8005c4c:	e026      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_UART_IRQHandler+0x64e>
 8005c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fbe0 	bl	800742c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c6c:	e016      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d010      	beq.n	8005c9c <HAL_UART_IRQHandler+0x67c>
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da0c      	bge.n	8005c9c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f001 fbc8 	bl	8007418 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c88:	e008      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
      return;
 8005c8a:	bf00      	nop
 8005c8c:	e006      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
    return;
 8005c8e:	bf00      	nop
 8005c90:	e004      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
      return;
 8005c92:	bf00      	nop
 8005c94:	e002      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
      return;
 8005c96:	bf00      	nop
 8005c98:	e000      	b.n	8005c9c <HAL_UART_IRQHandler+0x67c>
    return;
 8005c9a:	bf00      	nop
  }
}
 8005c9c:	37e8      	adds	r7, #232	@ 0xe8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop

08005ca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_LIN_SendBreak+0x16>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e018      	b.n	8005d18 <HAL_LIN_SendBreak+0x48>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2224      	movs	r2, #36	@ 0x24
 8005cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699a      	ldr	r2, [r3, #24]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0202 	orr.w	r2, r2, #2
 8005d04:	619a      	str	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d28:	b08c      	sub	sp, #48	@ 0x30
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4bab      	ldr	r3, [pc, #684]	@ (8006000 <UART_SetConfig+0x2dc>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4aa0      	ldr	r2, [pc, #640]	@ (8006004 <UART_SetConfig+0x2e0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d9a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	f023 010f 	bic.w	r1, r3, #15
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a91      	ldr	r2, [pc, #580]	@ (8006008 <UART_SetConfig+0x2e4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d125      	bne.n	8005e14 <UART_SetConfig+0xf0>
 8005dc8:	4b90      	ldr	r3, [pc, #576]	@ (800600c <UART_SetConfig+0x2e8>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d81a      	bhi.n	8005e0c <UART_SetConfig+0xe8>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0xb8>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df2:	e0d6      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005df4:	2302      	movs	r3, #2
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	e0d2      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e0ce      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e0ca      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e12:	e0c6      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a7d      	ldr	r2, [pc, #500]	@ (8006010 <UART_SetConfig+0x2ec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d138      	bne.n	8005e90 <UART_SetConfig+0x16c>
 8005e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800600c <UART_SetConfig+0x2e8>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e24:	f003 030c 	and.w	r3, r3, #12
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d82d      	bhi.n	8005e88 <UART_SetConfig+0x164>
 8005e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <UART_SetConfig+0x110>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005e69 	.word	0x08005e69
 8005e38:	08005e89 	.word	0x08005e89
 8005e3c:	08005e89 	.word	0x08005e89
 8005e40:	08005e89 	.word	0x08005e89
 8005e44:	08005e79 	.word	0x08005e79
 8005e48:	08005e89 	.word	0x08005e89
 8005e4c:	08005e89 	.word	0x08005e89
 8005e50:	08005e89 	.word	0x08005e89
 8005e54:	08005e71 	.word	0x08005e71
 8005e58:	08005e89 	.word	0x08005e89
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	08005e89 	.word	0x08005e89
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6e:	e098      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e70:	2302      	movs	r3, #2
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e094      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e090      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e80:	2308      	movs	r3, #8
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e08c      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	e088      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a5f      	ldr	r2, [pc, #380]	@ (8006014 <UART_SetConfig+0x2f0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d125      	bne.n	8005ee6 <UART_SetConfig+0x1c2>
 8005e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800600c <UART_SetConfig+0x2e8>)
 8005e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ea4:	2b30      	cmp	r3, #48	@ 0x30
 8005ea6:	d016      	beq.n	8005ed6 <UART_SetConfig+0x1b2>
 8005ea8:	2b30      	cmp	r3, #48	@ 0x30
 8005eaa:	d818      	bhi.n	8005ede <UART_SetConfig+0x1ba>
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d00a      	beq.n	8005ec6 <UART_SetConfig+0x1a2>
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d814      	bhi.n	8005ede <UART_SetConfig+0x1ba>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <UART_SetConfig+0x19a>
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d008      	beq.n	8005ece <UART_SetConfig+0x1aa>
 8005ebc:	e00f      	b.n	8005ede <UART_SetConfig+0x1ba>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec4:	e06d      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ecc:	e069      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed4:	e065      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005edc:	e061      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005ede:	2310      	movs	r3, #16
 8005ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee4:	e05d      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a4b      	ldr	r2, [pc, #300]	@ (8006018 <UART_SetConfig+0x2f4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d125      	bne.n	8005f3c <UART_SetConfig+0x218>
 8005ef0:	4b46      	ldr	r3, [pc, #280]	@ (800600c <UART_SetConfig+0x2e8>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005efc:	d016      	beq.n	8005f2c <UART_SetConfig+0x208>
 8005efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f00:	d818      	bhi.n	8005f34 <UART_SetConfig+0x210>
 8005f02:	2b80      	cmp	r3, #128	@ 0x80
 8005f04:	d00a      	beq.n	8005f1c <UART_SetConfig+0x1f8>
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d814      	bhi.n	8005f34 <UART_SetConfig+0x210>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <UART_SetConfig+0x1f0>
 8005f0e:	2b40      	cmp	r3, #64	@ 0x40
 8005f10:	d008      	beq.n	8005f24 <UART_SetConfig+0x200>
 8005f12:	e00f      	b.n	8005f34 <UART_SetConfig+0x210>
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1a:	e042      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f22:	e03e      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2a:	e03a      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f32:	e036      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3a:	e032      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a30      	ldr	r2, [pc, #192]	@ (8006004 <UART_SetConfig+0x2e0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d12a      	bne.n	8005f9c <UART_SetConfig+0x278>
 8005f46:	4b31      	ldr	r3, [pc, #196]	@ (800600c <UART_SetConfig+0x2e8>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f54:	d01a      	beq.n	8005f8c <UART_SetConfig+0x268>
 8005f56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f5a:	d81b      	bhi.n	8005f94 <UART_SetConfig+0x270>
 8005f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f60:	d00c      	beq.n	8005f7c <UART_SetConfig+0x258>
 8005f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f66:	d815      	bhi.n	8005f94 <UART_SetConfig+0x270>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <UART_SetConfig+0x250>
 8005f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f70:	d008      	beq.n	8005f84 <UART_SetConfig+0x260>
 8005f72:	e00f      	b.n	8005f94 <UART_SetConfig+0x270>
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7a:	e012      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e00e      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f84:	2304      	movs	r3, #4
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e00a      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f92:	e006      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f94:	2310      	movs	r3, #16
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	e002      	b.n	8005fa2 <UART_SetConfig+0x27e>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <UART_SetConfig+0x2e0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	f040 80a8 	bne.w	80060fe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d834      	bhi.n	8006020 <UART_SetConfig+0x2fc>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <UART_SetConfig+0x298>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08006021 	.word	0x08006021
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08006021 	.word	0x08006021
 8005fcc:	08005fef 	.word	0x08005fef
 8005fd0:	08006021 	.word	0x08006021
 8005fd4:	08006021 	.word	0x08006021
 8005fd8:	08006021 	.word	0x08006021
 8005fdc:	08005ff7 	.word	0x08005ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe0:	f7fe fbca 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8005fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fe6:	e021      	b.n	800602c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <UART_SetConfig+0x2f8>)
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fec:	e01e      	b.n	800602c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fee:	f7fe fb55 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8005ff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ff4:	e01a      	b.n	800602c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ffc:	e016      	b.n	800602c <UART_SetConfig+0x308>
 8005ffe:	bf00      	nop
 8006000:	cfff69f3 	.word	0xcfff69f3
 8006004:	40008000 	.word	0x40008000
 8006008:	40013800 	.word	0x40013800
 800600c:	40021000 	.word	0x40021000
 8006010:	40004400 	.word	0x40004400
 8006014:	40004800 	.word	0x40004800
 8006018:	40004c00 	.word	0x40004c00
 800601c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800602a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 812a 	beq.w	8006288 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	4a9e      	ldr	r2, [pc, #632]	@ (80062b4 <UART_SetConfig+0x590>)
 800603a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800603e:	461a      	mov	r2, r3
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	fbb3 f3f2 	udiv	r3, r3, r2
 8006046:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	429a      	cmp	r2, r3
 8006056:	d305      	bcc.n	8006064 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	429a      	cmp	r2, r3
 8006062:	d903      	bls.n	800606c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800606a:	e10d      	b.n	8006288 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	2200      	movs	r2, #0
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	60fa      	str	r2, [r7, #12]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	4a8e      	ldr	r2, [pc, #568]	@ (80062b4 <UART_SetConfig+0x590>)
 800607a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607e:	b29b      	uxth	r3, r3
 8006080:	2200      	movs	r2, #0
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800608e:	f7fa f8c3 	bl	8000218 <__aeabi_uldivmod>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4610      	mov	r0, r2
 8006098:	4619      	mov	r1, r3
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	020b      	lsls	r3, r1, #8
 80060a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060a8:	0202      	lsls	r2, r0, #8
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	6849      	ldr	r1, [r1, #4]
 80060ae:	0849      	lsrs	r1, r1, #1
 80060b0:	2000      	movs	r0, #0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4605      	mov	r5, r0
 80060b6:	eb12 0804 	adds.w	r8, r2, r4
 80060ba:	eb43 0905 	adc.w	r9, r3, r5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	469a      	mov	sl, r3
 80060c6:	4693      	mov	fp, r2
 80060c8:	4652      	mov	r2, sl
 80060ca:	465b      	mov	r3, fp
 80060cc:	4640      	mov	r0, r8
 80060ce:	4649      	mov	r1, r9
 80060d0:	f7fa f8a2 	bl	8000218 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4613      	mov	r3, r2
 80060da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e2:	d308      	bcc.n	80060f6 <UART_SetConfig+0x3d2>
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ea:	d204      	bcs.n	80060f6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e0c8      	b.n	8006288 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060fc:	e0c4      	b.n	8006288 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006106:	d167      	bne.n	80061d8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006108:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800610c:	2b08      	cmp	r3, #8
 800610e:	d828      	bhi.n	8006162 <UART_SetConfig+0x43e>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x3f4>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006145 	.word	0x08006145
 8006120:	0800614d 	.word	0x0800614d
 8006124:	08006163 	.word	0x08006163
 8006128:	08006153 	.word	0x08006153
 800612c:	08006163 	.word	0x08006163
 8006130:	08006163 	.word	0x08006163
 8006134:	08006163 	.word	0x08006163
 8006138:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fe fb1c 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8006140:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006142:	e014      	b.n	800616e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006144:	f7fe fb2e 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800614a:	e010      	b.n	800616e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b5a      	ldr	r3, [pc, #360]	@ (80062b8 <UART_SetConfig+0x594>)
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006150:	e00d      	b.n	800616e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7fe faa3 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8006156:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006158:	e009      	b.n	800616e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006160:	e005      	b.n	800616e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800616c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8089 	beq.w	8006288 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	4a4e      	ldr	r2, [pc, #312]	@ (80062b4 <UART_SetConfig+0x590>)
 800617c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006180:	461a      	mov	r2, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	fbb3 f3f2 	udiv	r3, r3, r2
 8006188:	005a      	lsls	r2, r3, #1
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	441a      	add	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	fbb2 f3f3 	udiv	r3, r2, r3
 800619a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2b0f      	cmp	r3, #15
 80061a0:	d916      	bls.n	80061d0 <UART_SetConfig+0x4ac>
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a8:	d212      	bcs.n	80061d0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f023 030f 	bic.w	r3, r3, #15
 80061b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	b29a      	uxth	r2, r3
 80061c0:	8bfb      	ldrh	r3, [r7, #30]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	8bfa      	ldrh	r2, [r7, #30]
 80061cc:	60da      	str	r2, [r3, #12]
 80061ce:	e05b      	b.n	8006288 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061d6:	e057      	b.n	8006288 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d828      	bhi.n	8006232 <UART_SetConfig+0x50e>
 80061e0:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <UART_SetConfig+0x4c4>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	08006233 	.word	0x08006233
 80061f8:	08006223 	.word	0x08006223
 80061fc:	08006233 	.word	0x08006233
 8006200:	08006233 	.word	0x08006233
 8006204:	08006233 	.word	0x08006233
 8006208:	0800622b 	.word	0x0800622b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800620c:	f7fe fab4 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8006210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006212:	e014      	b.n	800623e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006214:	f7fe fac6 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8006218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800621a:	e010      	b.n	800623e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800621c:	4b26      	ldr	r3, [pc, #152]	@ (80062b8 <UART_SetConfig+0x594>)
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006220:	e00d      	b.n	800623e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006222:	f7fe fa3b 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8006226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006228:	e009      	b.n	800623e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006230:	e005      	b.n	800623e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800623c:	bf00      	nop
    }

    if (pclk != 0U)
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d021      	beq.n	8006288 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	4a1a      	ldr	r2, [pc, #104]	@ (80062b4 <UART_SetConfig+0x590>)
 800624a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800624e:	461a      	mov	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	fbb3 f2f2 	udiv	r2, r3, r2
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	441a      	add	r2, r3
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b0f      	cmp	r3, #15
 800626c:	d909      	bls.n	8006282 <UART_SetConfig+0x55e>
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006274:	d205      	bcs.n	8006282 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	b29a      	uxth	r2, r3
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60da      	str	r2, [r3, #12]
 8006280:	e002      	b.n	8006288 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2201      	movs	r2, #1
 800628c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2201      	movs	r2, #1
 8006294:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80062a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3730      	adds	r7, #48	@ 0x30
 80062ac:	46bd      	mov	sp, r7
 80062ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b2:	bf00      	nop
 80062b4:	0800ca44 	.word	0x0800ca44
 80062b8:	00f42400 	.word	0x00f42400

080062bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01a      	beq.n	80063d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ba:	d10a      	bne.n	80063d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b098      	sub	sp, #96	@ 0x60
 8006404:	af02      	add	r7, sp, #8
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006410:	f7fb fbac 	bl	8001b6c <HAL_GetTick>
 8006414:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b08      	cmp	r3, #8
 8006422:	d12f      	bne.n	8006484 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006424:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800642c:	2200      	movs	r2, #0
 800642e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f88e 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d022      	beq.n	8006484 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800644c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006452:	653b      	str	r3, [r7, #80]	@ 0x50
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800645c:	647b      	str	r3, [r7, #68]	@ 0x44
 800645e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800646a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e6      	bne.n	800643e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e063      	b.n	800654c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b04      	cmp	r3, #4
 8006490:	d149      	bne.n	8006526 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006492:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649a:	2200      	movs	r2, #0
 800649c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f857 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d03c      	beq.n	8006526 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	623b      	str	r3, [r7, #32]
   return(result);
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80064cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e6      	bne.n	80064ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064fe:	61fa      	str	r2, [r7, #28]
 8006500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	69b9      	ldr	r1, [r7, #24]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	617b      	str	r3, [r7, #20]
   return(result);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e5      	bne.n	80064de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e012      	b.n	800654c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3758      	adds	r7, #88	@ 0x58
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006564:	e04f      	b.n	8006606 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d04b      	beq.n	8006606 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656e:	f7fb fafd 	bl	8001b6c <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	429a      	cmp	r2, r3
 800657c:	d302      	bcc.n	8006584 <UART_WaitOnFlagUntilTimeout+0x30>
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e04e      	b.n	8006626 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d037      	beq.n	8006606 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b80      	cmp	r3, #128	@ 0x80
 800659a:	d034      	beq.n	8006606 <UART_WaitOnFlagUntilTimeout+0xb2>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d031      	beq.n	8006606 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d110      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2208      	movs	r2, #8
 80065b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f95b 	bl	8006874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2208      	movs	r2, #8
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e029      	b.n	8006626 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e0:	d111      	bne.n	8006606 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 f941 	bl	8006874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e00f      	b.n	8006626 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4013      	ands	r3, r2
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	429a      	cmp	r2, r3
 8006614:	bf0c      	ite	eq
 8006616:	2301      	moveq	r3, #1
 8006618:	2300      	movne	r3, #0
 800661a:	b2db      	uxtb	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	429a      	cmp	r2, r3
 8006622:	d0a0      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006630:	b480      	push	{r7}
 8006632:	b0a3      	sub	sp, #140	@ 0x8c
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	88fa      	ldrh	r2, [r7, #6]
 8006648:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	88fa      	ldrh	r2, [r7, #6]
 8006650:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006662:	d10e      	bne.n	8006682 <UART_Start_Receive_IT+0x52>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <UART_Start_Receive_IT+0x48>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006672:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006676:	e02d      	b.n	80066d4 <UART_Start_Receive_IT+0xa4>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	22ff      	movs	r2, #255	@ 0xff
 800667c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006680:	e028      	b.n	80066d4 <UART_Start_Receive_IT+0xa4>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10d      	bne.n	80066a6 <UART_Start_Receive_IT+0x76>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <UART_Start_Receive_IT+0x6c>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	22ff      	movs	r2, #255	@ 0xff
 8006696:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800669a:	e01b      	b.n	80066d4 <UART_Start_Receive_IT+0xa4>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	227f      	movs	r2, #127	@ 0x7f
 80066a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066a4:	e016      	b.n	80066d4 <UART_Start_Receive_IT+0xa4>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ae:	d10d      	bne.n	80066cc <UART_Start_Receive_IT+0x9c>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <UART_Start_Receive_IT+0x92>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	227f      	movs	r2, #127	@ 0x7f
 80066bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066c0:	e008      	b.n	80066d4 <UART_Start_Receive_IT+0xa4>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	223f      	movs	r2, #63	@ 0x3f
 80066c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066ca:	e003      	b.n	80066d4 <UART_Start_Receive_IT+0xa4>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2222      	movs	r2, #34	@ 0x22
 80066e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80066f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006708:	673a      	str	r2, [r7, #112]	@ 0x70
 800670a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800670e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e3      	bne.n	80066e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006724:	d14f      	bne.n	80067c6 <UART_Start_Receive_IT+0x196>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	429a      	cmp	r2, r3
 8006730:	d349      	bcc.n	80067c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673a:	d107      	bne.n	800674c <UART_Start_Receive_IT+0x11c>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a47      	ldr	r2, [pc, #284]	@ (8006864 <UART_Start_Receive_IT+0x234>)
 8006748:	675a      	str	r2, [r3, #116]	@ 0x74
 800674a:	e002      	b.n	8006752 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a46      	ldr	r2, [pc, #280]	@ (8006868 <UART_Start_Receive_IT+0x238>)
 8006750:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01a      	beq.n	8006790 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800676a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800676e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800677c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800677e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006782:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800678a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e4      	bne.n	800675a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3308      	adds	r3, #8
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80067b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80067b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80067be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <UART_Start_Receive_IT+0x160>
 80067c4:	e046      	b.n	8006854 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ce:	d107      	bne.n	80067e0 <UART_Start_Receive_IT+0x1b0>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a24      	ldr	r2, [pc, #144]	@ (800686c <UART_Start_Receive_IT+0x23c>)
 80067dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80067de:	e002      	b.n	80067e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a23      	ldr	r2, [pc, #140]	@ (8006870 <UART_Start_Receive_IT+0x240>)
 80067e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d019      	beq.n	8006822 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006802:	677b      	str	r3, [r7, #116]	@ 0x74
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
 800680e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006812:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800681a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_Start_Receive_IT+0x1be>
 8006820:	e018      	b.n	8006854 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	613b      	str	r3, [r7, #16]
   return(result);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f043 0320 	orr.w	r3, r3, #32
 8006836:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	69f9      	ldr	r1, [r7, #28]
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	61bb      	str	r3, [r7, #24]
   return(result);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	378c      	adds	r7, #140	@ 0x8c
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	08007099 	.word	0x08007099
 8006868:	08006d35 	.word	0x08006d35
 800686c:	08006b7d 	.word	0x08006b7d
 8006870:	080069c5 	.word	0x080069c5

08006874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b095      	sub	sp, #84	@ 0x54
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689a:	643b      	str	r3, [r7, #64]	@ 0x40
 800689c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e6      	bne.n	800687c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e3      	bne.n	80068ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d118      	bne.n	8006920 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f023 0310 	bic.w	r3, r3, #16
 8006902:	647b      	str	r3, [r7, #68]	@ 0x44
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6979      	ldr	r1, [r7, #20]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	613b      	str	r3, [r7, #16]
   return(result);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e6      	bne.n	80068ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006934:	bf00      	nop
 8006936:	3754      	adds	r7, #84	@ 0x54
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7fa fe1e 	bl	80015a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	60bb      	str	r3, [r7, #8]
   return(result);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e6      	bne.n	8006974 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff f975 	bl	8005ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ba:	bf00      	nop
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b09c      	sub	sp, #112	@ 0x70
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80069d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069dc:	2b22      	cmp	r3, #34	@ 0x22
 80069de:	f040 80be 	bne.w	8006b5e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80069f0:	b2d9      	uxtb	r1, r3
 80069f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fc:	400a      	ands	r2, r1
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 80a1 	bne.w	8006b6e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e6      	bne.n	8006a2c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a33      	ldr	r2, [pc, #204]	@ (8006b78 <UART_RxISR_8BIT+0x1b4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d01f      	beq.n	8006af0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d018      	beq.n	8006af0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	623b      	str	r3, [r7, #32]
   return(result);
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ad2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e6      	bne.n	8006abe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d12e      	bne.n	8006b56 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0310 	bic.w	r3, r3, #16
 8006b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b1c:	61fb      	str	r3, [r7, #28]
 8006b1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	69b9      	ldr	r1, [r7, #24]
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	617b      	str	r3, [r7, #20]
   return(result);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b10      	cmp	r3, #16
 8006b3c:	d103      	bne.n	8006b46 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff f8b2 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b54:	e00b      	b.n	8006b6e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fa fcf2 	bl	8001540 <HAL_UART_RxCpltCallback>
}
 8006b5c:	e007      	b.n	8006b6e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0208 	orr.w	r2, r2, #8
 8006b6c:	619a      	str	r2, [r3, #24]
}
 8006b6e:	bf00      	nop
 8006b70:	3770      	adds	r7, #112	@ 0x70
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	40008000 	.word	0x40008000

08006b7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b09c      	sub	sp, #112	@ 0x70
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b94:	2b22      	cmp	r3, #34	@ 0x22
 8006b96:	f040 80be 	bne.w	8006d16 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006baa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006bae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bbe:	1c9a      	adds	r2, r3, #2
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f040 80a1 	bne.w	8006d26 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c36:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a33      	ldr	r2, [pc, #204]	@ (8006d30 <UART_RxISR_16BIT+0x1b4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d01f      	beq.n	8006ca8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d018      	beq.n	8006ca8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c96:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e6      	bne.n	8006c76 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d12e      	bne.n	8006d0e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0310 	bic.w	r3, r3, #16
 8006cca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d103      	bne.n	8006cfe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fe ffd6 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d0c:	e00b      	b.n	8006d26 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fa fc16 	bl	8001540 <HAL_UART_RxCpltCallback>
}
 8006d14:	e007      	b.n	8006d26 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	699a      	ldr	r2, [r3, #24]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0208 	orr.w	r2, r2, #8
 8006d24:	619a      	str	r2, [r3, #24]
}
 8006d26:	bf00      	nop
 8006d28:	3770      	adds	r7, #112	@ 0x70
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40008000 	.word	0x40008000

08006d34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b0ac      	sub	sp, #176	@ 0xb0
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d42:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d6a:	2b22      	cmp	r3, #34	@ 0x22
 8006d6c:	f040 8183 	bne.w	8007076 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d76:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d7a:	e126      	b.n	8006fca <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d86:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006d8a:	b2d9      	uxtb	r1, r3
 8006d8c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d96:	400a      	ands	r2, r1
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d053      	beq.n	8006e76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d011      	beq.n	8006dfe <UART_RxISR_8BIT_FIFOEN+0xca>
 8006dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2201      	movs	r2, #1
 8006dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df4:	f043 0201 	orr.w	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d011      	beq.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e24:	f043 0204 	orr.w	r2, r3, #4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e54:	f043 0202 	orr.w	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d006      	beq.n	8006e76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fa fb99 	bl	80015a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f040 80a3 	bne.w	8006fca <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ea8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006eac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e4      	bne.n	8006e84 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ed0:	f023 0301 	bic.w	r3, r3, #1
 8006ed4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3308      	adds	r3, #8
 8006ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ee2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006ee4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006ee8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ef0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e1      	bne.n	8006eba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a60      	ldr	r2, [pc, #384]	@ (8007090 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d021      	beq.n	8006f58 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01a      	beq.n	8006f58 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f44:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f46:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e4      	bne.n	8006f22 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d130      	bne.n	8006fc2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	f023 0310 	bic.w	r3, r3, #16
 8006f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e4      	bne.n	8006f66 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b10      	cmp	r3, #16
 8006fa8:	d103      	bne.n	8006fb2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2210      	movs	r2, #16
 8006fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fe fe7c 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006fc0:	e00e      	b.n	8006fe0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fa fabc 	bl	8001540 <HAL_UART_RxCpltCallback>
        break;
 8006fc8:	e00a      	b.n	8006fe0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d006      	beq.n	8006fe0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f47f aece 	bne.w	8006d7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fe6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006fea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d049      	beq.n	8007086 <UART_RxISR_8BIT_FIFOEN+0x352>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ff8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d242      	bcs.n	8007086 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3308      	adds	r3, #8
 8007020:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800702a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e3      	bne.n	8007000 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800703c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	60bb      	str	r3, [r7, #8]
   return(result);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f043 0320 	orr.w	r3, r3, #32
 8007052:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e4      	bne.n	800703e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007074:	e007      	b.n	8007086 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0208 	orr.w	r2, r2, #8
 8007084:	619a      	str	r2, [r3, #24]
}
 8007086:	bf00      	nop
 8007088:	37b0      	adds	r7, #176	@ 0xb0
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40008000 	.word	0x40008000
 8007094:	080069c5 	.word	0x080069c5

08007098 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b0ae      	sub	sp, #184	@ 0xb8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80070a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ce:	2b22      	cmp	r3, #34	@ 0x22
 80070d0:	f040 8187 	bne.w	80073e2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070da:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070de:	e12a      	b.n	8007336 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80070f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80070f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80070fa:	4013      	ands	r3, r2
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007108:	1c9a      	adds	r2, r3, #2
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800712a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	2b00      	cmp	r3, #0
 8007134:	d053      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d011      	beq.n	8007166 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2201      	movs	r2, #1
 8007154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715c:	f043 0201 	orr.w	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d011      	beq.n	8007196 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2202      	movs	r2, #2
 8007184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718c:	f043 0204 	orr.w	r2, r3, #4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d011      	beq.n	80071c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80071a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2204      	movs	r2, #4
 80071b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071bc:	f043 0202 	orr.w	r2, r3, #2
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fa f9e5 	bl	80015a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 80a5 	bne.w	8007336 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800720e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007212:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007216:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e2      	bne.n	80071ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800724e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007254:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800725c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e1      	bne.n	8007226 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a60      	ldr	r2, [pc, #384]	@ (80073fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d021      	beq.n	80072c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d01a      	beq.n	80072c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800729c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800729e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80072b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e4      	bne.n	800728e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d130      	bne.n	800732e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	f023 0310 	bic.w	r3, r3, #16
 80072e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80072f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e4      	bne.n	80072d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 0310 	and.w	r3, r3, #16
 8007312:	2b10      	cmp	r3, #16
 8007314:	d103      	bne.n	800731e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2210      	movs	r2, #16
 800731c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fe fcc6 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800732c:	e00e      	b.n	800734c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fa f906 	bl	8001540 <HAL_UART_RxCpltCallback>
        break;
 8007334:	e00a      	b.n	800734c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007336:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800733a:	2b00      	cmp	r3, #0
 800733c:	d006      	beq.n	800734c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800733e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	f47f aeca 	bne.w	80070e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007352:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007356:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800735a:	2b00      	cmp	r3, #0
 800735c:	d049      	beq.n	80073f2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007364:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007368:	429a      	cmp	r2, r3
 800736a:	d242      	bcs.n	80073f2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	623b      	str	r3, [r7, #32]
   return(result);
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007390:	633a      	str	r2, [r7, #48]	@ 0x30
 8007392:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800739e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e3      	bne.n	800736c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a16      	ldr	r2, [pc, #88]	@ (8007400 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80073a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f043 0320 	orr.w	r3, r3, #32
 80073be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073cc:	61fb      	str	r3, [r7, #28]
 80073ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	69b9      	ldr	r1, [r7, #24]
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	617b      	str	r3, [r7, #20]
   return(result);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e4      	bne.n	80073aa <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073e0:	e007      	b.n	80073f2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	699a      	ldr	r2, [r3, #24]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0208 	orr.w	r2, r2, #8
 80073f0:	619a      	str	r2, [r3, #24]
}
 80073f2:	bf00      	nop
 80073f4:	37b8      	adds	r7, #184	@ 0xb8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40008000 	.word	0x40008000
 8007400:	08006b7d 	.word	0x08006b7d

08007404 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_UARTEx_DisableFifoMode+0x16>
 8007452:	2302      	movs	r3, #2
 8007454:	e027      	b.n	80074a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2224      	movs	r2, #36	@ 0x24
 8007462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007484:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e02d      	b.n	8007526 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2224      	movs	r2, #36	@ 0x24
 80074d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f850 	bl	80075ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007542:	2302      	movs	r3, #2
 8007544:	e02d      	b.n	80075a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2224      	movs	r2, #36	@ 0x24
 8007552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0201 	bic.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f812 	bl	80075ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075cc:	e031      	b.n	8007632 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ce:	2308      	movs	r3, #8
 80075d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075d2:	2308      	movs	r3, #8
 80075d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	0e5b      	lsrs	r3, r3, #25
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	0f5b      	lsrs	r3, r3, #29
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	7b3a      	ldrb	r2, [r7, #12]
 80075fa:	4911      	ldr	r1, [pc, #68]	@ (8007640 <UARTEx_SetNbDataToProcess+0x94>)
 80075fc:	5c8a      	ldrb	r2, [r1, r2]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007602:	7b3a      	ldrb	r2, [r7, #12]
 8007604:	490f      	ldr	r1, [pc, #60]	@ (8007644 <UARTEx_SetNbDataToProcess+0x98>)
 8007606:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007608:	fb93 f3f2 	sdiv	r3, r3, r2
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	7b7a      	ldrb	r2, [r7, #13]
 8007618:	4909      	ldr	r1, [pc, #36]	@ (8007640 <UARTEx_SetNbDataToProcess+0x94>)
 800761a:	5c8a      	ldrb	r2, [r1, r2]
 800761c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007620:	7b7a      	ldrb	r2, [r7, #13]
 8007622:	4908      	ldr	r1, [pc, #32]	@ (8007644 <UARTEx_SetNbDataToProcess+0x98>)
 8007624:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007626:	fb93 f3f2 	sdiv	r3, r3, r2
 800762a:	b29a      	uxth	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	0800ca5c 	.word	0x0800ca5c
 8007644:	0800ca64 	.word	0x0800ca64

08007648 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007658:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800765c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	b29a      	uxth	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800767e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007682:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	b29b      	uxth	r3, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	b29b      	uxth	r3, r3
 8007694:	4013      	ands	r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b09d      	sub	sp, #116	@ 0x74
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800770a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d81f      	bhi.n	800775a <USB_ActivateEndpoint+0x72>
 800771a:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <USB_ActivateEndpoint+0x38>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007731 	.word	0x08007731
 8007724:	0800774d 	.word	0x0800774d
 8007728:	08007763 	.word	0x08007763
 800772c:	0800773f 	.word	0x0800773f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007730:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007734:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007738:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800773c:	e012      	b.n	8007764 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800773e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007742:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007746:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800774a:	e00b      	b.n	8007764 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800774c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007750:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007754:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007758:	e004      	b.n	8007764 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007760:	e000      	b.n	8007764 <USB_ActivateEndpoint+0x7c>
      break;
 8007762:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	441a      	add	r2, r3
 800776e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800777a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800777e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007782:	b29b      	uxth	r3, r3
 8007784:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	b21b      	sxth	r3, r3
 8007796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800779a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779e:	b21a      	sxth	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b21b      	sxth	r3, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b21b      	sxth	r3, r3
 80077aa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	441a      	add	r2, r3
 80077b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80077bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	7b1b      	ldrb	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 8178 	bne.w	8007aca <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8084 	beq.w	80078ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	61bb      	str	r3, [r7, #24]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	4413      	add	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00da      	lsls	r2, r3, #3
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	827b      	strh	r3, [r7, #18]
 8007826:	8a7b      	ldrh	r3, [r7, #18]
 8007828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01b      	beq.n	8007868 <USB_ActivateEndpoint+0x180>
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007846:	823b      	strh	r3, [r7, #16]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	441a      	add	r2, r3
 8007852:	8a3b      	ldrh	r3, [r7, #16]
 8007854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800785c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007860:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007864:	b29b      	uxth	r3, r3
 8007866:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	78db      	ldrb	r3, [r3, #3]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d020      	beq.n	80078b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007886:	81bb      	strh	r3, [r7, #12]
 8007888:	89bb      	ldrh	r3, [r7, #12]
 800788a:	f083 0320 	eor.w	r3, r3, #32
 800788e:	81bb      	strh	r3, [r7, #12]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	89bb      	ldrh	r3, [r7, #12]
 800789c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	8013      	strh	r3, [r2, #0]
 80078b0:	e2d5      	b.n	8007e5e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c8:	81fb      	strh	r3, [r7, #14]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	89fb      	ldrh	r3, [r7, #14]
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]
 80078ea:	e2b8      	b.n	8007e5e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	4413      	add	r3, r2
 80078fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	00da      	lsls	r2, r3, #3
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	4413      	add	r3, r2
 800790a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800790e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	4413      	add	r3, r2
 8007932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	00da      	lsls	r2, r3, #3
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	4413      	add	r3, r2
 800793e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007942:	627b      	str	r3, [r7, #36]	@ 0x24
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800794e:	b29a      	uxth	r2, r3
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <USB_ActivateEndpoint+0x28a>
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796a:	b29a      	uxth	r2, r3
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	e039      	b.n	80079e6 <USB_ActivateEndpoint+0x2fe>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b3e      	cmp	r3, #62	@ 0x3e
 8007978:	d818      	bhi.n	80079ac <USB_ActivateEndpoint+0x2c4>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USB_ActivateEndpoint+0x2ac>
 800798e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007990:	3301      	adds	r3, #1
 8007992:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29a      	uxth	r2, r3
 800799a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800799c:	b29b      	uxth	r3, r3
 800799e:	029b      	lsls	r3, r3, #10
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e01c      	b.n	80079e6 <USB_ActivateEndpoint+0x2fe>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <USB_ActivateEndpoint+0x2de>
 80079c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079c2:	3b01      	subs	r3, #1
 80079c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	029b      	lsls	r3, r3, #10
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4313      	orrs	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80079f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80079f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d01b      	beq.n	8007a36 <USB_ActivateEndpoint+0x34e>
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a14:	843b      	strh	r3, [r7, #32]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	441a      	add	r2, r3
 8007a20:	8c3b      	ldrh	r3, [r7, #32]
 8007a22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d124      	bne.n	8007a88 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a54:	83bb      	strh	r3, [r7, #28]
 8007a56:	8bbb      	ldrh	r3, [r7, #28]
 8007a58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a5c:	83bb      	strh	r3, [r7, #28]
 8007a5e:	8bbb      	ldrh	r3, [r7, #28]
 8007a60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a64:	83bb      	strh	r3, [r7, #28]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	441a      	add	r2, r3
 8007a70:	8bbb      	ldrh	r3, [r7, #28]
 8007a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	8013      	strh	r3, [r2, #0]
 8007a86:	e1ea      	b.n	8007e5e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a9e:	83fb      	strh	r3, [r7, #30]
 8007aa0:	8bfb      	ldrh	r3, [r7, #30]
 8007aa2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007aa6:	83fb      	strh	r3, [r7, #30]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	8bfb      	ldrh	r3, [r7, #30]
 8007ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	8013      	strh	r3, [r2, #0]
 8007ac8:	e1c9      	b.n	8007e5e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	78db      	ldrb	r3, [r3, #3]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d11e      	bne.n	8007b10 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	8013      	strh	r3, [r2, #0]
 8007b0e:	e01d      	b.n	8007b4c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b26:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	441a      	add	r2, r3
 8007b34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b5c:	4413      	add	r3, r2
 8007b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	00da      	lsls	r2, r3, #3
 8007b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	891b      	ldrh	r3, [r3, #8]
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b90:	4413      	add	r3, r2
 8007b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	00da      	lsls	r2, r3, #3
 8007b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	895b      	ldrh	r3, [r3, #10]
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	785b      	ldrb	r3, [r3, #1]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f040 8093 	bne.w	8007ce4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007bce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01b      	beq.n	8007c12 <USB_ActivateEndpoint+0x52a>
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bf0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	441a      	add	r2, r3
 8007bfc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007c20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01b      	beq.n	8007c62 <USB_ActivateEndpoint+0x57a>
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c40:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c78:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c7a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c80:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c82:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c88:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	441a      	add	r2, r3
 8007ccc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	8013      	strh	r3, [r2, #0]
 8007ce2:	e0bc      	b.n	8007e5e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007cf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01d      	beq.n	8007d3c <USB_ActivateEndpoint+0x654>
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d16:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	441a      	add	r2, r3
 8007d24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007d28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007d4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01d      	beq.n	8007d94 <USB_ActivateEndpoint+0x6ac>
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d6e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	441a      	add	r2, r3
 8007d7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	78db      	ldrb	r3, [r3, #3]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d024      	beq.n	8007de6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007db2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007db6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007dba:	f083 0320 	eor.w	r3, r3, #32
 8007dbe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	441a      	add	r2, r3
 8007dcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	8013      	strh	r3, [r2, #0]
 8007de4:	e01d      	b.n	8007e22 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	441a      	add	r2, r3
 8007e0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	441a      	add	r2, r3
 8007e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3774      	adds	r7, #116	@ 0x74
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop

08007e70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b08d      	sub	sp, #52	@ 0x34
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	7b1b      	ldrb	r3, [r3, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f040 808e 	bne.w	8007fa0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d044      	beq.n	8007f16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	81bb      	strh	r3, [r7, #12]
 8007e9a:	89bb      	ldrh	r3, [r7, #12]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01b      	beq.n	8007edc <USB_DeactivateEndpoint+0x6c>
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eba:	817b      	strh	r3, [r7, #10]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	441a      	add	r2, r3
 8007ec6:	897b      	ldrh	r3, [r7, #10]
 8007ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ed4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ef2:	813b      	strh	r3, [r7, #8]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	441a      	add	r2, r3
 8007efe:	893b      	ldrh	r3, [r7, #8]
 8007f00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	8013      	strh	r3, [r2, #0]
 8007f14:	e192      	b.n	800823c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	827b      	strh	r3, [r7, #18]
 8007f24:	8a7b      	ldrh	r3, [r7, #18]
 8007f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d01b      	beq.n	8007f66 <USB_DeactivateEndpoint+0xf6>
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f44:	823b      	strh	r3, [r7, #16]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	441a      	add	r2, r3
 8007f50:	8a3b      	ldrh	r3, [r7, #16]
 8007f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f7c:	81fb      	strh	r3, [r7, #14]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	441a      	add	r2, r3
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	8013      	strh	r3, [r2, #0]
 8007f9e:	e14d      	b.n	800823c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f040 80a5 	bne.w	80080f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	843b      	strh	r3, [r7, #32]
 8007fb8:	8c3b      	ldrh	r3, [r7, #32]
 8007fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d01b      	beq.n	8007ffa <USB_DeactivateEndpoint+0x18a>
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd8:	83fb      	strh	r3, [r7, #30]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	441a      	add	r2, r3
 8007fe4:	8bfb      	ldrh	r3, [r7, #30]
 8007fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	83bb      	strh	r3, [r7, #28]
 8008008:	8bbb      	ldrh	r3, [r7, #28]
 800800a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01b      	beq.n	800804a <USB_DeactivateEndpoint+0x1da>
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008028:	837b      	strh	r3, [r7, #26]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	441a      	add	r2, r3
 8008034:	8b7b      	ldrh	r3, [r7, #26]
 8008036:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800803a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800803e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008042:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008046:	b29b      	uxth	r3, r3
 8008048:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800805c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008060:	833b      	strh	r3, [r7, #24]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	441a      	add	r2, r3
 800806c:	8b3b      	ldrh	r3, [r7, #24]
 800806e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800807a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800807e:	b29b      	uxth	r3, r3
 8008080:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008098:	82fb      	strh	r3, [r7, #22]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	441a      	add	r2, r3
 80080a4:	8afb      	ldrh	r3, [r7, #22]
 80080a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080d0:	82bb      	strh	r3, [r7, #20]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	441a      	add	r2, r3
 80080dc:	8abb      	ldrh	r3, [r7, #20]
 80080de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	8013      	strh	r3, [r2, #0]
 80080f2:	e0a3      	b.n	800823c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008102:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01b      	beq.n	8008144 <USB_DeactivateEndpoint+0x2d4>
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800811e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008122:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	441a      	add	r2, r3
 800812e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008138:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800813c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008140:	b29b      	uxth	r3, r3
 8008142:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008152:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01b      	beq.n	8008194 <USB_DeactivateEndpoint+0x324>
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	441a      	add	r2, r3
 800817e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800818c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008190:	b29b      	uxth	r3, r3
 8008192:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	441a      	add	r2, r3
 80081b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	441a      	add	r2, r3
 80081ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008200:	b29b      	uxth	r3, r3
 8008202:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800821a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	441a      	add	r2, r3
 8008226:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800822c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008238:	b29b      	uxth	r3, r3
 800823a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3734      	adds	r7, #52	@ 0x34
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b0c2      	sub	sp, #264	@ 0x108
 800824e:	af00      	add	r7, sp, #0
 8008250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008258:	6018      	str	r0, [r3, #0]
 800825a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008262:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b01      	cmp	r3, #1
 8008272:	f040 86b7 	bne.w	8008fe4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	429a      	cmp	r2, r3
 8008290:	d908      	bls.n	80082a4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80082a2:	e007      	b.n	80082b4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80082a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80082b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	7b1b      	ldrb	r3, [r3, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d13a      	bne.n	800833a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80082c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	88da      	ldrh	r2, [r3, #6]
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80082e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80082ea:	6800      	ldr	r0, [r0, #0]
 80082ec:	f001 fc99 	bl	8009c22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	613b      	str	r3, [r7, #16]
 80082fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800830a:	b29b      	uxth	r3, r3
 800830c:	461a      	mov	r2, r3
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	4413      	add	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
 8008314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	00da      	lsls	r2, r3, #3
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4413      	add	r3, r2
 8008326:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	f000 be1f 	b.w	8008f78 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800833a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	78db      	ldrb	r3, [r3, #3]
 8008346:	2b02      	cmp	r3, #2
 8008348:	f040 8462 	bne.w	8008c10 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800834c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	429a      	cmp	r2, r3
 8008366:	f240 83df 	bls.w	8008b28 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800836a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800838c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008390:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	441a      	add	r2, r3
 80083ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80083b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80083be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80083c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6a1a      	ldr	r2, [r3, #32]
 80083d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 81c7 	beq.w	800879a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800840c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008410:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	633b      	str	r3, [r7, #48]	@ 0x30
 8008418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	785b      	ldrb	r3, [r3, #1]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d177      	bne.n	8008518 <USB_EPStartXfer+0x2ce>
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008442:	b29b      	uxth	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008448:	4413      	add	r3, r2
 800844a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	00da      	lsls	r2, r3, #3
 800845a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845c:	4413      	add	r3, r2
 800845e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008462:	627b      	str	r3, [r7, #36]	@ 0x24
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800846e:	b29a      	uxth	r2, r3
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <USB_EPStartXfer+0x248>
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800848a:	b29a      	uxth	r2, r3
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	801a      	strh	r2, [r3, #0]
 8008490:	e067      	b.n	8008562 <USB_EPStartXfer+0x318>
 8008492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008496:	2b3e      	cmp	r3, #62	@ 0x3e
 8008498:	d81c      	bhi.n	80084d4 <USB_EPStartXfer+0x28a>
 800849a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <USB_EPStartXfer+0x270>
 80084b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80084b4:	3301      	adds	r3, #1
 80084b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29a      	uxth	r2, r3
 80084c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	029b      	lsls	r3, r3, #10
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	4313      	orrs	r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	e046      	b.n	8008562 <USB_EPStartXfer+0x318>
 80084d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e2:	f003 031f 	and.w	r3, r3, #31
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <USB_EPStartXfer+0x2aa>
 80084ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80084ee:	3b01      	subs	r3, #1
 80084f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80084fe:	b29b      	uxth	r3, r3
 8008500:	029b      	lsls	r3, r3, #10
 8008502:	b29b      	uxth	r3, r3
 8008504:	4313      	orrs	r3, r2
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008510:	b29a      	uxth	r2, r3
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	e024      	b.n	8008562 <USB_EPStartXfer+0x318>
 8008518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	785b      	ldrb	r3, [r3, #1]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d11c      	bne.n	8008562 <USB_EPStartXfer+0x318>
 8008528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008536:	b29b      	uxth	r3, r3
 8008538:	461a      	mov	r2, r3
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	4413      	add	r3, r2
 800853e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	00da      	lsls	r2, r3, #3
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	4413      	add	r3, r2
 8008552:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855c:	b29a      	uxth	r2, r3
 800855e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008560:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	895b      	ldrh	r3, [r3, #10]
 800856e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6959      	ldr	r1, [r3, #20]
 800857e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008582:	b29b      	uxth	r3, r3
 8008584:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008588:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800858c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008590:	6800      	ldr	r0, [r0, #0]
 8008592:	f001 fb46 	bl	8009c22 <USB_WritePMA>
            ep->xfer_buff += len;
 8008596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695a      	ldr	r2, [r3, #20]
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a6:	441a      	add	r2, r3
 80085a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6a1a      	ldr	r2, [r3, #32]
 80085c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d90f      	bls.n	80085f0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80085d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e0:	1ad2      	subs	r2, r2, r3
 80085e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	621a      	str	r2, [r3, #32]
 80085ee:	e00e      	b.n	800860e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80085f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800860e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d177      	bne.n	800870e <USB_EPStartXfer+0x4c4>
 800861e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008638:	b29b      	uxth	r3, r3
 800863a:	461a      	mov	r2, r3
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	4413      	add	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	00da      	lsls	r2, r3, #3
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	4413      	add	r3, r2
 8008654:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008664:	b29a      	uxth	r2, r3
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	801a      	strh	r2, [r3, #0]
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <USB_EPStartXfer+0x43e>
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008680:	b29a      	uxth	r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	801a      	strh	r2, [r3, #0]
 8008686:	e06d      	b.n	8008764 <USB_EPStartXfer+0x51a>
 8008688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868c:	2b3e      	cmp	r3, #62	@ 0x3e
 800868e:	d81c      	bhi.n	80086ca <USB_EPStartXfer+0x480>
 8008690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008694:	085b      	lsrs	r3, r3, #1
 8008696:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <USB_EPStartXfer+0x466>
 80086a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086aa:	3301      	adds	r3, #1
 80086ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	e04c      	b.n	8008764 <USB_EPStartXfer+0x51a>
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d8:	f003 031f 	and.w	r3, r3, #31
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USB_EPStartXfer+0x4a0>
 80086e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e4:	3b01      	subs	r3, #1
 80086e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	029b      	lsls	r3, r3, #10
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4313      	orrs	r3, r2
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008706:	b29a      	uxth	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	801a      	strh	r2, [r3, #0]
 800870c:	e02a      	b.n	8008764 <USB_EPStartXfer+0x51a>
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d122      	bne.n	8008764 <USB_EPStartXfer+0x51a>
 800871e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	623b      	str	r3, [r7, #32]
 800872a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008738:	b29b      	uxth	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	4413      	add	r3, r2
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	00da      	lsls	r2, r3, #3
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	4413      	add	r3, r2
 8008754:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008758:	61fb      	str	r3, [r7, #28]
 800875a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800875e:	b29a      	uxth	r2, r3
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	891b      	ldrh	r3, [r3, #8]
 8008770:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6959      	ldr	r1, [r3, #20]
 8008780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008784:	b29b      	uxth	r3, r3
 8008786:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800878a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800878e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008792:	6800      	ldr	r0, [r0, #0]
 8008794:	f001 fa45 	bl	8009c22 <USB_WritePMA>
 8008798:	e3ee      	b.n	8008f78 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800879a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d177      	bne.n	800889a <USB_EPStartXfer+0x650>
 80087aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087ca:	4413      	add	r3, r2
 80087cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	00da      	lsls	r2, r3, #3
 80087dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087de:	4413      	add	r3, r2
 80087e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80087e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087f4:	801a      	strh	r2, [r3, #0]
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <USB_EPStartXfer+0x5ca>
 80087fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800880c:	b29a      	uxth	r2, r3
 800880e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008810:	801a      	strh	r2, [r3, #0]
 8008812:	e06d      	b.n	80088f0 <USB_EPStartXfer+0x6a6>
 8008814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008818:	2b3e      	cmp	r3, #62	@ 0x3e
 800881a:	d81c      	bhi.n	8008856 <USB_EPStartXfer+0x60c>
 800881c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d004      	beq.n	800883c <USB_EPStartXfer+0x5f2>
 8008832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008836:	3301      	adds	r3, #1
 8008838:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800883c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	b29a      	uxth	r2, r3
 8008842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008846:	b29b      	uxth	r3, r3
 8008848:	029b      	lsls	r3, r3, #10
 800884a:	b29b      	uxth	r3, r3
 800884c:	4313      	orrs	r3, r2
 800884e:	b29a      	uxth	r2, r3
 8008850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008852:	801a      	strh	r2, [r3, #0]
 8008854:	e04c      	b.n	80088f0 <USB_EPStartXfer+0x6a6>
 8008856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800885a:	095b      	lsrs	r3, r3, #5
 800885c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008864:	f003 031f 	and.w	r3, r3, #31
 8008868:	2b00      	cmp	r3, #0
 800886a:	d104      	bne.n	8008876 <USB_EPStartXfer+0x62c>
 800886c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008870:	3b01      	subs	r3, #1
 8008872:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29a      	uxth	r2, r3
 800887c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008880:	b29b      	uxth	r3, r3
 8008882:	029b      	lsls	r3, r3, #10
 8008884:	b29b      	uxth	r3, r3
 8008886:	4313      	orrs	r3, r2
 8008888:	b29b      	uxth	r3, r3
 800888a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008892:	b29a      	uxth	r2, r3
 8008894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e02a      	b.n	80088f0 <USB_EPStartXfer+0x6a6>
 800889a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d122      	bne.n	80088f0 <USB_EPStartXfer+0x6a6>
 80088aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80088b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	461a      	mov	r2, r3
 80088c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ca:	4413      	add	r3, r2
 80088cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80088ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	00da      	lsls	r2, r3, #3
 80088dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088de:	4413      	add	r3, r2
 80088e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	891b      	ldrh	r3, [r3, #8]
 80088fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6959      	ldr	r1, [r3, #20]
 800890c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008910:	b29b      	uxth	r3, r3
 8008912:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008916:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800891a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800891e:	6800      	ldr	r0, [r0, #0]
 8008920:	f001 f97f 	bl	8009c22 <USB_WritePMA>
            ep->xfer_buff += len;
 8008924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	695a      	ldr	r2, [r3, #20]
 8008930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008934:	441a      	add	r2, r3
 8008936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6a1a      	ldr	r2, [r3, #32]
 800894e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	429a      	cmp	r2, r3
 800895c:	d90f      	bls.n	800897e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800895e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6a1a      	ldr	r2, [r3, #32]
 800896a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	621a      	str	r2, [r3, #32]
 800897c:	e00e      	b.n	800899c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800897e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800898e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2200      	movs	r2, #0
 800899a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800899c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80089a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d177      	bne.n	8008aa8 <USB_EPStartXfer+0x85e>
 80089b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	461a      	mov	r2, r3
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	4413      	add	r3, r2
 80089da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	00da      	lsls	r2, r3, #3
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	4413      	add	r3, r2
 80089ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a02:	801a      	strh	r2, [r3, #0]
 8008a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <USB_EPStartXfer+0x7d8>
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	e067      	b.n	8008af2 <USB_EPStartXfer+0x8a8>
 8008a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a26:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a28:	d81c      	bhi.n	8008a64 <USB_EPStartXfer+0x81a>
 8008a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2e:	085b      	lsrs	r3, r3, #1
 8008a30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <USB_EPStartXfer+0x800>
 8008a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a44:	3301      	adds	r3, #1
 8008a46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	029b      	lsls	r3, r3, #10
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	e046      	b.n	8008af2 <USB_EPStartXfer+0x8a8>
 8008a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <USB_EPStartXfer+0x83a>
 8008a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	029b      	lsls	r3, r3, #10
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	4313      	orrs	r3, r2
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa4:	801a      	strh	r2, [r3, #0]
 8008aa6:	e024      	b.n	8008af2 <USB_EPStartXfer+0x8a8>
 8008aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d11c      	bne.n	8008af2 <USB_EPStartXfer+0x8a8>
 8008ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008acc:	4413      	add	r3, r2
 8008ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	00da      	lsls	r2, r3, #3
 8008ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	895b      	ldrh	r3, [r3, #10]
 8008afe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6959      	ldr	r1, [r3, #20]
 8008b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b18:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b1c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b20:	6800      	ldr	r0, [r0, #0]
 8008b22:	f001 f87e 	bl	8009c22 <USB_WritePMA>
 8008b26:	e227      	b.n	8008f78 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	441a      	add	r2, r3
 8008b7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb4:	4413      	add	r3, r2
 8008bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	00da      	lsls	r2, r3, #3
 8008bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bc8:	4413      	add	r3, r2
 8008bca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008bce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	891b      	ldrh	r3, [r3, #8]
 8008be6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6959      	ldr	r1, [r3, #20]
 8008bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c08:	6800      	ldr	r0, [r0, #0]
 8008c0a:	f001 f80a 	bl	8009c22 <USB_WritePMA>
 8008c0e:	e1b3      	b.n	8008f78 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6a1a      	ldr	r2, [r3, #32]
 8008c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c20:	1ad2      	subs	r2, r2, r3
 8008c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80c6 	beq.w	8008de2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d177      	bne.n	8008d62 <USB_EPStartXfer+0xb18>
 8008c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c92:	4413      	add	r3, r2
 8008c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	00da      	lsls	r2, r3, #3
 8008ca4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cbc:	801a      	strh	r2, [r3, #0]
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10a      	bne.n	8008cdc <USB_EPStartXfer+0xa92>
 8008cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cd8:	801a      	strh	r2, [r3, #0]
 8008cda:	e067      	b.n	8008dac <USB_EPStartXfer+0xb62>
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ce2:	d81c      	bhi.n	8008d1e <USB_EPStartXfer+0xad4>
 8008ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <USB_EPStartXfer+0xaba>
 8008cfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008cfe:	3301      	adds	r3, #1
 8008d00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	029b      	lsls	r3, r3, #10
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4313      	orrs	r3, r2
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d1a:	801a      	strh	r2, [r3, #0]
 8008d1c:	e046      	b.n	8008dac <USB_EPStartXfer+0xb62>
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d22:	095b      	lsrs	r3, r3, #5
 8008d24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <USB_EPStartXfer+0xaf4>
 8008d34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	029b      	lsls	r3, r3, #10
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d5e:	801a      	strh	r2, [r3, #0]
 8008d60:	e024      	b.n	8008dac <USB_EPStartXfer+0xb62>
 8008d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d11c      	bne.n	8008dac <USB_EPStartXfer+0xb62>
 8008d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d86:	4413      	add	r3, r2
 8008d88:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	00da      	lsls	r2, r3, #3
 8008d98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008daa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	895b      	ldrh	r3, [r3, #10]
 8008db8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6959      	ldr	r1, [r3, #20]
 8008dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008dd2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008dd6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	f000 ff21 	bl	8009c22 <USB_WritePMA>
 8008de0:	e0ca      	b.n	8008f78 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	785b      	ldrb	r3, [r3, #1]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d177      	bne.n	8008ee2 <USB_EPStartXfer+0xc98>
 8008df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e12:	4413      	add	r3, r2
 8008e14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	00da      	lsls	r2, r3, #3
 8008e24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e26:	4413      	add	r3, r2
 8008e28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <USB_EPStartXfer+0xc12>
 8008e46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	e073      	b.n	8008f44 <USB_EPStartXfer+0xcfa>
 8008e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e62:	d81c      	bhi.n	8008e9e <USB_EPStartXfer+0xc54>
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d004      	beq.n	8008e84 <USB_EPStartXfer+0xc3a>
 8008e7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	029b      	lsls	r3, r3, #10
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e9a:	801a      	strh	r2, [r3, #0]
 8008e9c:	e052      	b.n	8008f44 <USB_EPStartXfer+0xcfa>
 8008e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eac:	f003 031f 	and.w	r3, r3, #31
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d104      	bne.n	8008ebe <USB_EPStartXfer+0xc74>
 8008eb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	029b      	lsls	r3, r3, #10
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ede:	801a      	strh	r2, [r3, #0]
 8008ee0:	e030      	b.n	8008f44 <USB_EPStartXfer+0xcfa>
 8008ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d128      	bne.n	8008f44 <USB_EPStartXfer+0xcfa>
 8008ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f16:	4413      	add	r3, r2
 8008f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	00da      	lsls	r2, r3, #3
 8008f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	891b      	ldrh	r3, [r3, #8]
 8008f50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6959      	ldr	r1, [r3, #20]
 8008f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f6a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f6e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f72:	6800      	ldr	r0, [r0, #0]
 8008f74:	f000 fe55 	bl	8009c22 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f9e:	817b      	strh	r3, [r7, #10]
 8008fa0:	897b      	ldrh	r3, [r7, #10]
 8008fa2:	f083 0310 	eor.w	r3, r3, #16
 8008fa6:	817b      	strh	r3, [r7, #10]
 8008fa8:	897b      	ldrh	r3, [r7, #10]
 8008faa:	f083 0320 	eor.w	r3, r3, #32
 8008fae:	817b      	strh	r3, [r7, #10]
 8008fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	441a      	add	r2, r3
 8008fca:	897b      	ldrh	r3, [r7, #10]
 8008fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	8013      	strh	r3, [r2, #0]
 8008fe0:	f000 bcdf 	b.w	80099a2 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	7b1b      	ldrb	r3, [r3, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f040 80bc 	bne.w	800916e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699a      	ldr	r2, [r3, #24]
 8009002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	429a      	cmp	r2, r3
 8009010:	d917      	bls.n	8009042 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	699a      	ldr	r2, [r3, #24]
 800902e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009032:	1ad2      	subs	r2, r2, r3
 8009034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	619a      	str	r2, [r3, #24]
 8009040:	e00e      	b.n	8009060 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2200      	movs	r2, #0
 800905e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800906e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800907c:	b29b      	uxth	r3, r3
 800907e:	461a      	mov	r2, r3
 8009080:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009084:	4413      	add	r3, r2
 8009086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800908a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	00da      	lsls	r2, r3, #3
 8009098:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800909c:	4413      	add	r3, r2
 800909e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090b8:	801a      	strh	r2, [r3, #0]
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10d      	bne.n	80090de <USB_EPStartXfer+0xe94>
 80090c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090d8:	801a      	strh	r2, [r3, #0]
 80090da:	f000 bc28 	b.w	800992e <USB_EPStartXfer+0x16e4>
 80090de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80090e4:	d81f      	bhi.n	8009126 <USB_EPStartXfer+0xedc>
 80090e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ea:	085b      	lsrs	r3, r3, #1
 80090ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <USB_EPStartXfer+0xebc>
 80090fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009100:	3301      	adds	r3, #1
 8009102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29a      	uxth	r2, r3
 800910e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009112:	b29b      	uxth	r3, r3
 8009114:	029b      	lsls	r3, r3, #10
 8009116:	b29b      	uxth	r3, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	b29a      	uxth	r2, r3
 800911c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009120:	801a      	strh	r2, [r3, #0]
 8009122:	f000 bc04 	b.w	800992e <USB_EPStartXfer+0x16e4>
 8009126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009134:	f003 031f 	and.w	r3, r3, #31
 8009138:	2b00      	cmp	r3, #0
 800913a:	d104      	bne.n	8009146 <USB_EPStartXfer+0xefc>
 800913c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009140:	3b01      	subs	r3, #1
 8009142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b29a      	uxth	r2, r3
 800914e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009152:	b29b      	uxth	r3, r3
 8009154:	029b      	lsls	r3, r3, #10
 8009156:	b29b      	uxth	r3, r3
 8009158:	4313      	orrs	r3, r2
 800915a:	b29b      	uxth	r3, r3
 800915c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009164:	b29a      	uxth	r2, r3
 8009166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800916a:	801a      	strh	r2, [r3, #0]
 800916c:	e3df      	b.n	800992e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800916e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	78db      	ldrb	r3, [r3, #3]
 800917a:	2b02      	cmp	r3, #2
 800917c:	f040 8218 	bne.w	80095b0 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 809d 	bne.w	80092cc <USB_EPStartXfer+0x1082>
 8009192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	461a      	mov	r2, r3
 80091b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091b6:	4413      	add	r3, r2
 80091b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	00da      	lsls	r2, r3, #3
 80091ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ce:	4413      	add	r3, r2
 80091d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <USB_EPStartXfer+0xfcc>
 80091fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800920c:	b29a      	uxth	r2, r3
 800920e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	e08f      	b.n	8009336 <USB_EPStartXfer+0x10ec>
 8009216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	2b3e      	cmp	r3, #62	@ 0x3e
 8009224:	d826      	bhi.n	8009274 <USB_EPStartXfer+0x102a>
 8009226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800922a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800923c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <USB_EPStartXfer+0x100c>
 800924c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009250:	3301      	adds	r3, #1
 8009252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29a      	uxth	r2, r3
 800925e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009262:	b29b      	uxth	r3, r3
 8009264:	029b      	lsls	r3, r3, #10
 8009266:	b29b      	uxth	r3, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	b29a      	uxth	r2, r3
 800926c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	e060      	b.n	8009336 <USB_EPStartXfer+0x10ec>
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	095b      	lsrs	r3, r3, #5
 8009282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	f003 031f 	and.w	r3, r3, #31
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <USB_EPStartXfer+0x105a>
 800929a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800929e:	3b01      	subs	r3, #1
 80092a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	029b      	lsls	r3, r3, #10
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092c8:	801a      	strh	r2, [r3, #0]
 80092ca:	e034      	b.n	8009336 <USB_EPStartXfer+0x10ec>
 80092cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d12c      	bne.n	8009336 <USB_EPStartXfer+0x10ec>
 80092dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009300:	4413      	add	r3, r2
 8009302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800930a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	00da      	lsls	r2, r3, #3
 8009314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009318:	4413      	add	r3, r2
 800931a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800931e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	b29a      	uxth	r2, r3
 8009330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009334:	801a      	strh	r2, [r3, #0]
 8009336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 809d 	bne.w	8009490 <USB_EPStartXfer+0x1246>
 8009356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800935a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009372:	b29b      	uxth	r3, r3
 8009374:	461a      	mov	r2, r3
 8009376:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800937a:	4413      	add	r3, r2
 800937c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	00da      	lsls	r2, r3, #3
 800938e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009392:	4413      	add	r3, r2
 8009394:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800939c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093ae:	801a      	strh	r2, [r3, #0]
 80093b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10c      	bne.n	80093da <USB_EPStartXfer+0x1190>
 80093c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	e088      	b.n	80094ec <USB_EPStartXfer+0x12a2>
 80093da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80093e8:	d826      	bhi.n	8009438 <USB_EPStartXfer+0x11ee>
 80093ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <USB_EPStartXfer+0x11d0>
 8009410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009414:	3301      	adds	r3, #1
 8009416:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800941a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	b29a      	uxth	r2, r3
 8009422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009426:	b29b      	uxth	r3, r3
 8009428:	029b      	lsls	r3, r3, #10
 800942a:	b29b      	uxth	r3, r3
 800942c:	4313      	orrs	r3, r2
 800942e:	b29a      	uxth	r2, r3
 8009430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009434:	801a      	strh	r2, [r3, #0]
 8009436:	e059      	b.n	80094ec <USB_EPStartXfer+0x12a2>
 8009438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800944a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 031f 	and.w	r3, r3, #31
 800945a:	2b00      	cmp	r3, #0
 800945c:	d104      	bne.n	8009468 <USB_EPStartXfer+0x121e>
 800945e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009462:	3b01      	subs	r3, #1
 8009464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29a      	uxth	r2, r3
 8009470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009474:	b29b      	uxth	r3, r3
 8009476:	029b      	lsls	r3, r3, #10
 8009478:	b29b      	uxth	r3, r3
 800947a:	4313      	orrs	r3, r2
 800947c:	b29b      	uxth	r3, r3
 800947e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009486:	b29a      	uxth	r2, r3
 8009488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800948c:	801a      	strh	r2, [r3, #0]
 800948e:	e02d      	b.n	80094ec <USB_EPStartXfer+0x12a2>
 8009490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	785b      	ldrb	r3, [r3, #1]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d125      	bne.n	80094ec <USB_EPStartXfer+0x12a2>
 80094a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094b6:	4413      	add	r3, r2
 80094b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	00da      	lsls	r2, r3, #3
 80094ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094ce:	4413      	add	r3, r2
 80094d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80094d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094ea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80094ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8218 	beq.w	800992e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80094fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800951e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d005      	beq.n	8009536 <USB_EPStartXfer+0x12ec>
 800952a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800952e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10d      	bne.n	8009552 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009536:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800953a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800953e:	2b00      	cmp	r3, #0
 8009540:	f040 81f5 	bne.w	800992e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009544:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954c:	2b00      	cmp	r3, #0
 800954e:	f040 81ee 	bne.w	800992e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	b29b      	uxth	r3, r3
 8009570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009578:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800957c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	441a      	add	r2, r3
 8009596:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800959a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800959e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	8013      	strh	r3, [r2, #0]
 80095ae:	e1be      	b.n	800992e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80095b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	78db      	ldrb	r3, [r3, #3]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	f040 81b4 	bne.w	800992a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80095c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d917      	bls.n	800960e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80095de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80095ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699a      	ldr	r2, [r3, #24]
 80095fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fe:	1ad2      	subs	r2, r2, r3
 8009600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	619a      	str	r2, [r3, #24]
 800960c:	e00e      	b.n	800962c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800960e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800961e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2200      	movs	r2, #0
 800962a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800962c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	785b      	ldrb	r3, [r3, #1]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 8085 	bne.w	8009748 <USB_EPStartXfer+0x14fe>
 800963e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800964c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800965a:	b29b      	uxth	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009662:	4413      	add	r3, r2
 8009664:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	00da      	lsls	r2, r3, #3
 8009676:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800967a:	4413      	add	r3, r2
 800967c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009680:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b29b      	uxth	r3, r3
 800968c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009690:	b29a      	uxth	r2, r3
 8009692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009696:	801a      	strh	r2, [r3, #0]
 8009698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10c      	bne.n	80096ba <USB_EPStartXfer+0x1470>
 80096a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	e077      	b.n	80097aa <USB_EPStartXfer+0x1560>
 80096ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096be:	2b3e      	cmp	r3, #62	@ 0x3e
 80096c0:	d81e      	bhi.n	8009700 <USB_EPStartXfer+0x14b6>
 80096c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c6:	085b      	lsrs	r3, r3, #1
 80096c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80096cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <USB_EPStartXfer+0x1498>
 80096d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096dc:	3301      	adds	r3, #1
 80096de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80096e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	029b      	lsls	r3, r3, #10
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	4313      	orrs	r3, r2
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096fc:	801a      	strh	r2, [r3, #0]
 80096fe:	e054      	b.n	80097aa <USB_EPStartXfer+0x1560>
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970e:	f003 031f 	and.w	r3, r3, #31
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <USB_EPStartXfer+0x14d6>
 8009716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800971a:	3b01      	subs	r3, #1
 800971c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800972c:	b29b      	uxth	r3, r3
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	b29b      	uxth	r3, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	b29b      	uxth	r3, r3
 8009736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973e:	b29a      	uxth	r2, r3
 8009740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	e030      	b.n	80097aa <USB_EPStartXfer+0x1560>
 8009748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	785b      	ldrb	r3, [r3, #1]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d128      	bne.n	80097aa <USB_EPStartXfer+0x1560>
 8009758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009774:	b29b      	uxth	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800977c:	4413      	add	r3, r2
 800977e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	00da      	lsls	r2, r3, #3
 8009790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009794:	4413      	add	r3, r2
 8009796:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800979a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80097a8:	801a      	strh	r2, [r3, #0]
 80097aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	785b      	ldrb	r3, [r3, #1]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 8085 	bne.w	80098d4 <USB_EPStartXfer+0x168a>
 80097ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80097d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	461a      	mov	r2, r3
 80097ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80097ee:	4413      	add	r3, r2
 80097f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80097f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	00da      	lsls	r2, r3, #3
 8009802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009806:	4413      	add	r3, r2
 8009808:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800980c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800981c:	b29a      	uxth	r2, r3
 800981e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10c      	bne.n	8009846 <USB_EPStartXfer+0x15fc>
 800982c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b29b      	uxth	r3, r3
 8009834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983c:	b29a      	uxth	r2, r3
 800983e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	e073      	b.n	800992e <USB_EPStartXfer+0x16e4>
 8009846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800984a:	2b3e      	cmp	r3, #62	@ 0x3e
 800984c:	d81e      	bhi.n	800988c <USB_EPStartXfer+0x1642>
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <USB_EPStartXfer+0x1624>
 8009864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009868:	3301      	adds	r3, #1
 800986a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800986e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	b29a      	uxth	r2, r3
 8009876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800987a:	b29b      	uxth	r3, r3
 800987c:	029b      	lsls	r3, r3, #10
 800987e:	b29b      	uxth	r3, r3
 8009880:	4313      	orrs	r3, r2
 8009882:	b29a      	uxth	r2, r3
 8009884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009888:	801a      	strh	r2, [r3, #0]
 800988a:	e050      	b.n	800992e <USB_EPStartXfer+0x16e4>
 800988c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009890:	095b      	lsrs	r3, r3, #5
 8009892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d104      	bne.n	80098ac <USB_EPStartXfer+0x1662>
 80098a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098a6:	3b01      	subs	r3, #1
 80098a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	029b      	lsls	r3, r3, #10
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098d0:	801a      	strh	r2, [r3, #0]
 80098d2:	e02c      	b.n	800992e <USB_EPStartXfer+0x16e4>
 80098d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	785b      	ldrb	r3, [r3, #1]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d124      	bne.n	800992e <USB_EPStartXfer+0x16e4>
 80098e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	461a      	mov	r2, r3
 80098f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80098fa:	4413      	add	r3, r2
 80098fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	00da      	lsls	r2, r3, #3
 800990e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009912:	4413      	add	r3, r2
 8009914:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009918:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800991c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009920:	b29a      	uxth	r2, r3
 8009922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009926:	801a      	strh	r2, [r3, #0]
 8009928:	e001      	b.n	800992e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e03a      	b.n	80099a4 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800992e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009954:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009958:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800995c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009960:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009964:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009968:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800996c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	441a      	add	r2, r3
 800998a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800998e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800999a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800999e:	b29b      	uxth	r3, r3
 80099a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	785b      	ldrb	r3, [r3, #1]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d020      	beq.n	8009a02 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099d6:	81bb      	strh	r3, [r7, #12]
 80099d8:	89bb      	ldrh	r3, [r7, #12]
 80099da:	f083 0310 	eor.w	r3, r3, #16
 80099de:	81bb      	strh	r3, [r7, #12]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	441a      	add	r2, r3
 80099ea:	89bb      	ldrh	r3, [r7, #12]
 80099ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	8013      	strh	r3, [r2, #0]
 8009a00:	e01f      	b.n	8009a42 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a18:	81fb      	strh	r3, [r7, #14]
 8009a1a:	89fb      	ldrh	r3, [r7, #14]
 8009a1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a20:	81fb      	strh	r3, [r7, #14]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	441a      	add	r2, r3
 8009a2c:	89fb      	ldrh	r3, [r7, #14]
 8009a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	7b1b      	ldrb	r3, [r3, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f040 809d 	bne.w	8009b9e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d04c      	beq.n	8009b06 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	823b      	strh	r3, [r7, #16]
 8009a7a:	8a3b      	ldrh	r3, [r7, #16]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01b      	beq.n	8009abc <USB_EPClearStall+0x6c>
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a9a:	81fb      	strh	r3, [r7, #14]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	441a      	add	r2, r3
 8009aa6:	89fb      	ldrh	r3, [r7, #14]
 8009aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ab4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	78db      	ldrb	r3, [r3, #3]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d06c      	beq.n	8009b9e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ada:	81bb      	strh	r3, [r7, #12]
 8009adc:	89bb      	ldrh	r3, [r7, #12]
 8009ade:	f083 0320 	eor.w	r3, r3, #32
 8009ae2:	81bb      	strh	r3, [r7, #12]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	441a      	add	r2, r3
 8009aee:	89bb      	ldrh	r3, [r7, #12]
 8009af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	8013      	strh	r3, [r2, #0]
 8009b04:	e04b      	b.n	8009b9e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	82fb      	strh	r3, [r7, #22]
 8009b14:	8afb      	ldrh	r3, [r7, #22]
 8009b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01b      	beq.n	8009b56 <USB_EPClearStall+0x106>
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b34:	82bb      	strh	r3, [r7, #20]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	441a      	add	r2, r3
 8009b40:	8abb      	ldrh	r3, [r7, #20]
 8009b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b6c:	827b      	strh	r3, [r7, #18]
 8009b6e:	8a7b      	ldrh	r3, [r7, #18]
 8009b70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b74:	827b      	strh	r3, [r7, #18]
 8009b76:	8a7b      	ldrh	r3, [r7, #18]
 8009b78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b7c:	827b      	strh	r3, [r7, #18]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	441a      	add	r2, r3
 8009b88:	8a7b      	ldrh	r3, [r7, #18]
 8009b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d103      	bne.n	8009bc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2280      	movs	r2, #128	@ 0x80
 8009bc2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c14:	68fb      	ldr	r3, [r7, #12]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b08b      	sub	sp, #44	@ 0x2c
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	461a      	mov	r2, r3
 8009c30:	460b      	mov	r3, r1
 8009c32:	80fb      	strh	r3, [r7, #6]
 8009c34:	4613      	mov	r3, r2
 8009c36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c38:	88bb      	ldrh	r3, [r7, #4]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c48:	88fa      	ldrh	r2, [r7, #6]
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c58:	e01b      	b.n	8009c92 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	3301      	adds	r3, #1
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	b21a      	sxth	r2, r3
 8009c6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	b21b      	sxth	r3, r3
 8009c72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	8a7a      	ldrh	r2, [r7, #18]
 8009c78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	3301      	adds	r3, #1
 8009c84:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e0      	bne.n	8009c5a <USB_WritePMA+0x38>
  }
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	372c      	adds	r7, #44	@ 0x2c
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b08b      	sub	sp, #44	@ 0x2c
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	80fb      	strh	r3, [r7, #6]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009cbc:	88bb      	ldrh	r3, [r7, #4]
 8009cbe:	085b      	lsrs	r3, r3, #1
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009cd6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cdc:	e018      	b.n	8009d10 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	3302      	adds	r3, #2
 8009cea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	0a1b      	lsrs	r3, r3, #8
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	3301      	adds	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e3      	bne.n	8009cde <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009d16:	88bb      	ldrh	r3, [r7, #4]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d007      	beq.n	8009d32 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	701a      	strb	r2, [r3, #0]
  }
}
 8009d32:	bf00      	nop
 8009d34:	372c      	adds	r7, #44	@ 0x2c
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d4a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009d4e:	f002 f90b 	bl	800bf68 <USBD_static_malloc>
 8009d52:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009d62:	2302      	movs	r3, #2
 8009d64:	e066      	b.n	8009e34 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	7c1b      	ldrb	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d119      	bne.n	8009daa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	2181      	movs	r1, #129	@ 0x81
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 ff99 	bl	800bcb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d8e:	2202      	movs	r2, #2
 8009d90:	2101      	movs	r1, #1
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f001 ff8f 	bl	800bcb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2210      	movs	r2, #16
 8009da4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009da8:	e016      	b.n	8009dd8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009daa:	2340      	movs	r3, #64	@ 0x40
 8009dac:	2202      	movs	r2, #2
 8009dae:	2181      	movs	r1, #129	@ 0x81
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 ff80 	bl	800bcb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dbc:	2340      	movs	r3, #64	@ 0x40
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 ff77 	bl	800bcb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2210      	movs	r2, #16
 8009dd4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009dd8:	2308      	movs	r3, #8
 8009dda:	2203      	movs	r2, #3
 8009ddc:	2182      	movs	r1, #130	@ 0x82
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 ff69 	bl	800bcb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	7c1b      	ldrb	r3, [r3, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d109      	bne.n	8009e22 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e18:	2101      	movs	r1, #1
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f002 f83a 	bl	800be94 <USBD_LL_PrepareReceive>
 8009e20:	e007      	b.n	8009e32 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e28:	2340      	movs	r3, #64	@ 0x40
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f002 f831 	bl	800be94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e48:	2181      	movs	r1, #129	@ 0x81
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 ff59 	bl	800bd02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e56:	2101      	movs	r1, #1
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 ff52 	bl	800bd02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e66:	2182      	movs	r1, #130	@ 0x82
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 ff4a 	bl	800bd02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00e      	beq.n	8009ea6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f002 f873 	bl	800bf84 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ec0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e0af      	b.n	800a038 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d03f      	beq.n	8009f64 <USBD_CDC_Setup+0xb4>
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	f040 809f 	bne.w	800a028 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	88db      	ldrh	r3, [r3, #6]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d02e      	beq.n	8009f50 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	b25b      	sxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da16      	bge.n	8009f2a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009f08:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	88d2      	ldrh	r2, [r2, #6]
 8009f0e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	88db      	ldrh	r3, [r3, #6]
 8009f14:	2b07      	cmp	r3, #7
 8009f16:	bf28      	it	cs
 8009f18:	2307      	movcs	r3, #7
 8009f1a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	89fa      	ldrh	r2, [r7, #14]
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f001 facd 	bl	800b4c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009f28:	e085      	b.n	800a036 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	785a      	ldrb	r2, [r3, #1]
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	88db      	ldrh	r3, [r3, #6]
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009f40:	6939      	ldr	r1, [r7, #16]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	88db      	ldrh	r3, [r3, #6]
 8009f46:	461a      	mov	r2, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 fae6 	bl	800b51a <USBD_CtlPrepareRx>
      break;
 8009f4e:	e072      	b.n	800a036 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	7850      	ldrb	r0, [r2, #1]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	4798      	blx	r3
      break;
 8009f62:	e068      	b.n	800a036 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	2b0b      	cmp	r3, #11
 8009f6a:	d852      	bhi.n	800a012 <USBD_CDC_Setup+0x162>
 8009f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f74 <USBD_CDC_Setup+0xc4>)
 8009f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f72:	bf00      	nop
 8009f74:	08009fa5 	.word	0x08009fa5
 8009f78:	0800a021 	.word	0x0800a021
 8009f7c:	0800a013 	.word	0x0800a013
 8009f80:	0800a013 	.word	0x0800a013
 8009f84:	0800a013 	.word	0x0800a013
 8009f88:	0800a013 	.word	0x0800a013
 8009f8c:	0800a013 	.word	0x0800a013
 8009f90:	0800a013 	.word	0x0800a013
 8009f94:	0800a013 	.word	0x0800a013
 8009f98:	0800a013 	.word	0x0800a013
 8009f9c:	08009fcf 	.word	0x08009fcf
 8009fa0:	08009ff9 	.word	0x08009ff9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d107      	bne.n	8009fc0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fb0:	f107 030a 	add.w	r3, r7, #10
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 fa82 	bl	800b4c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fbe:	e032      	b.n	800a026 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 fa0c 	bl	800b3e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	75fb      	strb	r3, [r7, #23]
          break;
 8009fcc:	e02b      	b.n	800a026 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d107      	bne.n	8009fea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fda:	f107 030d 	add.w	r3, r7, #13
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 fa6d 	bl	800b4c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fe8:	e01d      	b.n	800a026 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 f9f7 	bl	800b3e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff6:	e016      	b.n	800a026 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b03      	cmp	r3, #3
 800a002:	d00f      	beq.n	800a024 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 f9ea 	bl	800b3e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a00c:	2303      	movs	r3, #3
 800a00e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a010:	e008      	b.n	800a024 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 f9e3 	bl	800b3e0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a01a:	2303      	movs	r3, #3
 800a01c:	75fb      	strb	r3, [r7, #23]
          break;
 800a01e:	e002      	b.n	800a026 <USBD_CDC_Setup+0x176>
          break;
 800a020:	bf00      	nop
 800a022:	e008      	b.n	800a036 <USBD_CDC_Setup+0x186>
          break;
 800a024:	bf00      	nop
      }
      break;
 800a026:	e006      	b.n	800a036 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 f9d8 	bl	800b3e0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a030:	2303      	movs	r3, #3
 800a032:	75fb      	strb	r3, [r7, #23]
      break;
 800a034:	bf00      	nop
  }

  return (uint8_t)ret;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a052:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a05e:	2303      	movs	r3, #3
 800a060:	e04f      	b.n	800a102 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a068:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a06a:	78fa      	ldrb	r2, [r7, #3]
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	3318      	adds	r3, #24
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d029      	beq.n	800a0d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a080:	78fa      	ldrb	r2, [r7, #3]
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	3318      	adds	r3, #24
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	78f9      	ldrb	r1, [r7, #3]
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	460b      	mov	r3, r1
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	00db      	lsls	r3, r3, #3
 800a09e:	4403      	add	r3, r0
 800a0a0:	3320      	adds	r3, #32
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0a8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d110      	bne.n	800a0d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a0b2:	78fa      	ldrb	r2, [r7, #3]
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	3318      	adds	r3, #24
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0c6:	78f9      	ldrb	r1, [r7, #3]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 fec0 	bl	800be52 <USBD_LL_Transmit>
 800a0d2:	e015      	b.n	800a100 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a0fc:	78fa      	ldrb	r2, [r7, #3]
 800a0fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a11c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a128:	2303      	movs	r3, #3
 800a12a:	e015      	b.n	800a158 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 fed0 	bl	800bed6 <USBD_LL_GetRxDataSize>
 800a136:	4602      	mov	r2, r0
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a152:	4611      	mov	r1, r2
 800a154:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a16e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a176:	2303      	movs	r3, #3
 800a178:	e01a      	b.n	800a1b0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d014      	beq.n	800a1ae <USBD_CDC_EP0_RxReady+0x4e>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a18a:	2bff      	cmp	r3, #255	@ 0xff
 800a18c:	d00f      	beq.n	800a1ae <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a19c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	22ff      	movs	r2, #255	@ 0xff
 800a1aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2243      	movs	r2, #67	@ 0x43
 800a1c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a1c6:	4b03      	ldr	r3, [pc, #12]	@ (800a1d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	200000a0 	.word	0x200000a0

0800a1d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2243      	movs	r2, #67	@ 0x43
 800a1e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a1e6:	4b03      	ldr	r3, [pc, #12]	@ (800a1f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	2000005c 	.word	0x2000005c

0800a1f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2243      	movs	r2, #67	@ 0x43
 800a204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a206:	4b03      	ldr	r3, [pc, #12]	@ (800a214 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	200000e4 	.word	0x200000e4

0800a218 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	220a      	movs	r2, #10
 800a224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a226:	4b03      	ldr	r3, [pc, #12]	@ (800a234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	20000018 	.word	0x20000018

0800a238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a248:	2303      	movs	r3, #3
 800a24a:	e004      	b.n	800a256 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a262:	b480      	push	{r7}
 800a264:	b087      	sub	sp, #28
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	60b9      	str	r1, [r7, #8]
 800a26c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a274:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e008      	b.n	800a292 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b085      	sub	sp, #20
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e004      	b.n	800a2c4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e01a      	b.n	800a328 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d114      	bne.n	800a326 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a31a:	2181      	movs	r1, #129	@ 0x81
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 fd98 	bl	800be52 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a33e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e016      	b.n	800a37c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	7c1b      	ldrb	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d109      	bne.n	800a36a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a35c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a360:	2101      	movs	r1, #1
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 fd96 	bl	800be94 <USBD_LL_PrepareReceive>
 800a368:	e007      	b.n	800a37a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a370:	2340      	movs	r3, #64	@ 0x40
 800a372:	2101      	movs	r1, #1
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f001 fd8d 	bl	800be94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a398:	2303      	movs	r3, #3
 800a39a:	e01f      	b.n	800a3dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f001 fbf5 	bl	800bbc0 <USBD_LL_Init>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e016      	b.n	800a42a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a418:	f107 020e 	add.w	r2, r7, #14
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
 800a420:	4602      	mov	r2, r0
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b082      	sub	sp, #8
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f001 fc20 	bl	800bc80 <USBD_LL_Start>
 800a440:	4603      	mov	r3, r0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a46c:	2303      	movs	r3, #3
 800a46e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d009      	beq.n	800a48e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	78fa      	ldrb	r2, [r7, #3]
 800a484:	4611      	mov	r1, r2
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	4798      	blx	r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d007      	beq.n	800a4be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	78fa      	ldrb	r2, [r7, #3]
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	4798      	blx	r3
  }

  return USBD_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 ff46 	bl	800b36c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a4fc:	f003 031f 	and.w	r3, r3, #31
 800a500:	2b02      	cmp	r3, #2
 800a502:	d01a      	beq.n	800a53a <USBD_LL_SetupStage+0x72>
 800a504:	2b02      	cmp	r3, #2
 800a506:	d822      	bhi.n	800a54e <USBD_LL_SetupStage+0x86>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <USBD_LL_SetupStage+0x4a>
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d00a      	beq.n	800a526 <USBD_LL_SetupStage+0x5e>
 800a510:	e01d      	b.n	800a54e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f9ee 	bl	800a8fc <USBD_StdDevReq>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]
      break;
 800a524:	e020      	b.n	800a568 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fa52 	bl	800a9d8 <USBD_StdItfReq>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
      break;
 800a538:	e016      	b.n	800a568 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fa91 	bl	800aa6a <USBD_StdEPReq>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
      break;
 800a54c:	e00c      	b.n	800a568 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a554:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fbef 	bl	800bd40 <USBD_LL_StallEP>
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]
      break;
 800a566:	bf00      	nop
  }

  return ret;
 800a568:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b086      	sub	sp, #24
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	460b      	mov	r3, r1
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a580:	7afb      	ldrb	r3, [r7, #11]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d138      	bne.n	800a5f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a58c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a594:	2b03      	cmp	r3, #3
 800a596:	d14a      	bne.n	800a62e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	689a      	ldr	r2, [r3, #8]
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d913      	bls.n	800a5cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	1ad2      	subs	r2, r2, r3
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	bf28      	it	cs
 800a5be:	4613      	movcs	r3, r2
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 ffc5 	bl	800b554 <USBD_CtlContinueRx>
 800a5ca:	e030      	b.n	800a62e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d10b      	bne.n	800a5f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d005      	beq.n	800a5f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 ffc0 	bl	800b576 <USBD_CtlSendStatus>
 800a5f6:	e01a      	b.n	800a62e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b03      	cmp	r3, #3
 800a602:	d114      	bne.n	800a62e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00e      	beq.n	800a62e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	7afa      	ldrb	r2, [r7, #11]
 800a61a:	4611      	mov	r1, r2
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	4798      	blx	r3
 800a620:	4603      	mov	r3, r0
 800a622:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	e000      	b.n	800a630 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	460b      	mov	r3, r1
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a646:	7afb      	ldrb	r3, [r7, #11]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d16b      	bne.n	800a724 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3314      	adds	r3, #20
 800a650:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d156      	bne.n	800a70a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	429a      	cmp	r2, r3
 800a666:	d914      	bls.n	800a692 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	689a      	ldr	r2, [r3, #8]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	1ad2      	subs	r2, r2, r3
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	461a      	mov	r2, r3
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 ff3a 	bl	800b4f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a684:	2300      	movs	r3, #0
 800a686:	2200      	movs	r2, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f001 fc02 	bl	800be94 <USBD_LL_PrepareReceive>
 800a690:	e03b      	b.n	800a70a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d11c      	bne.n	800a6d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d316      	bcc.n	800a6d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d20f      	bcs.n	800a6d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 ff1b 	bl	800b4f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f001 fbdf 	bl	800be94 <USBD_LL_PrepareReceive>
 800a6d6:	e018      	b.n	800a70a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d10b      	bne.n	800a6fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6fc:	2180      	movs	r1, #128	@ 0x80
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f001 fb1e 	bl	800bd40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 ff49 	bl	800b59c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a710:	2b01      	cmp	r3, #1
 800a712:	d122      	bne.n	800a75a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f7ff fe98 	bl	800a44a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a722:	e01a      	b.n	800a75a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d114      	bne.n	800a75a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00e      	beq.n	800a75a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	7afa      	ldrb	r2, [r7, #11]
 800a746:	4611      	mov	r1, r2
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	4798      	blx	r3
 800a74c:	4603      	mov	r3, r0
 800a74e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	e000      	b.n	800a75c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a794:	2303      	movs	r3, #3
 800a796:	e02f      	b.n	800a7f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00f      	beq.n	800a7c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d009      	beq.n	800a7c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6852      	ldr	r2, [r2, #4]
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	4611      	mov	r1, r2
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7c2:	2340      	movs	r3, #64	@ 0x40
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f001 fa74 	bl	800bcb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2240      	movs	r2, #64	@ 0x40
 800a7da:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7de:	2340      	movs	r3, #64	@ 0x40
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2180      	movs	r1, #128	@ 0x80
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 fa66 	bl	800bcb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2240      	movs	r2, #64	@ 0x40
 800a7f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	78fa      	ldrb	r2, [r7, #3]
 800a810:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2204      	movs	r2, #4
 800a83a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d106      	bne.n	800a86e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a866:	b2da      	uxtb	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a88e:	2303      	movs	r3, #3
 800a890:	e012      	b.n	800a8b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d10b      	bne.n	800a8b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d005      	beq.n	800a8b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a8de:	8a3b      	ldrh	r3, [r7, #16]
 800a8e0:	021b      	lsls	r3, r3, #8
 800a8e2:	b21a      	sxth	r2, r3
 800a8e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	b21b      	sxth	r3, r3
 800a8ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a8ee:	89fb      	ldrh	r3, [r7, #14]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	371c      	adds	r7, #28
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a912:	2b40      	cmp	r3, #64	@ 0x40
 800a914:	d005      	beq.n	800a922 <USBD_StdDevReq+0x26>
 800a916:	2b40      	cmp	r3, #64	@ 0x40
 800a918:	d853      	bhi.n	800a9c2 <USBD_StdDevReq+0xc6>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00b      	beq.n	800a936 <USBD_StdDevReq+0x3a>
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d14f      	bne.n	800a9c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	4798      	blx	r3
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]
      break;
 800a934:	e04a      	b.n	800a9cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	785b      	ldrb	r3, [r3, #1]
 800a93a:	2b09      	cmp	r3, #9
 800a93c:	d83b      	bhi.n	800a9b6 <USBD_StdDevReq+0xba>
 800a93e:	a201      	add	r2, pc, #4	@ (adr r2, 800a944 <USBD_StdDevReq+0x48>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a999 	.word	0x0800a999
 800a948:	0800a9ad 	.word	0x0800a9ad
 800a94c:	0800a9b7 	.word	0x0800a9b7
 800a950:	0800a9a3 	.word	0x0800a9a3
 800a954:	0800a9b7 	.word	0x0800a9b7
 800a958:	0800a977 	.word	0x0800a977
 800a95c:	0800a96d 	.word	0x0800a96d
 800a960:	0800a9b7 	.word	0x0800a9b7
 800a964:	0800a98f 	.word	0x0800a98f
 800a968:	0800a981 	.word	0x0800a981
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f9de 	bl	800ad30 <USBD_GetDescriptor>
          break;
 800a974:	e024      	b.n	800a9c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fb6d 	bl	800b058 <USBD_SetAddress>
          break;
 800a97e:	e01f      	b.n	800a9c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fbac 	bl	800b0e0 <USBD_SetConfig>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]
          break;
 800a98c:	e018      	b.n	800a9c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fc4b 	bl	800b22c <USBD_GetConfig>
          break;
 800a996:	e013      	b.n	800a9c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fc7c 	bl	800b298 <USBD_GetStatus>
          break;
 800a9a0:	e00e      	b.n	800a9c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fcab 	bl	800b300 <USBD_SetFeature>
          break;
 800a9aa:	e009      	b.n	800a9c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fcba 	bl	800b328 <USBD_ClrFeature>
          break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fd11 	bl	800b3e0 <USBD_CtlError>
          break;
 800a9be:	bf00      	nop
      }
      break;
 800a9c0:	e004      	b.n	800a9cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fd0b 	bl	800b3e0 <USBD_CtlError>
      break;
 800a9ca:	bf00      	nop
  }

  return ret;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop

0800a9d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9ee:	2b40      	cmp	r3, #64	@ 0x40
 800a9f0:	d005      	beq.n	800a9fe <USBD_StdItfReq+0x26>
 800a9f2:	2b40      	cmp	r3, #64	@ 0x40
 800a9f4:	d82f      	bhi.n	800aa56 <USBD_StdItfReq+0x7e>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <USBD_StdItfReq+0x26>
 800a9fa:	2b20      	cmp	r3, #32
 800a9fc:	d12b      	bne.n	800aa56 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	3b01      	subs	r3, #1
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d81d      	bhi.n	800aa48 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	889b      	ldrh	r3, [r3, #4]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d813      	bhi.n	800aa3e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	88db      	ldrh	r3, [r3, #6]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d110      	bne.n	800aa52 <USBD_StdItfReq+0x7a>
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10d      	bne.n	800aa52 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fd9d 	bl	800b576 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa3c:	e009      	b.n	800aa52 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fccd 	bl	800b3e0 <USBD_CtlError>
          break;
 800aa46:	e004      	b.n	800aa52 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fcc8 	bl	800b3e0 <USBD_CtlError>
          break;
 800aa50:	e000      	b.n	800aa54 <USBD_StdItfReq+0x7c>
          break;
 800aa52:	bf00      	nop
      }
      break;
 800aa54:	e004      	b.n	800aa60 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fcc1 	bl	800b3e0 <USBD_CtlError>
      break;
 800aa5e:	bf00      	nop
  }

  return ret;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	889b      	ldrh	r3, [r3, #4]
 800aa7c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa86:	2b40      	cmp	r3, #64	@ 0x40
 800aa88:	d007      	beq.n	800aa9a <USBD_StdEPReq+0x30>
 800aa8a:	2b40      	cmp	r3, #64	@ 0x40
 800aa8c:	f200 8145 	bhi.w	800ad1a <USBD_StdEPReq+0x2b0>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00c      	beq.n	800aaae <USBD_StdEPReq+0x44>
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	f040 8140 	bne.w	800ad1a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	4798      	blx	r3
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aaac:	e13a      	b.n	800ad24 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d007      	beq.n	800aac6 <USBD_StdEPReq+0x5c>
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	f300 8129 	bgt.w	800ad0e <USBD_StdEPReq+0x2a4>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d07f      	beq.n	800abc0 <USBD_StdEPReq+0x156>
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d03c      	beq.n	800ab3e <USBD_StdEPReq+0xd4>
 800aac4:	e123      	b.n	800ad0e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d002      	beq.n	800aad8 <USBD_StdEPReq+0x6e>
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d016      	beq.n	800ab04 <USBD_StdEPReq+0x9a>
 800aad6:	e02c      	b.n	800ab32 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00d      	beq.n	800aafa <USBD_StdEPReq+0x90>
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	2b80      	cmp	r3, #128	@ 0x80
 800aae2:	d00a      	beq.n	800aafa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f929 	bl	800bd40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaee:	2180      	movs	r1, #128	@ 0x80
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 f925 	bl	800bd40 <USBD_LL_StallEP>
 800aaf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aaf8:	e020      	b.n	800ab3c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fc6f 	bl	800b3e0 <USBD_CtlError>
              break;
 800ab02:	e01b      	b.n	800ab3c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	885b      	ldrh	r3, [r3, #2]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10e      	bne.n	800ab2a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00b      	beq.n	800ab2a <USBD_StdEPReq+0xc0>
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	2b80      	cmp	r3, #128	@ 0x80
 800ab16:	d008      	beq.n	800ab2a <USBD_StdEPReq+0xc0>
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	88db      	ldrh	r3, [r3, #6]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d104      	bne.n	800ab2a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f90b 	bl	800bd40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fd23 	bl	800b576 <USBD_CtlSendStatus>

              break;
 800ab30:	e004      	b.n	800ab3c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fc53 	bl	800b3e0 <USBD_CtlError>
              break;
 800ab3a:	bf00      	nop
          }
          break;
 800ab3c:	e0ec      	b.n	800ad18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d002      	beq.n	800ab50 <USBD_StdEPReq+0xe6>
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d016      	beq.n	800ab7c <USBD_StdEPReq+0x112>
 800ab4e:	e030      	b.n	800abb2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00d      	beq.n	800ab72 <USBD_StdEPReq+0x108>
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	2b80      	cmp	r3, #128	@ 0x80
 800ab5a:	d00a      	beq.n	800ab72 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 f8ed 	bl	800bd40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab66:	2180      	movs	r1, #128	@ 0x80
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 f8e9 	bl	800bd40 <USBD_LL_StallEP>
 800ab6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab70:	e025      	b.n	800abbe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fc33 	bl	800b3e0 <USBD_CtlError>
              break;
 800ab7a:	e020      	b.n	800abbe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	885b      	ldrh	r3, [r3, #2]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d11b      	bne.n	800abbc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d004      	beq.n	800ab98 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f8f3 	bl	800bd7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fcec 	bl	800b576 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	4798      	blx	r3
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800abb0:	e004      	b.n	800abbc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fc13 	bl	800b3e0 <USBD_CtlError>
              break;
 800abba:	e000      	b.n	800abbe <USBD_StdEPReq+0x154>
              break;
 800abbc:	bf00      	nop
          }
          break;
 800abbe:	e0ab      	b.n	800ad18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d002      	beq.n	800abd2 <USBD_StdEPReq+0x168>
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d032      	beq.n	800ac36 <USBD_StdEPReq+0x1cc>
 800abd0:	e097      	b.n	800ad02 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <USBD_StdEPReq+0x17e>
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	2b80      	cmp	r3, #128	@ 0x80
 800abdc:	d004      	beq.n	800abe8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fbfd 	bl	800b3e0 <USBD_CtlError>
                break;
 800abe6:	e091      	b.n	800ad0c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abec:	2b00      	cmp	r3, #0
 800abee:	da0b      	bge.n	800ac08 <USBD_StdEPReq+0x19e>
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	3310      	adds	r3, #16
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	3304      	adds	r3, #4
 800ac06:	e00b      	b.n	800ac20 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	3304      	adds	r3, #4
 800ac20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2200      	movs	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fc47 	bl	800b4c2 <USBD_CtlSendData>
              break;
 800ac34:	e06a      	b.n	800ad0c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	da11      	bge.n	800ac62 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
 800ac40:	f003 020f 	and.w	r2, r3, #15
 800ac44:	6879      	ldr	r1, [r7, #4]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	440b      	add	r3, r1
 800ac50:	3324      	adds	r3, #36	@ 0x24
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d117      	bne.n	800ac88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fbc0 	bl	800b3e0 <USBD_CtlError>
                  break;
 800ac60:	e054      	b.n	800ad0c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	f003 020f 	and.w	r2, r3, #15
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	440b      	add	r3, r1
 800ac74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d104      	bne.n	800ac88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fbad 	bl	800b3e0 <USBD_CtlError>
                  break;
 800ac86:	e041      	b.n	800ad0c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	da0b      	bge.n	800aca8 <USBD_StdEPReq+0x23e>
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	3310      	adds	r3, #16
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	4413      	add	r3, r2
 800aca4:	3304      	adds	r3, #4
 800aca6:	e00b      	b.n	800acc0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acae:	4613      	mov	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	4413      	add	r3, r2
 800acbe:	3304      	adds	r3, #4
 800acc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <USBD_StdEPReq+0x264>
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	2b80      	cmp	r3, #128	@ 0x80
 800accc:	d103      	bne.n	800acd6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	e00e      	b.n	800acf4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 f86e 	bl	800bdbc <USBD_LL_IsStallEP>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2201      	movs	r2, #1
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	e002      	b.n	800acf4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2202      	movs	r2, #2
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fbe1 	bl	800b4c2 <USBD_CtlSendData>
              break;
 800ad00:	e004      	b.n	800ad0c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fb6b 	bl	800b3e0 <USBD_CtlError>
              break;
 800ad0a:	bf00      	nop
          }
          break;
 800ad0c:	e004      	b.n	800ad18 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fb65 	bl	800b3e0 <USBD_CtlError>
          break;
 800ad16:	bf00      	nop
      }
      break;
 800ad18:	e004      	b.n	800ad24 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fb5f 	bl	800b3e0 <USBD_CtlError>
      break;
 800ad22:	bf00      	nop
  }

  return ret;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	885b      	ldrh	r3, [r3, #2]
 800ad4a:	0a1b      	lsrs	r3, r3, #8
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	2b0e      	cmp	r3, #14
 800ad52:	f200 8152 	bhi.w	800affa <USBD_GetDescriptor+0x2ca>
 800ad56:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <USBD_GetDescriptor+0x2c>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800adcd 	.word	0x0800adcd
 800ad60:	0800ade5 	.word	0x0800ade5
 800ad64:	0800ae25 	.word	0x0800ae25
 800ad68:	0800affb 	.word	0x0800affb
 800ad6c:	0800affb 	.word	0x0800affb
 800ad70:	0800af9b 	.word	0x0800af9b
 800ad74:	0800afc7 	.word	0x0800afc7
 800ad78:	0800affb 	.word	0x0800affb
 800ad7c:	0800affb 	.word	0x0800affb
 800ad80:	0800affb 	.word	0x0800affb
 800ad84:	0800affb 	.word	0x0800affb
 800ad88:	0800affb 	.word	0x0800affb
 800ad8c:	0800affb 	.word	0x0800affb
 800ad90:	0800affb 	.word	0x0800affb
 800ad94:	0800ad99 	.word	0x0800ad99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	7c12      	ldrb	r2, [r2, #16]
 800adb0:	f107 0108 	add.w	r1, r7, #8
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
 800adb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adba:	e126      	b.n	800b00a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fb0e 	bl	800b3e0 <USBD_CtlError>
        err++;
 800adc4:	7afb      	ldrb	r3, [r7, #11]
 800adc6:	3301      	adds	r3, #1
 800adc8:	72fb      	strb	r3, [r7, #11]
      break;
 800adca:	e11e      	b.n	800b00a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7c12      	ldrb	r2, [r2, #16]
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	4610      	mov	r0, r2
 800adde:	4798      	blx	r3
 800ade0:	60f8      	str	r0, [r7, #12]
      break;
 800ade2:	e112      	b.n	800b00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7c1b      	ldrb	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10d      	bne.n	800ae08 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf4:	f107 0208 	add.w	r2, r7, #8
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
 800adfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3301      	adds	r3, #1
 800ae02:	2202      	movs	r2, #2
 800ae04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae06:	e100      	b.n	800b00a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae10:	f107 0208 	add.w	r2, r7, #8
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
 800ae18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	2202      	movs	r2, #2
 800ae20:	701a      	strb	r2, [r3, #0]
      break;
 800ae22:	e0f2      	b.n	800b00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	885b      	ldrh	r3, [r3, #2]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b05      	cmp	r3, #5
 800ae2c:	f200 80ac 	bhi.w	800af88 <USBD_GetDescriptor+0x258>
 800ae30:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <USBD_GetDescriptor+0x108>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800ae51 	.word	0x0800ae51
 800ae3c:	0800ae85 	.word	0x0800ae85
 800ae40:	0800aeb9 	.word	0x0800aeb9
 800ae44:	0800aeed 	.word	0x0800aeed
 800ae48:	0800af21 	.word	0x0800af21
 800ae4c:	0800af55 	.word	0x0800af55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00b      	beq.n	800ae74 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	7c12      	ldrb	r2, [r2, #16]
 800ae68:	f107 0108 	add.w	r1, r7, #8
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	4798      	blx	r3
 800ae70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae72:	e091      	b.n	800af98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fab2 	bl	800b3e0 <USBD_CtlError>
            err++;
 800ae7c:	7afb      	ldrb	r3, [r7, #11]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	72fb      	strb	r3, [r7, #11]
          break;
 800ae82:	e089      	b.n	800af98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	7c12      	ldrb	r2, [r2, #16]
 800ae9c:	f107 0108 	add.w	r1, r7, #8
 800aea0:	4610      	mov	r0, r2
 800aea2:	4798      	blx	r3
 800aea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aea6:	e077      	b.n	800af98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fa98 	bl	800b3e0 <USBD_CtlError>
            err++;
 800aeb0:	7afb      	ldrb	r3, [r7, #11]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	72fb      	strb	r3, [r7, #11]
          break;
 800aeb6:	e06f      	b.n	800af98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00b      	beq.n	800aedc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	7c12      	ldrb	r2, [r2, #16]
 800aed0:	f107 0108 	add.w	r1, r7, #8
 800aed4:	4610      	mov	r0, r2
 800aed6:	4798      	blx	r3
 800aed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeda:	e05d      	b.n	800af98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fa7e 	bl	800b3e0 <USBD_CtlError>
            err++;
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	3301      	adds	r3, #1
 800aee8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeea:	e055      	b.n	800af98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	7c12      	ldrb	r2, [r2, #16]
 800af04:	f107 0108 	add.w	r1, r7, #8
 800af08:	4610      	mov	r0, r2
 800af0a:	4798      	blx	r3
 800af0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af0e:	e043      	b.n	800af98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fa64 	bl	800b3e0 <USBD_CtlError>
            err++;
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	3301      	adds	r3, #1
 800af1c:	72fb      	strb	r3, [r7, #11]
          break;
 800af1e:	e03b      	b.n	800af98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	7c12      	ldrb	r2, [r2, #16]
 800af38:	f107 0108 	add.w	r1, r7, #8
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
 800af40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af42:	e029      	b.n	800af98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa4a 	bl	800b3e0 <USBD_CtlError>
            err++;
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	3301      	adds	r3, #1
 800af50:	72fb      	strb	r3, [r7, #11]
          break;
 800af52:	e021      	b.n	800af98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	7c12      	ldrb	r2, [r2, #16]
 800af6c:	f107 0108 	add.w	r1, r7, #8
 800af70:	4610      	mov	r0, r2
 800af72:	4798      	blx	r3
 800af74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af76:	e00f      	b.n	800af98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa30 	bl	800b3e0 <USBD_CtlError>
            err++;
 800af80:	7afb      	ldrb	r3, [r7, #11]
 800af82:	3301      	adds	r3, #1
 800af84:	72fb      	strb	r3, [r7, #11]
          break;
 800af86:	e007      	b.n	800af98 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa28 	bl	800b3e0 <USBD_CtlError>
          err++;
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	3301      	adds	r3, #1
 800af94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800af96:	bf00      	nop
      }
      break;
 800af98:	e037      	b.n	800b00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	7c1b      	ldrb	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d109      	bne.n	800afb6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afaa:	f107 0208 	add.w	r2, r7, #8
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
 800afb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afb4:	e029      	b.n	800b00a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fa11 	bl	800b3e0 <USBD_CtlError>
        err++;
 800afbe:	7afb      	ldrb	r3, [r7, #11]
 800afc0:	3301      	adds	r3, #1
 800afc2:	72fb      	strb	r3, [r7, #11]
      break;
 800afc4:	e021      	b.n	800b00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7c1b      	ldrb	r3, [r3, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10d      	bne.n	800afea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd6:	f107 0208 	add.w	r2, r7, #8
 800afda:	4610      	mov	r0, r2
 800afdc:	4798      	blx	r3
 800afde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	2207      	movs	r2, #7
 800afe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afe8:	e00f      	b.n	800b00a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f9f7 	bl	800b3e0 <USBD_CtlError>
        err++;
 800aff2:	7afb      	ldrb	r3, [r7, #11]
 800aff4:	3301      	adds	r3, #1
 800aff6:	72fb      	strb	r3, [r7, #11]
      break;
 800aff8:	e007      	b.n	800b00a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f9ef 	bl	800b3e0 <USBD_CtlError>
      err++;
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	3301      	adds	r3, #1
 800b006:	72fb      	strb	r3, [r7, #11]
      break;
 800b008:	bf00      	nop
  }

  if (err != 0U)
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d11e      	bne.n	800b04e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	88db      	ldrh	r3, [r3, #6]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d016      	beq.n	800b046 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b018:	893b      	ldrh	r3, [r7, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00e      	beq.n	800b03c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	88da      	ldrh	r2, [r3, #6]
 800b022:	893b      	ldrh	r3, [r7, #8]
 800b024:	4293      	cmp	r3, r2
 800b026:	bf28      	it	cs
 800b028:	4613      	movcs	r3, r2
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b02e:	893b      	ldrh	r3, [r7, #8]
 800b030:	461a      	mov	r2, r3
 800b032:	68f9      	ldr	r1, [r7, #12]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fa44 	bl	800b4c2 <USBD_CtlSendData>
 800b03a:	e009      	b.n	800b050 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f9ce 	bl	800b3e0 <USBD_CtlError>
 800b044:	e004      	b.n	800b050 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fa95 	bl	800b576 <USBD_CtlSendStatus>
 800b04c:	e000      	b.n	800b050 <USBD_GetDescriptor+0x320>
    return;
 800b04e:	bf00      	nop
  }
}
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop

0800b058 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	889b      	ldrh	r3, [r3, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d131      	bne.n	800b0ce <USBD_SetAddress+0x76>
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	88db      	ldrh	r3, [r3, #6]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d12d      	bne.n	800b0ce <USBD_SetAddress+0x76>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	885b      	ldrh	r3, [r3, #2]
 800b076:	2b7f      	cmp	r3, #127	@ 0x7f
 800b078:	d829      	bhi.n	800b0ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	885b      	ldrh	r3, [r3, #2]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d104      	bne.n	800b09c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f9a3 	bl	800b3e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b09a:	e01d      	b.n	800b0d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	7bfa      	ldrb	r2, [r7, #15]
 800b0a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 feb3 	bl	800be14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fa61 	bl	800b576 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d004      	beq.n	800b0c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c2:	e009      	b.n	800b0d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0cc:	e004      	b.n	800b0d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f985 	bl	800b3e0 <USBD_CtlError>
  }
}
 800b0d6:	bf00      	nop
 800b0d8:	bf00      	nop
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	885b      	ldrh	r3, [r3, #2]
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	4b4c      	ldr	r3, [pc, #304]	@ (800b228 <USBD_SetConfig+0x148>)
 800b0f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0f8:	4b4b      	ldr	r3, [pc, #300]	@ (800b228 <USBD_SetConfig+0x148>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d905      	bls.n	800b10c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f96c 	bl	800b3e0 <USBD_CtlError>
    return USBD_FAIL;
 800b108:	2303      	movs	r3, #3
 800b10a:	e088      	b.n	800b21e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b02      	cmp	r3, #2
 800b116:	d002      	beq.n	800b11e <USBD_SetConfig+0x3e>
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d025      	beq.n	800b168 <USBD_SetConfig+0x88>
 800b11c:	e071      	b.n	800b202 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b11e:	4b42      	ldr	r3, [pc, #264]	@ (800b228 <USBD_SetConfig+0x148>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01c      	beq.n	800b160 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b126:	4b40      	ldr	r3, [pc, #256]	@ (800b228 <USBD_SetConfig+0x148>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	461a      	mov	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b130:	4b3d      	ldr	r3, [pc, #244]	@ (800b228 <USBD_SetConfig+0x148>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff f992 	bl	800a460 <USBD_SetClassConfig>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b140:	7bfb      	ldrb	r3, [r7, #15]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d004      	beq.n	800b150 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f949 	bl	800b3e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b14e:	e065      	b.n	800b21c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fa10 	bl	800b576 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2203      	movs	r2, #3
 800b15a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b15e:	e05d      	b.n	800b21c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fa08 	bl	800b576 <USBD_CtlSendStatus>
      break;
 800b166:	e059      	b.n	800b21c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b168:	4b2f      	ldr	r3, [pc, #188]	@ (800b228 <USBD_SetConfig+0x148>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d112      	bne.n	800b196 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b178:	4b2b      	ldr	r3, [pc, #172]	@ (800b228 <USBD_SetConfig+0x148>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b182:	4b29      	ldr	r3, [pc, #164]	@ (800b228 <USBD_SetConfig+0x148>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff f985 	bl	800a498 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f9f1 	bl	800b576 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b194:	e042      	b.n	800b21c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b196:	4b24      	ldr	r3, [pc, #144]	@ (800b228 <USBD_SetConfig+0x148>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d02a      	beq.n	800b1fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff f973 	bl	800a498 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b228 <USBD_SetConfig+0x148>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b228 <USBD_SetConfig+0x148>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff f94c 	bl	800a460 <USBD_SetClassConfig>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00f      	beq.n	800b1f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f903 	bl	800b3e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff f958 	bl	800a498 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b1f0:	e014      	b.n	800b21c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9bf 	bl	800b576 <USBD_CtlSendStatus>
      break;
 800b1f8:	e010      	b.n	800b21c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f9bb 	bl	800b576 <USBD_CtlSendStatus>
      break;
 800b200:	e00c      	b.n	800b21c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f8eb 	bl	800b3e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b20a:	4b07      	ldr	r3, [pc, #28]	@ (800b228 <USBD_SetConfig+0x148>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff f941 	bl	800a498 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b216:	2303      	movs	r3, #3
 800b218:	73fb      	strb	r3, [r7, #15]
      break;
 800b21a:	bf00      	nop
  }

  return ret;
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	2000055c 	.word	0x2000055c

0800b22c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	88db      	ldrh	r3, [r3, #6]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d004      	beq.n	800b248 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f8cd 	bl	800b3e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b246:	e023      	b.n	800b290 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b02      	cmp	r3, #2
 800b252:	dc02      	bgt.n	800b25a <USBD_GetConfig+0x2e>
 800b254:	2b00      	cmp	r3, #0
 800b256:	dc03      	bgt.n	800b260 <USBD_GetConfig+0x34>
 800b258:	e015      	b.n	800b286 <USBD_GetConfig+0x5a>
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d00b      	beq.n	800b276 <USBD_GetConfig+0x4a>
 800b25e:	e012      	b.n	800b286 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3308      	adds	r3, #8
 800b26a:	2201      	movs	r2, #1
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f927 	bl	800b4c2 <USBD_CtlSendData>
        break;
 800b274:	e00c      	b.n	800b290 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3304      	adds	r3, #4
 800b27a:	2201      	movs	r2, #1
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f91f 	bl	800b4c2 <USBD_CtlSendData>
        break;
 800b284:	e004      	b.n	800b290 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f8a9 	bl	800b3e0 <USBD_CtlError>
        break;
 800b28e:	bf00      	nop
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d81e      	bhi.n	800b2ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	88db      	ldrh	r3, [r3, #6]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d004      	beq.n	800b2c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f890 	bl	800b3e0 <USBD_CtlError>
        break;
 800b2c0:	e01a      	b.n	800b2f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d005      	beq.n	800b2de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	f043 0202 	orr.w	r2, r3, #2
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f8eb 	bl	800b4c2 <USBD_CtlSendData>
      break;
 800b2ec:	e004      	b.n	800b2f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 f875 	bl	800b3e0 <USBD_CtlError>
      break;
 800b2f6:	bf00      	nop
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	885b      	ldrh	r3, [r3, #2]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d106      	bne.n	800b320 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f92b 	bl	800b576 <USBD_CtlSendStatus>
  }
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d80b      	bhi.n	800b358 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	885b      	ldrh	r3, [r3, #2]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d10c      	bne.n	800b362 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f910 	bl	800b576 <USBD_CtlSendStatus>
      }
      break;
 800b356:	e004      	b.n	800b362 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f840 	bl	800b3e0 <USBD_CtlError>
      break;
 800b360:	e000      	b.n	800b364 <USBD_ClrFeature+0x3c>
      break;
 800b362:	bf00      	nop
  }
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	781a      	ldrb	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3301      	adds	r3, #1
 800b386:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	781a      	ldrb	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7ff fa92 	bl	800a8c0 <SWAPBYTE>
 800b39c:	4603      	mov	r3, r0
 800b39e:	461a      	mov	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f7ff fa85 	bl	800a8c0 <SWAPBYTE>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f7ff fa78 	bl	800a8c0 <SWAPBYTE>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	80da      	strh	r2, [r3, #6]
}
 800b3d8:	bf00      	nop
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3ea:	2180      	movs	r1, #128	@ 0x80
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fca7 	bl	800bd40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fca3 	bl	800bd40 <USBD_LL_StallEP>
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b086      	sub	sp, #24
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	60b9      	str	r1, [r7, #8]
 800b40c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d036      	beq.n	800b486 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b41c:	6938      	ldr	r0, [r7, #16]
 800b41e:	f000 f836 	bl	800b48e <USBD_GetLen>
 800b422:	4603      	mov	r3, r0
 800b424:	3301      	adds	r3, #1
 800b426:	b29b      	uxth	r3, r3
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	7812      	ldrb	r2, [r2, #0]
 800b43a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	3301      	adds	r3, #1
 800b440:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	4413      	add	r3, r2
 800b448:	2203      	movs	r2, #3
 800b44a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b44c:	7dfb      	ldrb	r3, [r7, #23]
 800b44e:	3301      	adds	r3, #1
 800b450:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b452:	e013      	b.n	800b47c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	4413      	add	r3, r2
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	7812      	ldrb	r2, [r2, #0]
 800b45e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	3301      	adds	r3, #1
 800b464:	613b      	str	r3, [r7, #16]
    idx++;
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	3301      	adds	r3, #1
 800b46a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	4413      	add	r3, r2
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
    idx++;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	3301      	adds	r3, #1
 800b47a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e7      	bne.n	800b454 <USBD_GetString+0x52>
 800b484:	e000      	b.n	800b488 <USBD_GetString+0x86>
    return;
 800b486:	bf00      	nop
  }
}
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b49e:	e005      	b.n	800b4ac <USBD_GetLen+0x1e>
  {
    len++;
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1f5      	bne.n	800b4a0 <USBD_GetLen+0x12>
  }

  return len;
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 fcb2 	bl	800be52 <USBD_LL_Transmit>

  return USBD_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	2100      	movs	r1, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 fca1 	bl	800be52 <USBD_LL_Transmit>

  return USBD_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	60f8      	str	r0, [r7, #12]
 800b522:	60b9      	str	r1, [r7, #8]
 800b524:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2203      	movs	r2, #3
 800b52a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	2100      	movs	r1, #0
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 fca5 	bl	800be94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	2100      	movs	r1, #0
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 fc94 	bl	800be94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2204      	movs	r2, #4
 800b582:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b586:	2300      	movs	r3, #0
 800b588:	2200      	movs	r2, #0
 800b58a:	2100      	movs	r1, #0
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc60 	bl	800be52 <USBD_LL_Transmit>

  return USBD_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2205      	movs	r2, #5
 800b5a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fc6e 	bl	800be94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4912      	ldr	r1, [pc, #72]	@ (800b614 <MX_USB_Device_Init+0x50>)
 800b5cc:	4812      	ldr	r0, [pc, #72]	@ (800b618 <MX_USB_Device_Init+0x54>)
 800b5ce:	f7fe fed9 	bl	800a384 <USBD_Init>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b5d8:	f7f5 fffe 	bl	80015d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b5dc:	490f      	ldr	r1, [pc, #60]	@ (800b61c <MX_USB_Device_Init+0x58>)
 800b5de:	480e      	ldr	r0, [pc, #56]	@ (800b618 <MX_USB_Device_Init+0x54>)
 800b5e0:	f7fe ff00 	bl	800a3e4 <USBD_RegisterClass>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b5ea:	f7f5 fff5 	bl	80015d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b5ee:	490c      	ldr	r1, [pc, #48]	@ (800b620 <MX_USB_Device_Init+0x5c>)
 800b5f0:	4809      	ldr	r0, [pc, #36]	@ (800b618 <MX_USB_Device_Init+0x54>)
 800b5f2:	f7fe fe21 	bl	800a238 <USBD_CDC_RegisterInterface>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b5fc:	f7f5 ffec 	bl	80015d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b600:	4805      	ldr	r0, [pc, #20]	@ (800b618 <MX_USB_Device_Init+0x54>)
 800b602:	f7fe ff16 	bl	800a432 <USBD_Start>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b60c:	f7f5 ffe4 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b610:	bf00      	nop
 800b612:	bd80      	pop	{r7, pc}
 800b614:	2000013c 	.word	0x2000013c
 800b618:	20000560 	.word	0x20000560
 800b61c:	20000024 	.word	0x20000024
 800b620:	20000128 	.word	0x20000128

0800b624 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b628:	2200      	movs	r2, #0
 800b62a:	4905      	ldr	r1, [pc, #20]	@ (800b640 <CDC_Init_FS+0x1c>)
 800b62c:	4805      	ldr	r0, [pc, #20]	@ (800b644 <CDC_Init_FS+0x20>)
 800b62e:	f7fe fe18 	bl	800a262 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b632:	4905      	ldr	r1, [pc, #20]	@ (800b648 <CDC_Init_FS+0x24>)
 800b634:	4803      	ldr	r0, [pc, #12]	@ (800b644 <CDC_Init_FS+0x20>)
 800b636:	f7fe fe32 	bl	800a29e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b63a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20000c30 	.word	0x20000c30
 800b644:	20000560 	.word	0x20000560
 800b648:	20000830 	.word	0x20000830

0800b64c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b650:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b652:	4618      	mov	r0, r3
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	6039      	str	r1, [r7, #0]
 800b666:	71fb      	strb	r3, [r7, #7]
 800b668:	4613      	mov	r3, r2
 800b66a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	2b23      	cmp	r3, #35	@ 0x23
 800b670:	d84a      	bhi.n	800b708 <CDC_Control_FS+0xac>
 800b672:	a201      	add	r2, pc, #4	@ (adr r2, 800b678 <CDC_Control_FS+0x1c>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b709 	.word	0x0800b709
 800b67c:	0800b709 	.word	0x0800b709
 800b680:	0800b709 	.word	0x0800b709
 800b684:	0800b709 	.word	0x0800b709
 800b688:	0800b709 	.word	0x0800b709
 800b68c:	0800b709 	.word	0x0800b709
 800b690:	0800b709 	.word	0x0800b709
 800b694:	0800b709 	.word	0x0800b709
 800b698:	0800b709 	.word	0x0800b709
 800b69c:	0800b709 	.word	0x0800b709
 800b6a0:	0800b709 	.word	0x0800b709
 800b6a4:	0800b709 	.word	0x0800b709
 800b6a8:	0800b709 	.word	0x0800b709
 800b6ac:	0800b709 	.word	0x0800b709
 800b6b0:	0800b709 	.word	0x0800b709
 800b6b4:	0800b709 	.word	0x0800b709
 800b6b8:	0800b709 	.word	0x0800b709
 800b6bc:	0800b709 	.word	0x0800b709
 800b6c0:	0800b709 	.word	0x0800b709
 800b6c4:	0800b709 	.word	0x0800b709
 800b6c8:	0800b709 	.word	0x0800b709
 800b6cc:	0800b709 	.word	0x0800b709
 800b6d0:	0800b709 	.word	0x0800b709
 800b6d4:	0800b709 	.word	0x0800b709
 800b6d8:	0800b709 	.word	0x0800b709
 800b6dc:	0800b709 	.word	0x0800b709
 800b6e0:	0800b709 	.word	0x0800b709
 800b6e4:	0800b709 	.word	0x0800b709
 800b6e8:	0800b709 	.word	0x0800b709
 800b6ec:	0800b709 	.word	0x0800b709
 800b6f0:	0800b709 	.word	0x0800b709
 800b6f4:	0800b709 	.word	0x0800b709
 800b6f8:	0800b709 	.word	0x0800b709
 800b6fc:	0800b709 	.word	0x0800b709
 800b700:	0800b709 	.word	0x0800b709
 800b704:	0800b709 	.word	0x0800b709
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b708:	bf00      	nop
  }

  return (USBD_OK);
 800b70a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  for (i =0; i != *Len; i++)
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	e009      	b.n	800b73c <CDC_Receive_FS+0x24>
  {
	 slCanProccesInput(Buf[i]);
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	4413      	add	r3, r2
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	4618      	mov	r0, r3
 800b732:	f7f5 fa17 	bl	8000b64 <slCanProccesInput>
  for (i =0; i != *Len; i++)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3301      	adds	r3, #1
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	429a      	cmp	r2, r3
 800b744:	d1f0      	bne.n	800b728 <CDC_Receive_FS+0x10>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b746:	6879      	ldr	r1, [r7, #4]
 800b748:	4805      	ldr	r0, [pc, #20]	@ (800b760 <CDC_Receive_FS+0x48>)
 800b74a:	f7fe fda8 	bl	800a29e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b74e:	4804      	ldr	r0, [pc, #16]	@ (800b760 <CDC_Receive_FS+0x48>)
 800b750:	f7fe fdee 	bl	800a330 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b754:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20000560 	.word	0x20000560

0800b764 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b774:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ac <CDC_Transmit_FS+0x48>)
 800b776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b77a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b786:	2301      	movs	r3, #1
 800b788:	e00b      	b.n	800b7a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b78a:	887b      	ldrh	r3, [r7, #2]
 800b78c:	461a      	mov	r2, r3
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	4806      	ldr	r0, [pc, #24]	@ (800b7ac <CDC_Transmit_FS+0x48>)
 800b792:	f7fe fd66 	bl	800a262 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b796:	4805      	ldr	r0, [pc, #20]	@ (800b7ac <CDC_Transmit_FS+0x48>)
 800b798:	f7fe fd9a 	bl	800a2d0 <USBD_CDC_TransmitPacket>
 800b79c:	4603      	mov	r3, r0
 800b79e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000560 	.word	0x20000560

0800b7b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b7c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	6039      	str	r1, [r7, #0]
 800b7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2212      	movs	r2, #18
 800b7e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b7e6:	4b03      	ldr	r3, [pc, #12]	@ (800b7f4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	2000015c 	.word	0x2000015c

0800b7f8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	2204      	movs	r2, #4
 800b808:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b80a:	4b03      	ldr	r3, [pc, #12]	@ (800b818 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	20000170 	.word	0x20000170

0800b81c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	6039      	str	r1, [r7, #0]
 800b826:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d105      	bne.n	800b83a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	4907      	ldr	r1, [pc, #28]	@ (800b850 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b832:	4808      	ldr	r0, [pc, #32]	@ (800b854 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b834:	f7ff fde5 	bl	800b402 <USBD_GetString>
 800b838:	e004      	b.n	800b844 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	4904      	ldr	r1, [pc, #16]	@ (800b850 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b83e:	4805      	ldr	r0, [pc, #20]	@ (800b854 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b840:	f7ff fddf 	bl	800b402 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b844:	4b02      	ldr	r3, [pc, #8]	@ (800b850 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20001030 	.word	0x20001030
 800b854:	0800c9e4 	.word	0x0800c9e4

0800b858 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	6039      	str	r1, [r7, #0]
 800b862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	4904      	ldr	r1, [pc, #16]	@ (800b878 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b868:	4804      	ldr	r0, [pc, #16]	@ (800b87c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b86a:	f7ff fdca 	bl	800b402 <USBD_GetString>
  return USBD_StrDesc;
 800b86e:	4b02      	ldr	r3, [pc, #8]	@ (800b878 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b870:	4618      	mov	r0, r3
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	20001030 	.word	0x20001030
 800b87c:	0800c9fc 	.word	0x0800c9fc

0800b880 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	6039      	str	r1, [r7, #0]
 800b88a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	221a      	movs	r2, #26
 800b890:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b892:	f000 f843 	bl	800b91c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b896:	4b02      	ldr	r3, [pc, #8]	@ (800b8a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20000174 	.word	0x20000174

0800b8a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	6039      	str	r1, [r7, #0]
 800b8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8b0:	79fb      	ldrb	r3, [r7, #7]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d105      	bne.n	800b8c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	4907      	ldr	r1, [pc, #28]	@ (800b8d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b8ba:	4808      	ldr	r0, [pc, #32]	@ (800b8dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b8bc:	f7ff fda1 	bl	800b402 <USBD_GetString>
 800b8c0:	e004      	b.n	800b8cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4904      	ldr	r1, [pc, #16]	@ (800b8d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b8c6:	4805      	ldr	r0, [pc, #20]	@ (800b8dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b8c8:	f7ff fd9b 	bl	800b402 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8cc:	4b02      	ldr	r3, [pc, #8]	@ (800b8d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20001030 	.word	0x20001030
 800b8dc:	0800ca10 	.word	0x0800ca10

0800b8e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d105      	bne.n	800b8fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	4907      	ldr	r1, [pc, #28]	@ (800b914 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b8f6:	4808      	ldr	r0, [pc, #32]	@ (800b918 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b8f8:	f7ff fd83 	bl	800b402 <USBD_GetString>
 800b8fc:	e004      	b.n	800b908 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	4904      	ldr	r1, [pc, #16]	@ (800b914 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b902:	4805      	ldr	r0, [pc, #20]	@ (800b918 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b904:	f7ff fd7d 	bl	800b402 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b908:	4b02      	ldr	r3, [pc, #8]	@ (800b914 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20001030 	.word	0x20001030
 800b918:	0800ca1c 	.word	0x0800ca1c

0800b91c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b922:	4b0f      	ldr	r3, [pc, #60]	@ (800b960 <Get_SerialNum+0x44>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b928:	4b0e      	ldr	r3, [pc, #56]	@ (800b964 <Get_SerialNum+0x48>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b92e:	4b0e      	ldr	r3, [pc, #56]	@ (800b968 <Get_SerialNum+0x4c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4413      	add	r3, r2
 800b93a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d009      	beq.n	800b956 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b942:	2208      	movs	r2, #8
 800b944:	4909      	ldr	r1, [pc, #36]	@ (800b96c <Get_SerialNum+0x50>)
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 f814 	bl	800b974 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b94c:	2204      	movs	r2, #4
 800b94e:	4908      	ldr	r1, [pc, #32]	@ (800b970 <Get_SerialNum+0x54>)
 800b950:	68b8      	ldr	r0, [r7, #8]
 800b952:	f000 f80f 	bl	800b974 <IntToUnicode>
  }
}
 800b956:	bf00      	nop
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	1fff7590 	.word	0x1fff7590
 800b964:	1fff7594 	.word	0x1fff7594
 800b968:	1fff7598 	.word	0x1fff7598
 800b96c:	20000176 	.word	0x20000176
 800b970:	20000186 	.word	0x20000186

0800b974 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b974:	b480      	push	{r7}
 800b976:	b087      	sub	sp, #28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b986:	2300      	movs	r3, #0
 800b988:	75fb      	strb	r3, [r7, #23]
 800b98a:	e027      	b.n	800b9dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	0f1b      	lsrs	r3, r3, #28
 800b990:	2b09      	cmp	r3, #9
 800b992:	d80b      	bhi.n	800b9ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	0f1b      	lsrs	r3, r3, #28
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4619      	mov	r1, r3
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	440b      	add	r3, r1
 800b9a4:	3230      	adds	r2, #48	@ 0x30
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	e00a      	b.n	800b9c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	0f1b      	lsrs	r3, r3, #28
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	440b      	add	r3, r1
 800b9bc:	3237      	adds	r2, #55	@ 0x37
 800b9be:	b2d2      	uxtb	r2, r2
 800b9c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9c8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	75fb      	strb	r3, [r7, #23]
 800b9dc:	7dfa      	ldrb	r2, [r7, #23]
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d3d3      	bcc.n	800b98c <IntToUnicode+0x18>
  }
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop
 800b9e8:	371c      	adds	r7, #28
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
	...

0800b9f4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b094      	sub	sp, #80	@ 0x50
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b9fc:	f107 030c 	add.w	r3, r7, #12
 800ba00:	2244      	movs	r2, #68	@ 0x44
 800ba02:	2100      	movs	r1, #0
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 ffa7 	bl	800c958 <memset>
  if(pcdHandle->Instance==USB)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a15      	ldr	r2, [pc, #84]	@ (800ba64 <HAL_PCD_MspInit+0x70>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d122      	bne.n	800ba5a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ba14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba18:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba1e:	f107 030c 	add.w	r3, r7, #12
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7f8 ff4c 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ba2e:	f7f5 fdd3 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ba32:	4b0d      	ldr	r3, [pc, #52]	@ (800ba68 <HAL_PCD_MspInit+0x74>)
 800ba34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba36:	4a0c      	ldr	r2, [pc, #48]	@ (800ba68 <HAL_PCD_MspInit+0x74>)
 800ba38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba3c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <HAL_PCD_MspInit+0x74>)
 800ba40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba46:	60bb      	str	r3, [r7, #8]
 800ba48:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	2014      	movs	r0, #20
 800ba50:	f7f6 f950 	bl	8001cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ba54:	2014      	movs	r0, #20
 800ba56:	f7f6 f967 	bl	8001d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ba5a:	bf00      	nop
 800ba5c:	3750      	adds	r7, #80	@ 0x50
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	40005c00 	.word	0x40005c00
 800ba68:	40021000 	.word	0x40021000

0800ba6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	f7fe fd20 	bl	800a4c8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800baa2:	78fa      	ldrb	r2, [r7, #3]
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	00db      	lsls	r3, r3, #3
 800baae:	440b      	add	r3, r1
 800bab0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	4619      	mov	r1, r3
 800baba:	f7fe fd5a 	bl	800a572 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800babe:	bf00      	nop
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b082      	sub	sp, #8
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	460b      	mov	r3, r1
 800bad0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	6879      	ldr	r1, [r7, #4]
 800badc:	4613      	mov	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	440b      	add	r3, r1
 800bae6:	3324      	adds	r3, #36	@ 0x24
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	78fb      	ldrb	r3, [r7, #3]
 800baec:	4619      	mov	r1, r3
 800baee:	f7fe fda3 	bl	800a638 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fe feb7 	bl	800a87c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bb0e:	bf00      	nop
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	795b      	ldrb	r3, [r3, #5]
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d001      	beq.n	800bb2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb2a:	f7f5 fd55 	bl	80015d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb34:	7bfa      	ldrb	r2, [r7, #15]
 800bb36:	4611      	mov	r1, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe fe61 	bl	800a800 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fe0d 	bl	800a764 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bb4a:	bf00      	nop
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
	...

0800bb54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe fe5c 	bl	800a820 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	7a5b      	ldrb	r3, [r3, #9]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb70:	4b04      	ldr	r3, [pc, #16]	@ (800bb84 <HAL_PCD_SuspendCallback+0x30>)
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	4a03      	ldr	r2, [pc, #12]	@ (800bb84 <HAL_PCD_SuspendCallback+0x30>)
 800bb76:	f043 0306 	orr.w	r3, r3, #6
 800bb7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bb7c:	bf00      	nop
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	e000ed00 	.word	0xe000ed00

0800bb88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7a5b      	ldrb	r3, [r3, #9]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d007      	beq.n	800bba8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb98:	4b08      	ldr	r3, [pc, #32]	@ (800bbbc <HAL_PCD_ResumeCallback+0x34>)
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	4a07      	ldr	r2, [pc, #28]	@ (800bbbc <HAL_PCD_ResumeCallback+0x34>)
 800bb9e:	f023 0306 	bic.w	r3, r3, #6
 800bba2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bba4:	f000 f9f8 	bl	800bf98 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fe4c 	bl	800a84c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	e000ed00 	.word	0xe000ed00

0800bbc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bbc8:	4a2b      	ldr	r2, [pc, #172]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a29      	ldr	r2, [pc, #164]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbd4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bbd8:	4b27      	ldr	r3, [pc, #156]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbda:	4a28      	ldr	r2, [pc, #160]	@ (800bc7c <USBD_LL_Init+0xbc>)
 800bbdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bbde:	4b26      	ldr	r3, [pc, #152]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bbe4:	4b24      	ldr	r3, [pc, #144]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bbea:	4b23      	ldr	r3, [pc, #140]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbec:	2202      	movs	r2, #2
 800bbee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bbf0:	4b21      	ldr	r3, [pc, #132]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bbf6:	4b20      	ldr	r3, [pc, #128]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bbfc:	4b1e      	ldr	r3, [pc, #120]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc02:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc08:	481b      	ldr	r0, [pc, #108]	@ (800bc78 <USBD_LL_Init+0xb8>)
 800bc0a:	f7f6 fb0f 	bl	800222c <HAL_PCD_Init>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bc14:	f7f5 fce0 	bl	80015d8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc1e:	2318      	movs	r3, #24
 800bc20:	2200      	movs	r2, #0
 800bc22:	2100      	movs	r1, #0
 800bc24:	f7f7 ffca 	bl	8003bbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc2e:	2358      	movs	r3, #88	@ 0x58
 800bc30:	2200      	movs	r2, #0
 800bc32:	2180      	movs	r1, #128	@ 0x80
 800bc34:	f7f7 ffc2 	bl	8003bbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc3e:	23c0      	movs	r3, #192	@ 0xc0
 800bc40:	2200      	movs	r2, #0
 800bc42:	2181      	movs	r1, #129	@ 0x81
 800bc44:	f7f7 ffba 	bl	8003bbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc4e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bc52:	2200      	movs	r2, #0
 800bc54:	2101      	movs	r1, #1
 800bc56:	f7f7 ffb1 	bl	8003bbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc64:	2200      	movs	r2, #0
 800bc66:	2182      	movs	r1, #130	@ 0x82
 800bc68:	f7f7 ffa8 	bl	8003bbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20001230 	.word	0x20001230
 800bc7c:	40005c00 	.word	0x40005c00

0800bc80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f6 fb96 	bl	80023c8 <HAL_PCD_Start>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 f97e 	bl	800bfa4 <USBD_Get_USB_Status>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	70fb      	strb	r3, [r7, #3]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	70bb      	strb	r3, [r7, #2]
 800bccc:	4613      	mov	r3, r2
 800bcce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcde:	78bb      	ldrb	r3, [r7, #2]
 800bce0:	883a      	ldrh	r2, [r7, #0]
 800bce2:	78f9      	ldrb	r1, [r7, #3]
 800bce4:	f7f6 fcdd 	bl	80026a2 <HAL_PCD_EP_Open>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 f958 	bl	800bfa4 <USBD_Get_USB_Status>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b084      	sub	sp, #16
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd1c:	78fa      	ldrb	r2, [r7, #3]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f6 fd1d 	bl	8002760 <HAL_PCD_EP_Close>
 800bd26:	4603      	mov	r3, r0
 800bd28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 f939 	bl	800bfa4 <USBD_Get_USB_Status>
 800bd32:	4603      	mov	r3, r0
 800bd34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd5a:	78fa      	ldrb	r2, [r7, #3]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7f6 fdc6 	bl	80028f0 <HAL_PCD_EP_SetStall>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f91a 	bl	800bfa4 <USBD_Get_USB_Status>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	460b      	mov	r3, r1
 800bd88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd98:	78fa      	ldrb	r2, [r7, #3]
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7f6 fdf9 	bl	8002994 <HAL_PCD_EP_ClrStall>
 800bda2:	4603      	mov	r3, r0
 800bda4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 f8fb 	bl	800bfa4 <USBD_Get_USB_Status>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bdce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	da0b      	bge.n	800bdf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bdd8:	78fb      	ldrb	r3, [r7, #3]
 800bdda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdde:	68f9      	ldr	r1, [r7, #12]
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	440b      	add	r3, r1
 800bdea:	3312      	adds	r3, #18
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	e00b      	b.n	800be08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdf6:	68f9      	ldr	r1, [r7, #12]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	440b      	add	r3, r1
 800be02:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800be06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be2e:	78fa      	ldrb	r2, [r7, #3]
 800be30:	4611      	mov	r1, r2
 800be32:	4618      	mov	r0, r3
 800be34:	f7f6 fc11 	bl	800265a <HAL_PCD_SetAddress>
 800be38:	4603      	mov	r3, r0
 800be3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 f8b0 	bl	800bfa4 <USBD_Get_USB_Status>
 800be44:	4603      	mov	r3, r0
 800be46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be48:	7bbb      	ldrb	r3, [r7, #14]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b086      	sub	sp, #24
 800be56:	af00      	add	r7, sp, #0
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
 800be5e:	460b      	mov	r3, r1
 800be60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800be70:	7af9      	ldrb	r1, [r7, #11]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	f7f6 fd04 	bl	8002882 <HAL_PCD_EP_Transmit>
 800be7a:	4603      	mov	r3, r0
 800be7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	4618      	mov	r0, r3
 800be82:	f000 f88f 	bl	800bfa4 <USBD_Get_USB_Status>
 800be86:	4603      	mov	r3, r0
 800be88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3718      	adds	r7, #24
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	607a      	str	r2, [r7, #4]
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	460b      	mov	r3, r1
 800bea2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800beb2:	7af9      	ldrb	r1, [r7, #11]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	f7f6 fc9a 	bl	80027f0 <HAL_PCD_EP_Receive>
 800bebc:	4603      	mov	r3, r0
 800bebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 f86e 	bl	800bfa4 <USBD_Get_USB_Status>
 800bec8:	4603      	mov	r3, r0
 800beca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800becc:	7dbb      	ldrb	r3, [r7, #22]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	460b      	mov	r3, r1
 800bee0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bee8:	78fa      	ldrb	r2, [r7, #3]
 800beea:	4611      	mov	r1, r2
 800beec:	4618      	mov	r0, r3
 800beee:	f7f6 fcb0 	bl	8002852 <HAL_PCD_EP_GetRxCount>
 800bef2:	4603      	mov	r3, r0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	460b      	mov	r3, r1
 800bf06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bf08:	78fb      	ldrb	r3, [r7, #3]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <HAL_PCDEx_LPM_Callback+0x18>
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d013      	beq.n	800bf3a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bf12:	e023      	b.n	800bf5c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	7a5b      	ldrb	r3, [r3, #9]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d007      	beq.n	800bf2c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bf1c:	f000 f83c 	bl	800bf98 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf20:	4b10      	ldr	r3, [pc, #64]	@ (800bf64 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	4a0f      	ldr	r2, [pc, #60]	@ (800bf64 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf26:	f023 0306 	bic.w	r3, r3, #6
 800bf2a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe fc8a 	bl	800a84c <USBD_LL_Resume>
    break;
 800bf38:	e010      	b.n	800bf5c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe fc6d 	bl	800a820 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7a5b      	ldrb	r3, [r3, #9]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d005      	beq.n	800bf5a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf4e:	4b05      	ldr	r3, [pc, #20]	@ (800bf64 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	4a04      	ldr	r2, [pc, #16]	@ (800bf64 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf54:	f043 0306 	orr.w	r3, r3, #6
 800bf58:	6113      	str	r3, [r2, #16]
    break;
 800bf5a:	bf00      	nop
}
 800bf5c:	bf00      	nop
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	e000ed00 	.word	0xe000ed00

0800bf68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf70:	4b03      	ldr	r3, [pc, #12]	@ (800bf80 <USBD_static_malloc+0x18>)
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	2000150c 	.word	0x2000150c

0800bf84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]

}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bf9c:	f7f5 fa84 	bl	80014a8 <SystemClock_Config>
}
 800bfa0:	bf00      	nop
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d817      	bhi.n	800bfe8 <USBD_Get_USB_Status+0x44>
 800bfb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bfc0 <USBD_Get_USB_Status+0x1c>)
 800bfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbe:	bf00      	nop
 800bfc0:	0800bfd1 	.word	0x0800bfd1
 800bfc4:	0800bfd7 	.word	0x0800bfd7
 800bfc8:	0800bfdd 	.word	0x0800bfdd
 800bfcc:	0800bfe3 	.word	0x0800bfe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd4:	e00b      	b.n	800bfee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfda:	e008      	b.n	800bfee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe0:	e005      	b.n	800bfee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe6:	e002      	b.n	800bfee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	73fb      	strb	r3, [r7, #15]
    break;
 800bfec:	bf00      	nop
  }
  return usb_status;
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <__NVIC_EnableIRQ>:
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	db0b      	blt.n	800c026 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c00e:	79fb      	ldrb	r3, [r7, #7]
 800c010:	f003 021f 	and.w	r2, r3, #31
 800c014:	4907      	ldr	r1, [pc, #28]	@ (800c034 <__NVIC_EnableIRQ+0x38>)
 800c016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c01a:	095b      	lsrs	r3, r3, #5
 800c01c:	2001      	movs	r0, #1
 800c01e:	fa00 f202 	lsl.w	r2, r0, r2
 800c022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	e000e100 	.word	0xe000e100

0800c038 <open_lin_error_handler>:
#include "usart.h"

extern UART_HandleTypeDef huart1;

void open_lin_error_handler(t_open_lin_error error_code)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	71fb      	strb	r3, [r7, #7]
	/* no error handling */
}
 800c042:	bf00      	nop
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
	...

0800c050 <open_lin_hw_check_for_break>:

l_bool open_lin_hw_check_for_break(void)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
	l_bool result = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_LBDF);
 800c056:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <open_lin_hw_check_for_break+0x3c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c064:	bf0c      	ite	eq
 800c066:	2301      	moveq	r3, #1
 800c068:	2300      	movne	r3, #0
 800c06a:	71fb      	strb	r3, [r7, #7]
	if (result == true)
 800c06c:	79fb      	ldrb	r3, [r7, #7]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d004      	beq.n	800c07c <open_lin_hw_check_for_break+0x2c>
	{
		__HAL_UART_CLEAR_FLAG(&huart1,UART_CLEAR_LBDF);
 800c072:	4b06      	ldr	r3, [pc, #24]	@ (800c08c <open_lin_hw_check_for_break+0x3c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c07a:	621a      	str	r2, [r3, #32]
	}

	return result;
 800c07c:	79fb      	ldrb	r3, [r7, #7]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	20000430 	.word	0x20000430

0800c090 <open_lin_hw_set_auto_baud>:

void open_lin_hw_set_auto_baud(void)
{
 800c090:	b480      	push	{r7}
 800c092:	af00      	add	r7, sp, #0
	huart1.Instance->RQR = UART_AUTOBAUD_REQUEST;
 800c094:	4b04      	ldr	r3, [pc, #16]	@ (800c0a8 <open_lin_hw_set_auto_baud+0x18>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2201      	movs	r2, #1
 800c09a:	619a      	str	r2, [r3, #24]
}
 800c09c:	bf00      	nop
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	20000430 	.word	0x20000430

0800c0ac <open_lin_hw_reset>:
extern uint8_t Uart2RxFifo;
void open_lin_hw_reset(void) {
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
	open_lin_hw_check_for_break();
 800c0b0:	f7ff ffce 	bl	800c050 <open_lin_hw_check_for_break>
	HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B);
 800c0b4:	2120      	movs	r1, #32
 800c0b6:	4806      	ldr	r0, [pc, #24]	@ (800c0d0 <open_lin_hw_reset+0x24>)
 800c0b8:	f7f9 f968 	bl	800538c <HAL_LIN_Init>
	HAL_UART_Receive_IT(&huart1, &Uart2RxFifo, 1);
 800c0bc:	2201      	movs	r2, #1
 800c0be:	4905      	ldr	r1, [pc, #20]	@ (800c0d4 <open_lin_hw_reset+0x28>)
 800c0c0:	4803      	ldr	r0, [pc, #12]	@ (800c0d0 <open_lin_hw_reset+0x24>)
 800c0c2:	f7f9 fa61 	bl	8005588 <HAL_UART_Receive_IT>
    NVIC_EnableIRQ(USART1_IRQn);
 800c0c6:	2025      	movs	r0, #37	@ 0x25
 800c0c8:	f7ff ff98 	bl	800bffc <__NVIC_EnableIRQ>

}
 800c0cc:	bf00      	nop
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	20000430 	.word	0x20000430
 800c0d4:	200003e0 	.word	0x200003e0

0800c0d8 <open_lin_set_rx_enabled>:


void open_lin_set_rx_enabled(l_bool v)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	71fb      	strb	r3, [r7, #7]
	if (v == l_true)
 800c0e2:	79fb      	ldrb	r3, [r7, #7]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <open_lin_set_rx_enabled+0x16>
	{
		open_lin_hw_reset();
 800c0e8:	f7ff ffe0 	bl	800c0ac <open_lin_hw_reset>
	} else
	{
		CLEAR_BIT(huart1.Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
	}
}
 800c0ec:	e007      	b.n	800c0fe <open_lin_set_rx_enabled+0x26>
		CLEAR_BIT(huart1.Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0ee:	4b06      	ldr	r3, [pc, #24]	@ (800c108 <open_lin_set_rx_enabled+0x30>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	4b04      	ldr	r3, [pc, #16]	@ (800c108 <open_lin_set_rx_enabled+0x30>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800c0fc:	601a      	str	r2, [r3, #0]
}
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20000430 	.word	0x20000430

0800c10c <open_lin_hw_tx_byte>:

l_bool open_lin_hw_tx_byte(l_u8 byte){
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	71fb      	strb	r3, [r7, #7]

	if (HAL_UART_Transmit(&huart1,&byte,1,1000) == HAL_OK)
 800c116:	1df9      	adds	r1, r7, #7
 800c118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c11c:	2201      	movs	r2, #1
 800c11e:	4806      	ldr	r0, [pc, #24]	@ (800c138 <open_lin_hw_tx_byte+0x2c>)
 800c120:	f7f9 f9a4 	bl	800546c <HAL_UART_Transmit>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <open_lin_hw_tx_byte+0x22>
		return true;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e000      	b.n	800c130 <open_lin_hw_tx_byte+0x24>
	return false;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	20000430 	.word	0x20000430

0800c13c <open_lin_hw_tx_break>:

l_bool open_lin_hw_tx_break(void){
 800c13c:	b580      	push	{r7, lr}
 800c13e:	af00      	add	r7, sp, #0

	if (HAL_LIN_SendBreak(&huart1) == HAL_OK)
 800c140:	4805      	ldr	r0, [pc, #20]	@ (800c158 <open_lin_hw_tx_break+0x1c>)
 800c142:	f7f9 fdc5 	bl	8005cd0 <HAL_LIN_SendBreak>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <open_lin_hw_tx_break+0x14>
		return true;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e000      	b.n	800c152 <open_lin_hw_tx_break+0x16>
	return false;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20000430 	.word	0x20000430

0800c15c <open_lin_hw_tx_data>:

l_bool open_lin_hw_tx_data(l_u8* data, l_u8 len)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
	if (HAL_UART_Transmit(&huart1,data,len,1000) == HAL_OK)
 800c168:	78fb      	ldrb	r3, [r7, #3]
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	4806      	ldr	r0, [pc, #24]	@ (800c18c <open_lin_hw_tx_data+0x30>)
 800c174:	f7f9 f97a 	bl	800546c <HAL_UART_Transmit>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <open_lin_hw_tx_data+0x26>
		return true;
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <open_lin_hw_tx_data+0x28>
	else
		return false;
 800c182:	2300      	movs	r3, #0
//	add buffers to use
//	HAL_UART_Transmit_IT(huart1,data,len);

}
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	20000430 	.word	0x20000430

0800c190 <open_lin_master_dl_rx_callback>:
//{
//
//}

void open_lin_master_dl_rx_callback(open_lin_frame_slot_t* slot)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
	slcanReciveCanFrame(slot);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7f5 f8a1 	bl	80012e0 <slcanReciveCanFrame>
}
 800c19e:	bf00      	nop
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <open_lin_data_layer_parity>:

#include "open_lin_data_layer.h"
#include "open_lin_types.h"
#include "open_lin_hw.h"

open_lin_pid_t open_lin_data_layer_parity(open_lin_pid_t pid) {
 800c1a6:	b480      	push	{r7}
 800c1a8:	b085      	sub	sp, #20
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	71fb      	strb	r3, [r7, #7]
	open_lin_pid_t result = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_pid_t)(OPEN_LIN_GET_PID_BIT(pid,0) ^ OPEN_LIN_GET_PID_BIT(pid,1) ^
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	085b      	lsrs	r3, r3, #1
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	4053      	eors	r3, r2
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	089b      	lsrs	r3, r3, #2
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	4053      	eors	r3, r2
 800c1c8:	b2da      	uxtb	r2, r3
			 OPEN_LIN_GET_PID_BIT(pid,2) ^ OPEN_LIN_GET_PID_BIT(pid,4)) << OPEN_LIN_P0_FLAG;
 800c1ca:	79fb      	ldrb	r3, [r7, #7]
 800c1cc:	091b      	lsrs	r3, r3, #4
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	4053      	eors	r3, r2
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	019b      	lsls	r3, r3, #6
 800c1d6:	b2db      	uxtb	r3, r3
	result = (open_lin_pid_t)(OPEN_LIN_GET_PID_BIT(pid,0) ^ OPEN_LIN_GET_PID_BIT(pid,1) ^
 800c1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1dc:	73fb      	strb	r3, [r7, #15]

    result |= (open_lin_pid_t)(~(OPEN_LIN_GET_PID_BIT(pid,1) ^ OPEN_LIN_GET_PID_BIT(pid,3) ^
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	085b      	lsrs	r3, r3, #1
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	79fb      	ldrb	r3, [r7, #7]
 800c1e6:	08db      	lsrs	r3, r3, #3
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	4053      	eors	r3, r2
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	091b      	lsrs	r3, r3, #4
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	4053      	eors	r3, r2
 800c1f6:	b2da      	uxtb	r2, r3
    			  OPEN_LIN_GET_PID_BIT(pid,4) ^ OPEN_LIN_GET_PID_BIT(pid,5)) << OPEN_LIN_P1_FLAG);
 800c1f8:	79fb      	ldrb	r3, [r7, #7]
 800c1fa:	095b      	lsrs	r3, r3, #5
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	4053      	eors	r3, r2
 800c200:	b2db      	uxtb	r3, r3
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	b2db      	uxtb	r3, r3
    result |= (open_lin_pid_t)(~(OPEN_LIN_GET_PID_BIT(pid,1) ^ OPEN_LIN_GET_PID_BIT(pid,3) ^
 800c208:	43db      	mvns	r3, r3
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	01db      	lsls	r3, r3, #7
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	4313      	orrs	r3, r2
 800c214:	73fb      	strb	r3, [r7, #15]

    result |= (open_lin_pid_t)(OPEN_LIN_ID_MASK & pid);
 800c216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c21a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c21e:	b25a      	sxtb	r2, r3
 800c220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c224:	4313      	orrs	r3, r2
 800c226:	b25b      	sxtb	r3, r3
 800c228:	73fb      	strb	r3, [r7, #15]
    return result;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <open_lin_data_layer_checksum>:

extern l_u8 classicChecksum;
open_lin_checksum_t open_lin_data_layer_checksum(open_lin_pid_t pid, l_u8 lenght, const l_u8* data_ptr)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	603a      	str	r2, [r7, #0]
 800c242:	71fb      	strb	r3, [r7, #7]
 800c244:	460b      	mov	r3, r1
 800c246:	71bb      	strb	r3, [r7, #6]
	l_u8 i = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	73fb      	strb	r3, [r7, #15]
	l_u16 result;

	/* diagnostic request have classic checksum */
	if ((pid == OPEN_LIN_DIAG_REQUEST) || (pid == OPEN_LIN_DIAG_RESPONSE) || (classicChecksum == 1))
 800c24c:	79fb      	ldrb	r3, [r7, #7]
 800c24e:	2b3c      	cmp	r3, #60	@ 0x3c
 800c250:	d006      	beq.n	800c260 <open_lin_data_layer_checksum+0x28>
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	2b3d      	cmp	r3, #61	@ 0x3d
 800c256:	d003      	beq.n	800c260 <open_lin_data_layer_checksum+0x28>
 800c258:	4b16      	ldr	r3, [pc, #88]	@ (800c2b4 <open_lin_data_layer_checksum+0x7c>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d102      	bne.n	800c266 <open_lin_data_layer_checksum+0x2e>
	{
		result = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	81bb      	strh	r3, [r7, #12]
 800c264:	e005      	b.n	800c272 <open_lin_data_layer_checksum+0x3a>
	} else {
		result = open_lin_data_layer_parity(pid);
 800c266:	79fb      	ldrb	r3, [r7, #7]
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff ff9c 	bl	800c1a6 <open_lin_data_layer_parity>
 800c26e:	4603      	mov	r3, r0
 800c270:	81bb      	strh	r3, [r7, #12]
	}

	for (i = 0; i < lenght; i++)
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]
 800c276:	e010      	b.n	800c29a <open_lin_data_layer_checksum+0x62>
	{
		result += data_ptr[i];
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	4413      	add	r3, r2
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	89bb      	ldrh	r3, [r7, #12]
 800c284:	4413      	add	r3, r2
 800c286:	81bb      	strh	r3, [r7, #12]
		if (result > 0xFF)
 800c288:	89bb      	ldrh	r3, [r7, #12]
 800c28a:	2bff      	cmp	r3, #255	@ 0xff
 800c28c:	d902      	bls.n	800c294 <open_lin_data_layer_checksum+0x5c>
		{
			result -= 0xFF;
 800c28e:	89bb      	ldrh	r3, [r7, #12]
 800c290:	3bff      	subs	r3, #255	@ 0xff
 800c292:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < lenght; i++)
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	3301      	adds	r3, #1
 800c298:	73fb      	strb	r3, [r7, #15]
 800c29a:	7bfa      	ldrb	r2, [r7, #15]
 800c29c:	79bb      	ldrb	r3, [r7, #6]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d3ea      	bcc.n	800c278 <open_lin_data_layer_checksum+0x40>
		} else
		{
			/* do nothing */
		}
	}
	return (open_lin_checksum_t)(~result);
 800c2a2:	89bb      	ldrh	r3, [r7, #12]
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	43db      	mvns	r3, r3
 800c2a8:	b2db      	uxtb	r3, r3
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000396 	.word	0x20000396

0800c2b8 <open_lin_master_goto_idle>:
static void open_lin_master_goto_idle(l_bool next_item);
static void data_layer_next_item(void);
static t_master_frame_table_item* get_current_item(void);

static void open_lin_master_goto_idle(l_bool next_item)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	71fb      	strb	r3, [r7, #7]
	master_rx_count = 0;
 800c2c2:	4b09      	ldr	r3, [pc, #36]	@ (800c2e8 <open_lin_master_goto_idle+0x30>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	701a      	strb	r2, [r3, #0]
	lin_master_state = OPEN_LIN_MASTER_IDLE;
 800c2c8:	4b08      	ldr	r3, [pc, #32]	@ (800c2ec <open_lin_master_goto_idle+0x34>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	701a      	strb	r2, [r3, #0]
	time_passed_since_last_frame_ms = 0;
 800c2ce:	4b08      	ldr	r3, [pc, #32]	@ (800c2f0 <open_lin_master_goto_idle+0x38>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	801a      	strh	r2, [r3, #0]
	if (next_item)
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <open_lin_master_goto_idle+0x26>
	{
		data_layer_next_item();
 800c2da:	f000 f839 	bl	800c350 <data_layer_next_item>
	} else {
		/* do nothing */
	}
}
 800c2de:	bf00      	nop
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	2000172d 	.word	0x2000172d
 800c2ec:	2000172c 	.word	0x2000172c
 800c2f0:	20001736 	.word	0x20001736

0800c2f4 <open_lin_master_dl_init>:


void open_lin_master_dl_init(t_master_frame_table_item *p_master_frame_table, l_u8 p_master_frame_table_size)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
	master_frame_table = p_master_frame_table;
 800c300:	4a06      	ldr	r2, [pc, #24]	@ (800c31c <open_lin_master_dl_init+0x28>)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6013      	str	r3, [r2, #0]
	master_frame_table_size = p_master_frame_table_size;
 800c306:	4a06      	ldr	r2, [pc, #24]	@ (800c320 <open_lin_master_dl_init+0x2c>)
 800c308:	78fb      	ldrb	r3, [r7, #3]
 800c30a:	7013      	strb	r3, [r2, #0]
	open_lin_master_goto_idle(l_false);
 800c30c:	2000      	movs	r0, #0
 800c30e:	f7ff ffd3 	bl	800c2b8 <open_lin_master_goto_idle>
}
 800c312:	bf00      	nop
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20001730 	.word	0x20001730
 800c320:	20001734 	.word	0x20001734

0800c324 <get_current_item>:

static t_master_frame_table_item* get_current_item(void)
{
 800c324:	b480      	push	{r7}
 800c326:	af00      	add	r7, sp, #0
	return &(master_frame_table[master_table_index]);
 800c328:	4b07      	ldr	r3, [pc, #28]	@ (800c348 <get_current_item+0x24>)
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	4b07      	ldr	r3, [pc, #28]	@ (800c34c <get_current_item+0x28>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	4619      	mov	r1, r3
 800c332:	460b      	mov	r3, r1
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	440b      	add	r3, r1
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4413      	add	r3, r2
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	20001730 	.word	0x20001730
 800c34c:	2000172e 	.word	0x2000172e

0800c350 <data_layer_next_item>:

static void data_layer_next_item(void)
{
 800c350:	b480      	push	{r7}
 800c352:	af00      	add	r7, sp, #0

	if (master_table_index >= (l_u8)(master_frame_table_size - 1u))
 800c354:	4b0b      	ldr	r3, [pc, #44]	@ (800c384 <data_layer_next_item+0x34>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	3b01      	subs	r3, #1
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	4b0a      	ldr	r3, [pc, #40]	@ (800c388 <data_layer_next_item+0x38>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	429a      	cmp	r2, r3
 800c362:	d803      	bhi.n	800c36c <data_layer_next_item+0x1c>
	{
		master_table_index = 0;
 800c364:	4b08      	ldr	r3, [pc, #32]	@ (800c388 <data_layer_next_item+0x38>)
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
	} else {
		master_table_index ++;
	}
}
 800c36a:	e005      	b.n	800c378 <data_layer_next_item+0x28>
		master_table_index ++;
 800c36c:	4b06      	ldr	r3, [pc, #24]	@ (800c388 <data_layer_next_item+0x38>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	3301      	adds	r3, #1
 800c372:	b2da      	uxtb	r2, r3
 800c374:	4b04      	ldr	r3, [pc, #16]	@ (800c388 <data_layer_next_item+0x38>)
 800c376:	701a      	strb	r2, [r3, #0]
}
 800c378:	bf00      	nop
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	20001734 	.word	0x20001734
 800c388:	2000172e 	.word	0x2000172e

0800c38c <open_lin_master_data_tx_header>:


l_bool open_lin_master_data_tx_header(open_lin_frame_slot_t  *slot)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
	l_bool result = l_true;
 800c394:	2301      	movs	r3, #1
 800c396:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_hw_tx_break()) && result;
 800c398:	f7ff fed0 	bl	800c13c <open_lin_hw_tx_break>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d004      	beq.n	800c3ac <open_lin_master_data_tx_header+0x20>
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d001      	beq.n	800c3ac <open_lin_master_data_tx_header+0x20>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e000      	b.n	800c3ae <open_lin_master_data_tx_header+0x22>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	73fb      	strb	r3, [r7, #15]
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_hw_tx_byte(0x55)) && result;
 800c3b8:	2055      	movs	r0, #85	@ 0x55
 800c3ba:	f7ff fea7 	bl	800c10c <open_lin_hw_tx_byte>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <open_lin_master_data_tx_header+0x42>
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <open_lin_master_data_tx_header+0x42>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e000      	b.n	800c3d0 <open_lin_master_data_tx_header+0x44>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_hw_tx_byte(open_lin_data_layer_parity(slot->pid))) && result;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fee1 	bl	800c1a6 <open_lin_data_layer_parity>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff fe90 	bl	800c10c <open_lin_hw_tx_byte>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d004      	beq.n	800c3fc <open_lin_master_data_tx_header+0x70>
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <open_lin_master_data_tx_header+0x70>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e000      	b.n	800c3fe <open_lin_master_data_tx_header+0x72>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	f003 0301 	and.w	r3, r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
	return result;
 800c408:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <open_lin_master_data_tx_data>:

l_bool open_lin_master_data_tx_data(open_lin_frame_slot_t *slot)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
	l_u8 i = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73fb      	strb	r3, [r7, #15]
	l_bool result = l_true;
 800c41e:	2301      	movs	r3, #1
 800c420:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < slot->data_length; i++)
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]
 800c426:	e018      	b.n	800c45a <open_lin_master_data_tx_data+0x48>
	{
		result = (open_lin_hw_tx_byte(slot->data_ptr[i])) && result;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	4413      	add	r3, r2
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff fe6a 	bl	800c10c <open_lin_hw_tx_byte>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d004      	beq.n	800c448 <open_lin_master_data_tx_data+0x36>
 800c43e:	7bbb      	ldrb	r3, [r7, #14]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <open_lin_master_data_tx_data+0x36>
 800c444:	2301      	movs	r3, #1
 800c446:	e000      	b.n	800c44a <open_lin_master_data_tx_data+0x38>
 800c448:	2300      	movs	r3, #0
 800c44a:	73bb      	strb	r3, [r7, #14]
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	f003 0301 	and.w	r3, r3, #1
 800c452:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < slot->data_length; i++)
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	3301      	adds	r3, #1
 800c458:	73fb      	strb	r3, [r7, #15]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	789b      	ldrb	r3, [r3, #2]
 800c45e:	7bfa      	ldrb	r2, [r7, #15]
 800c460:	429a      	cmp	r2, r3
 800c462:	d3e1      	bcc.n	800c428 <open_lin_master_data_tx_data+0x16>
	}

	result = (open_lin_hw_tx_byte(open_lin_data_layer_checksum(slot->pid, slot->data_length, slot->data_ptr))) && result;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	7818      	ldrb	r0, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	7899      	ldrb	r1, [r3, #2]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	461a      	mov	r2, r3
 800c472:	f7ff fee1 	bl	800c238 <open_lin_data_layer_checksum>
 800c476:	4603      	mov	r3, r0
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff fe47 	bl	800c10c <open_lin_hw_tx_byte>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <open_lin_master_data_tx_data+0x7c>
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <open_lin_master_data_tx_data+0x7c>
 800c48a:	2301      	movs	r3, #1
 800c48c:	e000      	b.n	800c490 <open_lin_master_data_tx_data+0x7e>
 800c48e:	2300      	movs	r3, #0
 800c490:	73bb      	strb	r3, [r7, #14]
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	73bb      	strb	r3, [r7, #14]
	return result;
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3710      	adds	r7, #16
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <open_lin_master_dl_rx>:

l_bool open_lin_master_dl_rx(l_u8 rx_byte)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	71fb      	strb	r3, [r7, #7]
	open_lin_frame_slot_t* slot = &(get_current_item()->slot);
 800c4ae:	f7ff ff39 	bl	800c324 <get_current_item>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	60bb      	str	r3, [r7, #8]
	static l_u8 frame_tmp_buffer[OPEN_LIN_MAX_FRAME_LENGTH];
	l_bool pending = false;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73fb      	strb	r3, [r7, #15]

	if (lin_master_state == OPEN_LIN_MASTER_DATA_RX)
 800c4bc:	4b1e      	ldr	r3, [pc, #120]	@ (800c538 <open_lin_master_dl_rx+0x94>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d133      	bne.n	800c52c <open_lin_master_dl_rx+0x88>
	{
		if (master_rx_count < slot->data_length)
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	789a      	ldrb	r2, [r3, #2]
 800c4c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c53c <open_lin_master_dl_rx+0x98>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d90e      	bls.n	800c4ee <open_lin_master_dl_rx+0x4a>
		{
			frame_tmp_buffer[master_rx_count] = rx_byte;
 800c4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c53c <open_lin_master_dl_rx+0x98>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4a1a      	ldr	r2, [pc, #104]	@ (800c540 <open_lin_master_dl_rx+0x9c>)
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	5453      	strb	r3, [r2, r1]
			master_rx_count ++;
 800c4dc:	4b17      	ldr	r3, [pc, #92]	@ (800c53c <open_lin_master_dl_rx+0x98>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	4b15      	ldr	r3, [pc, #84]	@ (800c53c <open_lin_master_dl_rx+0x98>)
 800c4e6:	701a      	strb	r2, [r3, #0]
			pending = l_true;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	73fb      	strb	r3, [r7, #15]
 800c4ec:	e01e      	b.n	800c52c <open_lin_master_dl_rx+0x88>
		} else
		{
			if (rx_byte == open_lin_data_layer_checksum(slot->pid,slot->data_length,frame_tmp_buffer))
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	7818      	ldrb	r0, [r3, #0]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	789b      	ldrb	r3, [r3, #2]
 800c4f6:	4a12      	ldr	r2, [pc, #72]	@ (800c540 <open_lin_master_dl_rx+0x9c>)
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	f7ff fe9d 	bl	800c238 <open_lin_data_layer_checksum>
 800c4fe:	4603      	mov	r3, r0
 800c500:	461a      	mov	r2, r3
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	4293      	cmp	r3, r2
 800c506:	d10b      	bne.n	800c520 <open_lin_master_dl_rx+0x7c>
			{
				(void)open_lin_memcpy(slot->data_ptr,frame_tmp_buffer,slot->data_length);
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6858      	ldr	r0, [r3, #4]
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	789b      	ldrb	r3, [r3, #2]
 800c510:	461a      	mov	r2, r3
 800c512:	490b      	ldr	r1, [pc, #44]	@ (800c540 <open_lin_master_dl_rx+0x9c>)
 800c514:	f000 fa4c 	bl	800c9b0 <memcpy>
				open_lin_master_dl_rx_callback(slot);
 800c518:	68b8      	ldr	r0, [r7, #8]
 800c51a:	f7ff fe39 	bl	800c190 <open_lin_master_dl_rx_callback>
 800c51e:	e002      	b.n	800c526 <open_lin_master_dl_rx+0x82>
			} else
			{
				open_lin_error_handler(OPEN_LIN_MASTER_ERROR_CHECKSUM);
 800c520:	2008      	movs	r0, #8
 800c522:	f7ff fd89 	bl	800c038 <open_lin_error_handler>
			}
			open_lin_master_goto_idle(l_true);
 800c526:	2001      	movs	r0, #1
 800c528:	f7ff fec6 	bl	800c2b8 <open_lin_master_goto_idle>
		}
	}
	return pending;
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	2000172c 	.word	0x2000172c
 800c53c:	2000172d 	.word	0x2000172d
 800c540:	2000173c 	.word	0x2000173c

0800c544 <open_lin_master_dl_handler>:

l_u8 diagnostic_slot = 0;

void open_lin_master_dl_handler(l_u8 ms_passed)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	71fb      	strb	r3, [r7, #7]
	t_master_frame_table_item* master_table_item = get_current_item();
 800c54e:	f7ff fee9 	bl	800c324 <get_current_item>
 800c552:	60f8      	str	r0, [r7, #12]
	if (master_frame_table_size > 0u)
 800c554:	4b46      	ldr	r3, [pc, #280]	@ (800c670 <open_lin_master_dl_handler+0x12c>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 8085 	beq.w	800c668 <open_lin_master_dl_handler+0x124>
	{
		if ((master_table_item->slot.pid == OPEN_LIN_DIAG_REQUEST) || (master_table_item->slot.pid == OPEN_LIN_DIAG_RESPONSE) )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	791b      	ldrb	r3, [r3, #4]
 800c562:	2b3c      	cmp	r3, #60	@ 0x3c
 800c564:	d003      	beq.n	800c56e <open_lin_master_dl_handler+0x2a>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	791b      	ldrb	r3, [r3, #4]
 800c56a:	2b3d      	cmp	r3, #61	@ 0x3d
 800c56c:	d108      	bne.n	800c580 <open_lin_master_dl_handler+0x3c>
		{
			if (diagnostic_slot == 0)
 800c56e:	4b41      	ldr	r3, [pc, #260]	@ (800c674 <open_lin_master_dl_handler+0x130>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d104      	bne.n	800c580 <open_lin_master_dl_handler+0x3c>
			{
				data_layer_next_item();
 800c576:	f7ff feeb 	bl	800c350 <data_layer_next_item>
				master_table_item = get_current_item();
 800c57a:	f7ff fed3 	bl	800c324 <get_current_item>
 800c57e:	60f8      	str	r0, [r7, #12]
			}
		}
		time_passed_since_last_frame_ms += ms_passed;
 800c580:	79fb      	ldrb	r3, [r7, #7]
 800c582:	b29a      	uxth	r2, r3
 800c584:	4b3c      	ldr	r3, [pc, #240]	@ (800c678 <open_lin_master_dl_handler+0x134>)
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	4413      	add	r3, r2
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	4b3a      	ldr	r3, [pc, #232]	@ (800c678 <open_lin_master_dl_handler+0x134>)
 800c58e:	801a      	strh	r2, [r3, #0]
		if (lin_master_state == OPEN_LIN_MASTER_IDLE)
 800c590:	4b3a      	ldr	r3, [pc, #232]	@ (800c67c <open_lin_master_dl_handler+0x138>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d134      	bne.n	800c602 <open_lin_master_dl_handler+0xbe>
		{
			if ((master_table_item->offset_ms) < time_passed_since_last_frame_ms)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	461a      	mov	r2, r3
 800c59e:	4b36      	ldr	r3, [pc, #216]	@ (800c678 <open_lin_master_dl_handler+0x134>)
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d22d      	bcs.n	800c602 <open_lin_master_dl_handler+0xbe>
			{
				if ((master_table_item->slot.pid == OPEN_LIN_DIAG_REQUEST) || (master_table_item->slot.pid == OPEN_LIN_DIAG_RESPONSE) )
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	791b      	ldrb	r3, [r3, #4]
 800c5aa:	2b3c      	cmp	r3, #60	@ 0x3c
 800c5ac:	d003      	beq.n	800c5b6 <open_lin_master_dl_handler+0x72>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	791b      	ldrb	r3, [r3, #4]
 800c5b2:	2b3d      	cmp	r3, #61	@ 0x3d
 800c5b4:	d102      	bne.n	800c5bc <open_lin_master_dl_handler+0x78>
					diagnostic_slot = 0;
 800c5b6:	4b2f      	ldr	r3, [pc, #188]	@ (800c674 <open_lin_master_dl_handler+0x130>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	701a      	strb	r2, [r3, #0]
				time_passed_since_last_frame_ms = 0;
 800c5bc:	4b2e      	ldr	r3, [pc, #184]	@ (800c678 <open_lin_master_dl_handler+0x134>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	801a      	strh	r2, [r3, #0]
				if (open_lin_master_data_tx_header(&master_table_item->slot) == l_true)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7ff fee0 	bl	800c38c <open_lin_master_data_tx_header>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d011      	beq.n	800c5f6 <open_lin_master_dl_handler+0xb2>
				{
					if (master_table_item->slot.frame_type == OPEN_LIN_FRAME_TYPE_TRANSMIT)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	795b      	ldrb	r3, [r3, #5]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d103      	bne.n	800c5e2 <open_lin_master_dl_handler+0x9e>
					{
						lin_master_state = OPEN_LIN_MASTER_TX_DATA;
 800c5da:	4b28      	ldr	r3, [pc, #160]	@ (800c67c <open_lin_master_dl_handler+0x138>)
 800c5dc:	2202      	movs	r2, #2
 800c5de:	701a      	strb	r2, [r3, #0]
 800c5e0:	e00f      	b.n	800c602 <open_lin_master_dl_handler+0xbe>
					} else
					{
						lin_master_state = OPEN_LIN_MASTER_DATA_RX;
 800c5e2:	4b26      	ldr	r3, [pc, #152]	@ (800c67c <open_lin_master_dl_handler+0x138>)
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	701a      	strb	r2, [r3, #0]
						master_rx_count = 0;
 800c5e8:	4b25      	ldr	r3, [pc, #148]	@ (800c680 <open_lin_master_dl_handler+0x13c>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	701a      	strb	r2, [r3, #0]
						open_lin_set_rx_enabled(true);
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	f7ff fd72 	bl	800c0d8 <open_lin_set_rx_enabled>
 800c5f4:	e005      	b.n	800c602 <open_lin_master_dl_handler+0xbe>
					}
				} else
				{
					open_lin_error_handler(OPEN_LIN_MASTER_ERROR_HEADER_TX);
 800c5f6:	2009      	movs	r0, #9
 800c5f8:	f7ff fd1e 	bl	800c038 <open_lin_error_handler>
					lin_master_state = OPEN_LIN_MASTER_IDLE;
 800c5fc:	4b1f      	ldr	r3, [pc, #124]	@ (800c67c <open_lin_master_dl_handler+0x138>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	701a      	strb	r2, [r3, #0]
			}
		} else
		{
			/* do nothing */
		}
		switch (lin_master_state)
 800c602:	4b1e      	ldr	r3, [pc, #120]	@ (800c67c <open_lin_master_dl_handler+0x138>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b02      	cmp	r3, #2
 800c608:	d018      	beq.n	800c63c <open_lin_master_dl_handler+0xf8>
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	dc29      	bgt.n	800c662 <open_lin_master_dl_handler+0x11e>
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <open_lin_master_dl_handler+0xd4>
 800c612:	2b01      	cmp	r3, #1
 800c614:	d004      	beq.n	800c620 <open_lin_master_dl_handler+0xdc>
				}
				break;
			}
			default:
				/* do nothing */
				break;
 800c616:	e024      	b.n	800c662 <open_lin_master_dl_handler+0x11e>
				open_lin_set_rx_enabled(false);
 800c618:	2000      	movs	r0, #0
 800c61a:	f7ff fd5d 	bl	800c0d8 <open_lin_set_rx_enabled>
				break;
 800c61e:	e023      	b.n	800c668 <open_lin_master_dl_handler+0x124>
				if (time_passed_since_last_frame_ms > master_table_item->response_wait_ms)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	785b      	ldrb	r3, [r3, #1]
 800c624:	461a      	mov	r2, r3
 800c626:	4b14      	ldr	r3, [pc, #80]	@ (800c678 <open_lin_master_dl_handler+0x134>)
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d21b      	bcs.n	800c666 <open_lin_master_dl_handler+0x122>
					open_lin_error_handler(OPEN_LIN_MASTER_ERROR_DATA_RX_TIMEOUT);
 800c62e:	200c      	movs	r0, #12
 800c630:	f7ff fd02 	bl	800c038 <open_lin_error_handler>
					open_lin_master_goto_idle(l_true);
 800c634:	2001      	movs	r0, #1
 800c636:	f7ff fe3f 	bl	800c2b8 <open_lin_master_goto_idle>
				break;
 800c63a:	e014      	b.n	800c666 <open_lin_master_dl_handler+0x122>
				if (open_lin_master_data_tx_data(&master_table_item->slot) == l_true)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	3304      	adds	r3, #4
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff fee6 	bl	800c412 <open_lin_master_data_tx_data>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d003      	beq.n	800c654 <open_lin_master_dl_handler+0x110>
					open_lin_master_goto_idle(l_true);
 800c64c:	2001      	movs	r0, #1
 800c64e:	f7ff fe33 	bl	800c2b8 <open_lin_master_goto_idle>
				break;
 800c652:	e009      	b.n	800c668 <open_lin_master_dl_handler+0x124>
					open_lin_error_handler(OPEN_LIN_MASTER_ERROR_DATA_TX);
 800c654:	200a      	movs	r0, #10
 800c656:	f7ff fcef 	bl	800c038 <open_lin_error_handler>
					lin_master_state = OPEN_LIN_MASTER_IDLE;
 800c65a:	4b08      	ldr	r3, [pc, #32]	@ (800c67c <open_lin_master_dl_handler+0x138>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]
				break;
 800c660:	e002      	b.n	800c668 <open_lin_master_dl_handler+0x124>
				break;
 800c662:	bf00      	nop
 800c664:	e000      	b.n	800c668 <open_lin_master_dl_handler+0x124>
				break;
 800c666:	bf00      	nop
		}
	} else {
		/* empty master table do nothing */
	}
}
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	20001734 	.word	0x20001734
 800c674:	20001738 	.word	0x20001738
 800c678:	20001736 	.word	0x20001736
 800c67c:	2000172c 	.word	0x2000172c
 800c680:	2000172d 	.word	0x2000172d

0800c684 <open_lin_net_init>:
static t_master_frame_table_item* slot_array;
static l_u8 slot_array_len;


void open_lin_net_init(t_master_frame_table_item *a_slot_array, l_u8 a_slot_array_len)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	460b      	mov	r3, r1
 800c68e:	70fb      	strb	r3, [r7, #3]
	slot_array = a_slot_array;
 800c690:	4a06      	ldr	r2, [pc, #24]	@ (800c6ac <open_lin_net_init+0x28>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6013      	str	r3, [r2, #0]
	slot_array_len = a_slot_array_len;
 800c696:	4a06      	ldr	r2, [pc, #24]	@ (800c6b0 <open_lin_net_init+0x2c>)
 800c698:	78fb      	ldrb	r3, [r7, #3]
 800c69a:	7013      	strb	r3, [r2, #0]
	open_lin_set_rx_enabled(true);
 800c69c:	2001      	movs	r0, #1
 800c69e:	f7ff fd1b 	bl	800c0d8 <open_lin_set_rx_enabled>
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20001744 	.word	0x20001744
 800c6b0:	20001748 	.word	0x20001748

0800c6b4 <open_lin_net_get_slot>:
#ifdef OPEN_LIN_DYNAMIC_IDS
	extern open_lin_id_translation_item_t open_lin_id_translation_tab[];
#endif

open_lin_frame_slot_t* open_lin_net_get_slot(open_lin_pid_t pid)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	71fb      	strb	r3, [r7, #7]
	open_lin_frame_slot_t *result = OPEN_LIN_NET_SLOT_EMPTY;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	72fb      	strb	r3, [r7, #11]
        return result; /* MISRA violation */
    } else {
        /* do nothing */
    }
#endif
	for(i = 0; i < (slot_array_len); i++)
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	72fb      	strb	r3, [r7, #11]
 800c6ca:	e019      	b.n	800c700 <open_lin_net_get_slot+0x4c>
	{
		if (slot_array[i].slot.pid == pid){
 800c6cc:	4b12      	ldr	r3, [pc, #72]	@ (800c718 <open_lin_net_get_slot+0x64>)
 800c6ce:	6819      	ldr	r1, [r3, #0]
 800c6d0:	7afa      	ldrb	r2, [r7, #11]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	440b      	add	r3, r1
 800c6dc:	791b      	ldrb	r3, [r3, #4]
 800c6de:	79fa      	ldrb	r2, [r7, #7]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d10a      	bne.n	800c6fa <open_lin_net_get_slot+0x46>
			result = &slot_array[i].slot;
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c718 <open_lin_net_get_slot+0x64>)
 800c6e6:	6819      	ldr	r1, [r3, #0]
 800c6e8:	7afa      	ldrb	r2, [r7, #11]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	005b      	lsls	r3, r3, #1
 800c6ee:	4413      	add	r3, r2
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	440b      	add	r3, r1
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	60fb      	str	r3, [r7, #12]
			break;
 800c6f8:	e007      	b.n	800c70a <open_lin_net_get_slot+0x56>
	for(i = 0; i < (slot_array_len); i++)
 800c6fa:	7afb      	ldrb	r3, [r7, #11]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	72fb      	strb	r3, [r7, #11]
 800c700:	4b06      	ldr	r3, [pc, #24]	@ (800c71c <open_lin_net_get_slot+0x68>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	7afa      	ldrb	r2, [r7, #11]
 800c706:	429a      	cmp	r2, r3
 800c708:	d3e0      	bcc.n	800c6cc <open_lin_net_get_slot+0x18>
		{
			/* do nothing */
		}
	}

	return result;
 800c70a:	68fb      	ldr	r3, [r7, #12]
};
 800c70c:	4618      	mov	r0, r3
 800c70e:	3714      	adds	r7, #20
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr
 800c718:	20001744 	.word	0x20001744
 800c71c:	20001748 	.word	0x20001748

0800c720 <open_lin_net_rx_handler>:

void open_lin_net_rx_handler(open_lin_pid_t pid) {
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
	open_lin_frame_slot_t* slot = open_lin_net_get_slot(pid);
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7ff ffc1 	bl	800c6b4 <open_lin_net_get_slot>
 800c732:	60f8      	str	r0, [r7, #12]
	open_lin_on_rx_frame(slot);
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7f4 f88d 	bl	8000854 <open_lin_on_rx_frame>
};
 800c73a:	bf00      	nop
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <open_lin_slave_set_lin_frame>:

static t_open_lin_slave_state open_lin_slave_state;

static l_u8 open_lin_slave_state_data_count;

static l_bool open_lin_slave_set_lin_frame(t_open_lin_data_layer_frame *frame){
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	l_bool result = false;
 800c74c:	2300      	movs	r3, #0
 800c74e:	73fb      	strb	r3, [r7, #15]
	open_lin_frame_slot_t *frame_slot = open_lin_net_get_slot(frame->pid);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	4618      	mov	r0, r3
 800c756:	f7ff ffad 	bl	800c6b4 <open_lin_net_get_slot>
 800c75a:	60b8      	str	r0, [r7, #8]
	if (frame_slot != OPEN_LIN_NET_SLOT_EMPTY)
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d014      	beq.n	800c78c <open_lin_slave_set_lin_frame+0x48>
	{
		frame->lenght = frame_slot->data_length;
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	789a      	ldrb	r2, [r3, #2]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	705a      	strb	r2, [r3, #1]
		frame->data_ptr = frame_slot->data_ptr;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	605a      	str	r2, [r3, #4]
		if (frame_slot->frame_type == OPEN_LIN_FRAME_TYPE_TRANSMIT)
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	785b      	ldrb	r3, [r3, #1]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d103      	bne.n	800c782 <open_lin_slave_set_lin_frame+0x3e>
		{
			open_lin_slave_state = OPEN_LIN_SLAVE_DATA_TX;
 800c77a:	4b07      	ldr	r3, [pc, #28]	@ (800c798 <open_lin_slave_set_lin_frame+0x54>)
 800c77c:	2204      	movs	r2, #4
 800c77e:	701a      	strb	r2, [r3, #0]
 800c780:	e002      	b.n	800c788 <open_lin_slave_set_lin_frame+0x44>
		} else
		{
			open_lin_slave_state = OPEN_LIN_SLAVE_DATA_RX;
 800c782:	4b05      	ldr	r3, [pc, #20]	@ (800c798 <open_lin_slave_set_lin_frame+0x54>)
 800c784:	2203      	movs	r2, #3
 800c786:	701a      	strb	r2, [r3, #0]
		}
		result = true;
 800c788:	2301      	movs	r3, #1
 800c78a:	73fb      	strb	r3, [r7, #15]
	} else
	{
		/* do nothing */
	}
	return result;
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	20001749 	.word	0x20001749

0800c79c <open_lin_slave_reset>:
void open_lin_slave_init(void)
{
	open_lin_slave_reset();
}

void open_lin_slave_reset(void){
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
	open_lin_slave_state = OPEN_LIN_SLAVE_IDLE;
 800c7a0:	4b05      	ldr	r3, [pc, #20]	@ (800c7b8 <open_lin_slave_reset+0x1c>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	701a      	strb	r2, [r3, #0]
	open_lin_slave_state_data_count = 0;
 800c7a6:	4b05      	ldr	r3, [pc, #20]	@ (800c7bc <open_lin_slave_reset+0x20>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	701a      	strb	r2, [r3, #0]
}
 800c7ac:	bf00      	nop
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	20001749 	.word	0x20001749
 800c7bc:	2000174a 	.word	0x2000174a

0800c7c0 <open_lin_slave_rx_header>:

void open_lin_slave_rx_header(l_u8 rx_byte)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	71fb      	strb	r3, [r7, #7]
	static t_open_lin_data_layer_frame open_lin_data_layer_frame;
	static l_u8 open_lin_slave_data_buff[OPEN_LIN_MAX_FRAME_LENGTH];

	if (open_lin_hw_check_for_break() == l_true)
 800c7ca:	f7ff fc41 	bl	800c050 <open_lin_hw_check_for_break>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00c      	beq.n	800c7ee <open_lin_slave_rx_header+0x2e>
	{
		if (open_lin_slave_state != OPEN_LIN_SLAVE_IDLE)
 800c7d4:	4b5b      	ldr	r3, [pc, #364]	@ (800c944 <open_lin_slave_rx_header+0x184>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <open_lin_slave_rx_header+0x22>
		{
			open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_BREAK); /* break should be received only in IDLE state */
 800c7dc:	2005      	movs	r0, #5
 800c7de:	f7ff fc2b 	bl	800c038 <open_lin_error_handler>
		} else {
			/* do nothing, go to SYNC rx anyway*/
		}
        #ifdef OPEN_LIN_HW_BREAK_IS_SYNCH_BYTE
        open_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 800c7e2:	4b58      	ldr	r3, [pc, #352]	@ (800c944 <open_lin_slave_rx_header+0x184>)
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	701a      	strb	r2, [r3, #0]
        #else
		open_lin_slave_state = OPEN_LIN_SLAVE_SYNC_RX;
        #endif
        #ifdef OPEN_LIN_AUTO_BAUND
			open_lin_hw_set_auto_baud();
 800c7e8:	f7ff fc52 	bl	800c090 <open_lin_hw_set_auto_baud>
				open_lin_slave_reset();
				open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_DATA_RX);
				break;
		}
	}
}
 800c7ec:	e0a6      	b.n	800c93c <open_lin_slave_rx_header+0x17c>
		switch (open_lin_slave_state){
 800c7ee:	4b55      	ldr	r3, [pc, #340]	@ (800c944 <open_lin_slave_rx_header+0x184>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	d067      	beq.n	800c8c6 <open_lin_slave_rx_header+0x106>
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	f300 8099 	bgt.w	800c92e <open_lin_slave_rx_header+0x16e>
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d002      	beq.n	800c806 <open_lin_slave_rx_header+0x46>
 800c800:	2b02      	cmp	r3, #2
 800c802:	d00d      	beq.n	800c820 <open_lin_slave_rx_header+0x60>
 800c804:	e093      	b.n	800c92e <open_lin_slave_rx_header+0x16e>
				if (rx_byte != OPEN_LIN_SYNCH_BYTE)
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	2b55      	cmp	r3, #85	@ 0x55
 800c80a:	d005      	beq.n	800c818 <open_lin_slave_rx_header+0x58>
					open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_SYNCH);
 800c80c:	2004      	movs	r0, #4
 800c80e:	f7ff fc13 	bl	800c038 <open_lin_error_handler>
					open_lin_slave_reset();
 800c812:	f7ff ffc3 	bl	800c79c <open_lin_slave_reset>
 800c816:	e003      	b.n	800c820 <open_lin_slave_rx_header+0x60>
					open_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 800c818:	4b4a      	ldr	r3, [pc, #296]	@ (800c944 <open_lin_slave_rx_header+0x184>)
 800c81a:	2202      	movs	r2, #2
 800c81c:	701a      	strb	r2, [r3, #0]
                    break;
 800c81e:	e08d      	b.n	800c93c <open_lin_slave_rx_header+0x17c>
				if (open_lin_data_layer_parity(rx_byte) == rx_byte)
 800c820:	79fb      	ldrb	r3, [r7, #7]
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff fcbf 	bl	800c1a6 <open_lin_data_layer_parity>
 800c828:	4603      	mov	r3, r0
 800c82a:	461a      	mov	r2, r3
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	4293      	cmp	r3, r2
 800c830:	d106      	bne.n	800c840 <open_lin_slave_rx_header+0x80>
					open_lin_data_layer_frame.pid = (open_lin_pid_t)(rx_byte & OPEN_LIN_ID_MASK);
 800c832:	79fb      	ldrb	r3, [r7, #7]
 800c834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	4b43      	ldr	r3, [pc, #268]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	e004      	b.n	800c84a <open_lin_slave_rx_header+0x8a>
					open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_PID_PARITY);
 800c840:	2003      	movs	r0, #3
 800c842:	f7ff fbf9 	bl	800c038 <open_lin_error_handler>
					open_lin_slave_reset();
 800c846:	f7ff ffa9 	bl	800c79c <open_lin_slave_reset>
				if (open_lin_slave_set_lin_frame(&open_lin_data_layer_frame) == true)
 800c84a:	483f      	ldr	r0, [pc, #252]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c84c:	f7ff ff7a 	bl	800c744 <open_lin_slave_set_lin_frame>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d031      	beq.n	800c8ba <open_lin_slave_rx_header+0xfa>
					if (open_lin_slave_state == OPEN_LIN_SLAVE_DATA_TX)
 800c856:	4b3b      	ldr	r3, [pc, #236]	@ (800c944 <open_lin_slave_rx_header+0x184>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	d16d      	bne.n	800c93a <open_lin_slave_rx_header+0x17a>
						open_lin_data_layer_frame.checksum = open_lin_data_layer_checksum(open_lin_data_layer_frame.pid,
 800c85e:	4b3a      	ldr	r3, [pc, #232]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	4a39      	ldr	r2, [pc, #228]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c864:	7851      	ldrb	r1, [r2, #1]
																open_lin_data_layer_frame.lenght, open_lin_data_layer_frame.data_ptr);
 800c866:	4a38      	ldr	r2, [pc, #224]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c868:	6852      	ldr	r2, [r2, #4]
						open_lin_data_layer_frame.checksum = open_lin_data_layer_checksum(open_lin_data_layer_frame.pid,
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff fce4 	bl	800c238 <open_lin_data_layer_checksum>
 800c870:	4603      	mov	r3, r0
 800c872:	461a      	mov	r2, r3
 800c874:	4b34      	ldr	r3, [pc, #208]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c876:	721a      	strb	r2, [r3, #8]
						if ((open_lin_hw_tx_data(open_lin_data_layer_frame.data_ptr, open_lin_data_layer_frame.lenght) == l_false) ||
 800c878:	4b33      	ldr	r3, [pc, #204]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	4a32      	ldr	r2, [pc, #200]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c87e:	7852      	ldrb	r2, [r2, #1]
 800c880:	4611      	mov	r1, r2
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fc6a 	bl	800c15c <open_lin_hw_tx_data>
 800c888:	4603      	mov	r3, r0
 800c88a:	f083 0301 	eor.w	r3, r3, #1
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <open_lin_slave_rx_header+0xe8>
						   (open_lin_hw_tx_data(&open_lin_data_layer_frame.checksum, (l_u8)sizeof(open_lin_data_layer_frame.checksum)) == l_false))
 800c894:	2101      	movs	r1, #1
 800c896:	482d      	ldr	r0, [pc, #180]	@ (800c94c <open_lin_slave_rx_header+0x18c>)
 800c898:	f7ff fc60 	bl	800c15c <open_lin_hw_tx_data>
 800c89c:	4603      	mov	r3, r0
 800c89e:	f083 0301 	eor.w	r3, r3, #1
 800c8a2:	b2db      	uxtb	r3, r3
						if ((open_lin_hw_tx_data(open_lin_data_layer_frame.data_ptr, open_lin_data_layer_frame.lenght) == l_false) ||
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d005      	beq.n	800c8b4 <open_lin_slave_rx_header+0xf4>
							open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_HW_TX);
 800c8a8:	2007      	movs	r0, #7
 800c8aa:	f7ff fbc5 	bl	800c038 <open_lin_error_handler>
							open_lin_slave_reset();
 800c8ae:	f7ff ff75 	bl	800c79c <open_lin_slave_reset>
						break;
 800c8b2:	e043      	b.n	800c93c <open_lin_slave_rx_header+0x17c>
							open_lin_slave_reset();
 800c8b4:	f7ff ff72 	bl	800c79c <open_lin_slave_reset>
						break;
 800c8b8:	e040      	b.n	800c93c <open_lin_slave_rx_header+0x17c>
					open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_ID_NOT_FOUND);
 800c8ba:	2006      	movs	r0, #6
 800c8bc:	f7ff fbbc 	bl	800c038 <open_lin_error_handler>
					open_lin_slave_reset();
 800c8c0:	f7ff ff6c 	bl	800c79c <open_lin_slave_reset>
				break;
 800c8c4:	e039      	b.n	800c93a <open_lin_slave_rx_header+0x17a>
				if (open_lin_slave_state_data_count < open_lin_data_layer_frame.lenght)
 800c8c6:	4b20      	ldr	r3, [pc, #128]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c8c8:	785a      	ldrb	r2, [r3, #1]
 800c8ca:	4b21      	ldr	r3, [pc, #132]	@ (800c950 <open_lin_slave_rx_header+0x190>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d90c      	bls.n	800c8ec <open_lin_slave_rx_header+0x12c>
					open_lin_slave_data_buff[open_lin_slave_state_data_count] = rx_byte;
 800c8d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c950 <open_lin_slave_rx_header+0x190>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4a1e      	ldr	r2, [pc, #120]	@ (800c954 <open_lin_slave_rx_header+0x194>)
 800c8da:	79fb      	ldrb	r3, [r7, #7]
 800c8dc:	5453      	strb	r3, [r2, r1]
					open_lin_slave_state_data_count ++;
 800c8de:	4b1c      	ldr	r3, [pc, #112]	@ (800c950 <open_lin_slave_rx_header+0x190>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c950 <open_lin_slave_rx_header+0x190>)
 800c8e8:	701a      	strb	r2, [r3, #0]
				break;
 800c8ea:	e027      	b.n	800c93c <open_lin_slave_rx_header+0x17c>
					if (rx_byte == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid,
 800c8ec:	4b16      	ldr	r3, [pc, #88]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	4a15      	ldr	r2, [pc, #84]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c8f2:	7851      	ldrb	r1, [r2, #1]
 800c8f4:	4a17      	ldr	r2, [pc, #92]	@ (800c954 <open_lin_slave_rx_header+0x194>)
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7ff fc9e 	bl	800c238 <open_lin_data_layer_checksum>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	461a      	mov	r2, r3
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	4293      	cmp	r3, r2
 800c904:	d10d      	bne.n	800c922 <open_lin_slave_rx_header+0x162>
						open_lin_memcpy(open_lin_data_layer_frame.data_ptr,open_lin_slave_data_buff,open_lin_data_layer_frame.lenght);
 800c906:	4b10      	ldr	r3, [pc, #64]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	4a0f      	ldr	r2, [pc, #60]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c90c:	7852      	ldrb	r2, [r2, #1]
 800c90e:	4911      	ldr	r1, [pc, #68]	@ (800c954 <open_lin_slave_rx_header+0x194>)
 800c910:	4618      	mov	r0, r3
 800c912:	f000 f84d 	bl	800c9b0 <memcpy>
						open_lin_net_rx_handler(open_lin_data_layer_frame.pid);
 800c916:	4b0c      	ldr	r3, [pc, #48]	@ (800c948 <open_lin_slave_rx_header+0x188>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff ff00 	bl	800c720 <open_lin_net_rx_handler>
 800c920:	e002      	b.n	800c928 <open_lin_slave_rx_header+0x168>
						open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_CHECKSUM);
 800c922:	2002      	movs	r0, #2
 800c924:	f7ff fb88 	bl	800c038 <open_lin_error_handler>
					open_lin_slave_reset();
 800c928:	f7ff ff38 	bl	800c79c <open_lin_slave_reset>
				break;
 800c92c:	e006      	b.n	800c93c <open_lin_slave_rx_header+0x17c>
				open_lin_slave_reset();
 800c92e:	f7ff ff35 	bl	800c79c <open_lin_slave_reset>
				open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_DATA_RX);
 800c932:	2001      	movs	r0, #1
 800c934:	f7ff fb80 	bl	800c038 <open_lin_error_handler>
				break;
 800c938:	e000      	b.n	800c93c <open_lin_slave_rx_header+0x17c>
				break;
 800c93a:	bf00      	nop
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20001749 	.word	0x20001749
 800c948:	2000174c 	.word	0x2000174c
 800c94c:	20001754 	.word	0x20001754
 800c950:	2000174a 	.word	0x2000174a
 800c954:	20001758 	.word	0x20001758

0800c958 <memset>:
 800c958:	4402      	add	r2, r0
 800c95a:	4603      	mov	r3, r0
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d100      	bne.n	800c962 <memset+0xa>
 800c960:	4770      	bx	lr
 800c962:	f803 1b01 	strb.w	r1, [r3], #1
 800c966:	e7f9      	b.n	800c95c <memset+0x4>

0800c968 <__libc_init_array>:
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	4d0d      	ldr	r5, [pc, #52]	@ (800c9a0 <__libc_init_array+0x38>)
 800c96c:	4c0d      	ldr	r4, [pc, #52]	@ (800c9a4 <__libc_init_array+0x3c>)
 800c96e:	1b64      	subs	r4, r4, r5
 800c970:	10a4      	asrs	r4, r4, #2
 800c972:	2600      	movs	r6, #0
 800c974:	42a6      	cmp	r6, r4
 800c976:	d109      	bne.n	800c98c <__libc_init_array+0x24>
 800c978:	4d0b      	ldr	r5, [pc, #44]	@ (800c9a8 <__libc_init_array+0x40>)
 800c97a:	4c0c      	ldr	r4, [pc, #48]	@ (800c9ac <__libc_init_array+0x44>)
 800c97c:	f000 f826 	bl	800c9cc <_init>
 800c980:	1b64      	subs	r4, r4, r5
 800c982:	10a4      	asrs	r4, r4, #2
 800c984:	2600      	movs	r6, #0
 800c986:	42a6      	cmp	r6, r4
 800c988:	d105      	bne.n	800c996 <__libc_init_array+0x2e>
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c990:	4798      	blx	r3
 800c992:	3601      	adds	r6, #1
 800c994:	e7ee      	b.n	800c974 <__libc_init_array+0xc>
 800c996:	f855 3b04 	ldr.w	r3, [r5], #4
 800c99a:	4798      	blx	r3
 800c99c:	3601      	adds	r6, #1
 800c99e:	e7f2      	b.n	800c986 <__libc_init_array+0x1e>
 800c9a0:	0800ca74 	.word	0x0800ca74
 800c9a4:	0800ca74 	.word	0x0800ca74
 800c9a8:	0800ca74 	.word	0x0800ca74
 800c9ac:	0800ca78 	.word	0x0800ca78

0800c9b0 <memcpy>:
 800c9b0:	440a      	add	r2, r1
 800c9b2:	4291      	cmp	r1, r2
 800c9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9b8:	d100      	bne.n	800c9bc <memcpy+0xc>
 800c9ba:	4770      	bx	lr
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9c6:	4291      	cmp	r1, r2
 800c9c8:	d1f9      	bne.n	800c9be <memcpy+0xe>
 800c9ca:	bd10      	pop	{r4, pc}

0800c9cc <_init>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	bf00      	nop
 800c9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d2:	bc08      	pop	{r3}
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	4770      	bx	lr

0800c9d8 <_fini>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	bf00      	nop
 800c9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9de:	bc08      	pop	{r3}
 800c9e0:	469e      	mov	lr, r3
 800c9e2:	4770      	bx	lr
