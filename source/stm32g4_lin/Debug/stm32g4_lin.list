
stm32g4_lin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d28c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800d464  0800d464  0000e464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4f4  0800d4f4  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4f4  0800d4f4  0000e4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4fc  0800d4fc  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4fc  0800d4fc  0000e4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d500  0800d500  0000e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d504  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001720  200001ec  0800d6f0  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000190c  0800d6f0  0000f90c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209b6  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000556d  00000000  00000000  0002fbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00035140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141c  00000000  00000000  00036bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241f9  00000000  00000000  00037fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000255f1  00000000  00000000  0005c1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd93d  00000000  00000000  000817c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  0014f148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00156290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001ec 	.word	0x200001ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d44c 	.word	0x0800d44c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001f0 	.word	0x200001f0
 8000214:	0800d44c 	.word	0x0800d44c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <RebootToBootloader>:
        HAL_FLASH_OB_Lock();
        HAL_FLASH_OB_Launch();
    }
}
#else
void RebootToBootloader(){}
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <bootloaderSwitcher>:
void bootloaderSwitcher(){}
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <toggleStatusLed>:
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on?GPIO_PIN_RESET:GPIO_PIN_SET);
}

void toggleStatusLed()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000528:	2110      	movs	r1, #16
 800052a:	4802      	ldr	r0, [pc, #8]	@ (8000534 <toggleStatusLed+0x10>)
 800052c:	f001 ff24 	bl	8002378 <HAL_GPIO_TogglePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	48000400 	.word	0x48000400

08000538 <setLinkLed>:

void setLinkLed(bool on)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on?GPIO_PIN_RESET:GPIO_PIN_SET);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	2120      	movs	r1, #32
 800054e:	4803      	ldr	r0, [pc, #12]	@ (800055c <setLinkLed+0x24>)
 8000550:	f001 fefa 	bl	8002348 <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	48000400 	.word	0x48000400

08000560 <slcan_get_master_table_row>:

uint8_t lin_master_data[MAX_SLAVES_COUNT * 8];
t_master_frame_table_item master_frame_table[MAX_SLAVES_COUNT];
uint8_t master_frame_table_size = 0;

t_master_frame_table_item* slcan_get_master_table_row(open_lin_pid_t id, int8_t* out_index){
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
	uint8_t i = -1;
 800056c:	23ff      	movs	r3, #255	@ 0xff
 800056e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < master_frame_table_size; i++)
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	e00e      	b.n	8000594 <slcan_get_master_table_row+0x34>
	{
		if (id == master_frame_table[i].slot.pid)
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	4912      	ldr	r1, [pc, #72]	@ (80005c4 <slcan_get_master_table_row+0x64>)
 800057a:	4613      	mov	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	3304      	adds	r3, #4
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	429a      	cmp	r2, r3
 800058c:	d008      	beq.n	80005a0 <slcan_get_master_table_row+0x40>
	for (i = 0; i < master_frame_table_size; i++)
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3301      	adds	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <slcan_get_master_table_row+0x68>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	7bfa      	ldrb	r2, [r7, #15]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3eb      	bcc.n	8000576 <slcan_get_master_table_row+0x16>
 800059e:	e000      	b.n	80005a2 <slcan_get_master_table_row+0x42>
		{
			break;
 80005a0:	bf00      	nop
		}
	}
	(*out_index) = i;
 80005a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	701a      	strb	r2, [r3, #0]
	return &master_frame_table[i];
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4a03      	ldr	r2, [pc, #12]	@ (80005c4 <slcan_get_master_table_row+0x64>)
 80005b6:	4413      	add	r3, r2
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000288 	.word	0x20000288
 80005c8:	20000348 	.word	0x20000348

080005cc <addLinMasterRow>:
//T013151502AA55
//t0163112233

extern void open_lin_net_init(t_master_frame_table_item *a_slot_array, l_u8 a_slot_array_len);

uint8_t addLinMasterRow(uint8_t* line) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    uint32_t temp;
    int8_t i,out_index;
    t_master_frame_table_item* array_ptr = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
    uint16_t tFrame_Max_ms;
    uint8_t offset = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	77bb      	strb	r3, [r7, #30]
    if (line[0] < 'Z')
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b59      	cmp	r3, #89	@ 0x59
 80005e2:	d801      	bhi.n	80005e8 <addLinMasterRow+0x1c>
    	offset = 5;
 80005e4:	2305      	movs	r3, #5
 80005e6:	77bb      	strb	r3, [r7, #30]
    // reset schedule table
    if (line[1] == '2')
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b32      	cmp	r3, #50	@ 0x32
 80005f0:	d109      	bne.n	8000606 <addLinMasterRow+0x3a>
    {
    	open_lin_hw_reset();
 80005f2:	f00b fe1b 	bl	800c22c <open_lin_hw_reset>
        slcan_state = SLCAN_STATE_CONFIG;
 80005f6:	4b78      	ldr	r3, [pc, #480]	@ (80007d8 <addLinMasterRow+0x20c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
        master_frame_table_size = 0;
 80005fc:	4b77      	ldr	r3, [pc, #476]	@ (80007dc <addLinMasterRow+0x210>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
        return 1;
 8000602:	2301      	movs	r3, #1
 8000604:	e0e4      	b.n	80007d0 <addLinMasterRow+0x204>
    }
    // start sending
    if (line[1] == '1'){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b31      	cmp	r3, #49	@ 0x31
 800060e:	d115      	bne.n	800063c <addLinMasterRow+0x70>
    	if (lin_type == LIN_SLAVE)
 8000610:	4b73      	ldr	r3, [pc, #460]	@ (80007e0 <addLinMasterRow+0x214>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d106      	bne.n	8000626 <addLinMasterRow+0x5a>
    	{
    		open_lin_net_init(master_frame_table,master_frame_table_size);
 8000618:	4b70      	ldr	r3, [pc, #448]	@ (80007dc <addLinMasterRow+0x210>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4871      	ldr	r0, [pc, #452]	@ (80007e4 <addLinMasterRow+0x218>)
 8000620:	f00c f8f0 	bl	800c804 <open_lin_net_init>
 8000624:	e005      	b.n	8000632 <addLinMasterRow+0x66>
    	} else {
			open_lin_master_dl_init(master_frame_table,master_frame_table_size);
 8000626:	4b6d      	ldr	r3, [pc, #436]	@ (80007dc <addLinMasterRow+0x210>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	486d      	ldr	r0, [pc, #436]	@ (80007e4 <addLinMasterRow+0x218>)
 800062e:	f00b ff21 	bl	800c474 <open_lin_master_dl_init>
    		 //wakeUpLin();
    	}
        slcan_state = SLCAN_STATE_OPEN;
 8000632:	4b69      	ldr	r3, [pc, #420]	@ (80007d8 <addLinMasterRow+0x20c>)
 8000634:	2202      	movs	r2, #2
 8000636:	701a      	strb	r2, [r3, #0]
        return 1;
 8000638:	2301      	movs	r3, #1
 800063a:	e0c9      	b.n	80007d0 <addLinMasterRow+0x204>
    }

    // id
    if (!parseHex(&line[2], 2, &temp)) return 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3302      	adds	r3, #2
 8000640:	f107 0210 	add.w	r2, r7, #16
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fac4 	bl	8000bd4 <parseHex>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <addLinMasterRow+0x8a>
 8000652:	2300      	movs	r3, #0
 8000654:	e0bc      	b.n	80007d0 <addLinMasterRow+0x204>

	array_ptr = slcan_get_master_table_row(temp, &out_index);
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f107 020f 	add.w	r2, r7, #15
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff7d 	bl	8000560 <slcan_get_master_table_row>
 8000666:	61b8      	str	r0, [r7, #24]
    array_ptr->slot.pid= temp;
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	711a      	strb	r2, [r3, #4]
    if ((temp == 0x3d) || (temp == 0x3c))
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	2b3d      	cmp	r3, #61	@ 0x3d
    {
//    	extern l_u8 diagnostic_slot;
//    	diagnostic_slot = 1;
    }
    // len
    if (!parseHex(&line[4 + offset], 1, &temp)) return 0;
 8000674:	7fbb      	ldrb	r3, [r7, #30]
 8000676:	3304      	adds	r3, #4
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	f107 0210 	add.w	r2, r7, #16
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f000 faa5 	bl	8000bd4 <parseHex>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <addLinMasterRow+0xc8>
 8000690:	2300      	movs	r3, #0
 8000692:	e09d      	b.n	80007d0 <addLinMasterRow+0x204>
    if (array_ptr->slot.data_length  > 8) return 0;
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	799b      	ldrb	r3, [r3, #6]
 8000698:	2b08      	cmp	r3, #8
 800069a:	d901      	bls.n	80006a0 <addLinMasterRow+0xd4>
 800069c:	2300      	movs	r3, #0
 800069e:	e097      	b.n	80007d0 <addLinMasterRow+0x204>
    array_ptr->slot.data_length = temp;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	719a      	strb	r2, [r3, #6]

    // type
    if ((line[0] == 'r') || (line[0] == 'R'))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b72      	cmp	r3, #114	@ 0x72
 80006ae:	d003      	beq.n	80006b8 <addLinMasterRow+0xec>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b52      	cmp	r3, #82	@ 0x52
 80006b6:	d103      	bne.n	80006c0 <addLinMasterRow+0xf4>
    	array_ptr->slot.frame_type = OPEN_LIN_FRAME_TYPE_RECEIVE;
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	2201      	movs	r2, #1
 80006bc:	715a      	strb	r2, [r3, #5]
 80006be:	e002      	b.n	80006c6 <addLinMasterRow+0xfa>
	else
		array_ptr->slot.frame_type = OPEN_LIN_FRAME_TYPE_TRANSMIT;
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	2200      	movs	r2, #0
 80006c4:	715a      	strb	r2, [r3, #5]
    // data
    array_ptr->slot.data_ptr = &(lin_master_data[out_index * 8]); //data is later set in case of override
 80006c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4a46      	ldr	r2, [pc, #280]	@ (80007e8 <addLinMasterRow+0x21c>)
 80006ce:	441a      	add	r2, r3
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	609a      	str	r2, [r3, #8]
    // period
    if (line[0] < 'Z') // if upper case
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b59      	cmp	r3, #89	@ 0x59
 80006da:	d822      	bhi.n	8000722 <addLinMasterRow+0x156>
    {
    	if (!parseHex(&line[4], 2, &temp)) return 0;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3304      	adds	r3, #4
 80006e0:	f107 0210 	add.w	r2, r7, #16
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa74 	bl	8000bd4 <parseHex>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d101      	bne.n	80006f6 <addLinMasterRow+0x12a>
 80006f2:	2300      	movs	r3, #0
 80006f4:	e06c      	b.n	80007d0 <addLinMasterRow+0x204>
    	array_ptr->offset_ms = temp;
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	701a      	strb	r2, [r3, #0]
    	if (!parseHex(&line[6], 2, &temp)) return 0;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	f107 0210 	add.w	r2, r7, #16
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fa63 	bl	8000bd4 <parseHex>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <addLinMasterRow+0x14c>
 8000714:	2300      	movs	r3, #0
 8000716:	e05b      	b.n	80007d0 <addLinMasterRow+0x204>
    	array_ptr->response_wait_ms	= temp;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	e015      	b.n	800074e <addLinMasterRow+0x182>
    } else
    {
		array_ptr->offset_ms = 15;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	220f      	movs	r2, #15
 8000726:	701a      	strb	r2, [r3, #0]
		// timeout
		tFrame_Max_ms = (((uint16_t)array_ptr->slot.data_length * 10U + 44U) * 7U / 100U) + 1;
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	799b      	ldrb	r3, [r3, #6]
 800072c:	461a      	mov	r2, r3
 800072e:	2346      	movs	r3, #70	@ 0x46
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8000738:	4a2c      	ldr	r2, [pc, #176]	@ (80007ec <addLinMasterRow+0x220>)
 800073a:	fba2 2303 	umull	r2, r3, r2, r3
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	b29b      	uxth	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	82fb      	strh	r3, [r7, #22]
		array_ptr->response_wait_ms = (uint8_t)(tFrame_Max_ms);
 8000746:	8afb      	ldrh	r3, [r7, #22]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	705a      	strb	r2, [r3, #1]
    }

    if (array_ptr->slot.frame_type == OPEN_LIN_FRAME_TYPE_TRANSMIT)
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d12a      	bne.n	80007ac <addLinMasterRow+0x1e0>
    {
        for (i = 0; i < array_ptr->slot.data_length; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	77fb      	strb	r3, [r7, #31]
 800075a:	e021      	b.n	80007a0 <addLinMasterRow+0x1d4>
        {
            if (!parseHex(&line[5 + offset + i * 2], 2, &temp)) return 0;
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	1d5a      	adds	r2, r3, #5
 8000760:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	f107 0210 	add.w	r2, r7, #16
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fa2d 	bl	8000bd4 <parseHex>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <addLinMasterRow+0x1b8>
 8000780:	2300      	movs	r3, #0
 8000782:	e025      	b.n	80007d0 <addLinMasterRow+0x204>
            array_ptr->slot.data_ptr[i] = temp;
 8000784:	6939      	ldr	r1, [r7, #16]
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800078e:	4413      	add	r3, r2
 8000790:	b2ca      	uxtb	r2, r1
 8000792:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < array_ptr->slot.data_length; i++)
 8000794:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	3301      	adds	r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	77fb      	strb	r3, [r7, #31]
 80007a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	7992      	ldrb	r2, [r2, #6]
 80007a8:	4293      	cmp	r3, r2
 80007aa:	dbd7      	blt.n	800075c <addLinMasterRow+0x190>
        }
    }

    if ((out_index == master_frame_table_size) && (master_frame_table_size < MAX_SLAVES_COUNT))
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <addLinMasterRow+0x210>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d109      	bne.n	80007ce <addLinMasterRow+0x202>
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <addLinMasterRow+0x210>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d805      	bhi.n	80007ce <addLinMasterRow+0x202>
    	 master_frame_table_size ++;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <addLinMasterRow+0x210>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <addLinMasterRow+0x210>)
 80007cc:	701a      	strb	r2, [r3, #0]

    return 1;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000370 	.word	0x20000370
 80007dc:	20000348 	.word	0x20000348
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000288 	.word	0x20000288
 80007e8:	20000208 	.word	0x20000208
 80007ec:	51eb851f 	.word	0x51eb851f

080007f0 <lin_slcan_reset>:
static l_u8 slcan_lin_slave_state_data_count;
static uint8_t slcan_lin_data_array[9];
static t_open_lin_data_layer_frame open_lin_data_layer_frame;
uint32_t slcan_lin_timeout_counter = 0;

void lin_slcan_reset(void){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	slcan_lin_slave_state = OPEN_LIN_SLAVE_IDLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <lin_slcan_reset+0x20>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	slcan_lin_slave_state_data_count = 0;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <lin_slcan_reset+0x24>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	slcan_lin_timeout_counter = 0;
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <lin_slcan_reset+0x28>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
//	open_lin_hw_reset();
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	20000349 	.word	0x20000349
 8000814:	2000034a 	.word	0x2000034a
 8000818:	20000364 	.word	0x20000364

0800081c <lin_slcan_rx_handler>:

open_lin_frame_slot_t lin_slcan_slot;
void lin_slcan_rx_handler(t_open_lin_data_layer_frame *f)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	lin_slcan_slot.pid = f->pid;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 800082a:	701a      	strb	r2, [r3, #0]
	lin_slcan_slot.data_ptr = f->data_ptr;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000832:	6053      	str	r3, [r2, #4]
	lin_slcan_slot.frame_type = OPEN_LIN_FRAME_TYPE_RECEIVE;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000836:	2201      	movs	r2, #1
 8000838:	705a      	strb	r2, [r3, #1]
	lin_slcan_slot.data_length = f->lenght;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	785a      	ldrb	r2, [r3, #1]
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000840:	709a      	strb	r2, [r3, #2]
	slcanReciveCanFrame(&lin_slcan_slot);
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <lin_slcan_rx_handler+0x34>)
 8000844:	f000 fd4c 	bl	80012e0 <slcanReciveCanFrame>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000368 	.word	0x20000368

08000854 <open_lin_on_rx_frame>:

void open_lin_on_rx_frame(open_lin_frame_slot_t *slot)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	slcanReciveCanFrame(slot);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 fd3f 	bl	80012e0 <slcanReciveCanFrame>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <lin_slcan_rx_timeout_handler>:

void lin_slcan_rx_timeout_handler()
{
 800086c:	b598      	push	{r3, r4, r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if (slcan_state == SLCAN_STATE_OPEN)
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <lin_slcan_rx_timeout_handler+0x64>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d127      	bne.n	80008c8 <lin_slcan_rx_timeout_handler+0x5c>
	{
		if (slcan_lin_slave_state_data_count == 0)
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <lin_slcan_rx_timeout_handler+0x68>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d106      	bne.n	800088e <lin_slcan_rx_timeout_handler+0x22>
		{
			/* header send no respone */
			open_lin_data_layer_frame.lenght = 0;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 8000882:	2200      	movs	r2, #0
 8000884:	705a      	strb	r2, [r3, #1]
			lin_slcan_rx_handler(&open_lin_data_layer_frame);
 8000886:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 8000888:	f7ff ffc8 	bl	800081c <lin_slcan_rx_handler>
 800088c:	e01c      	b.n	80008c8 <lin_slcan_rx_timeout_handler+0x5c>
		} else
		{
			open_lin_data_layer_frame.lenght = slcan_lin_slave_state_data_count - 1;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <lin_slcan_rx_timeout_handler+0x68>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 8000898:	705a      	strb	r2, [r3, #1]
			/* checksum calculation */
			if (slcan_lin_data_array[open_lin_data_layer_frame.lenght] == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <lin_slcan_rx_timeout_handler+0x70>)
 80008a2:	5c9c      	ldrb	r4, [r3, r2]
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008b0:	7851      	ldrb	r1, [r2, #1]
					open_lin_data_layer_frame.lenght, open_lin_data_layer_frame.data_ptr)) /* TODO remove from interrupt possible function */
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008b4:	6852      	ldr	r2, [r2, #4]
			if (slcan_lin_data_array[open_lin_data_layer_frame.lenght] == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00b fd7e 	bl	800c3b8 <open_lin_data_layer_checksum>
 80008bc:	4603      	mov	r3, r0
 80008be:	429c      	cmp	r4, r3
 80008c0:	d102      	bne.n	80008c8 <lin_slcan_rx_timeout_handler+0x5c>
			{
				/* valid checksum */
				lin_slcan_rx_handler(&open_lin_data_layer_frame);
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <lin_slcan_rx_timeout_handler+0x6c>)
 80008c4:	f7ff ffaa 	bl	800081c <lin_slcan_rx_handler>
			}
		}
	}
	lin_slcan_reset();
 80008c8:	f7ff ff92 	bl	80007f0 <lin_slcan_reset>
}
 80008cc:	bf00      	nop
 80008ce:	bd98      	pop	{r3, r4, r7, pc}
 80008d0:	20000370 	.word	0x20000370
 80008d4:	2000034a 	.word	0x2000034a
 80008d8:	20000358 	.word	0x20000358
 80008dc:	2000034c 	.word	0x2000034c

080008e0 <lin_slcan_skip_header_reception>:



void lin_slcan_skip_header_reception(uint8_t pid)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	open_lin_hw_reset();
 80008ea:	f00b fc9f 	bl	800c22c <open_lin_hw_reset>
	lin_slcan_reset();
 80008ee:	f7ff ff7f 	bl	80007f0 <lin_slcan_reset>
	slcan_lin_slave_state = OPEN_LIN_SLAVE_DATA_RX;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <lin_slcan_skip_header_reception+0x38>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	701a      	strb	r2, [r3, #0]
	open_lin_data_layer_frame.pid = pid;
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <lin_slcan_skip_header_reception+0x3c>)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	7013      	strb	r3, [r2, #0]
	open_lin_data_layer_frame.data_ptr = slcan_lin_data_array;
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <lin_slcan_skip_header_reception+0x3c>)
 8000900:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <lin_slcan_skip_header_reception+0x40>)
 8000902:	605a      	str	r2, [r3, #4]
	slcan_lin_timeout_counter = HAL_GetTick();
 8000904:	f001 f9f2 	bl	8001cec <HAL_GetTick>
 8000908:	4603      	mov	r3, r0
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <lin_slcan_skip_header_reception+0x44>)
 800090c:	6013      	str	r3, [r2, #0]
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000349 	.word	0x20000349
 800091c:	20000358 	.word	0x20000358
 8000920:	2000034c 	.word	0x2000034c
 8000924:	20000364 	.word	0x20000364

08000928 <lin_slcan_rx>:

void lin_slcan_rx(l_u8 rx_byte)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	if (open_lin_hw_check_for_break() == l_true)
 8000932:	f00b fc4d 	bl	800c1d0 <open_lin_hw_check_for_break>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d007      	beq.n	800094c <lin_slcan_rx+0x24>
	{
		lin_slcan_reset();
 800093c:	f7ff ff58 	bl	80007f0 <lin_slcan_reset>
		slcan_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 8000940:	4b3a      	ldr	r3, [pc, #232]	@ (8000a2c <lin_slcan_rx+0x104>)
 8000942:	2202      	movs	r2, #2
 8000944:	701a      	strb	r2, [r3, #0]
		#ifdef OPEN_LIN_AUTO_BAUND
			open_lin_hw_set_auto_baud();
 8000946:	f00b fc63 	bl	800c210 <open_lin_hw_set_auto_baud>
			default:
				lin_slcan_reset();
				break;
		}
	}
}
 800094a:	e06b      	b.n	8000a24 <lin_slcan_rx+0xfc>
		switch (slcan_lin_slave_state){
 800094c:	4b37      	ldr	r3, [pc, #220]	@ (8000a2c <lin_slcan_rx+0x104>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d031      	beq.n	80009b8 <lin_slcan_rx+0x90>
 8000954:	2b03      	cmp	r3, #3
 8000956:	dc61      	bgt.n	8000a1c <lin_slcan_rx+0xf4>
 8000958:	2b01      	cmp	r3, #1
 800095a:	d002      	beq.n	8000962 <lin_slcan_rx+0x3a>
 800095c:	2b02      	cmp	r3, #2
 800095e:	d00a      	beq.n	8000976 <lin_slcan_rx+0x4e>
 8000960:	e05c      	b.n	8000a1c <lin_slcan_rx+0xf4>
				if (rx_byte != OPEN_LIN_SYNCH_BYTE)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b55      	cmp	r3, #85	@ 0x55
 8000966:	d002      	beq.n	800096e <lin_slcan_rx+0x46>
					lin_slcan_reset();
 8000968:	f7ff ff42 	bl	80007f0 <lin_slcan_reset>
				break;
 800096c:	e05a      	b.n	8000a24 <lin_slcan_rx+0xfc>
					slcan_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 800096e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a2c <lin_slcan_rx+0x104>)
 8000970:	2202      	movs	r2, #2
 8000972:	701a      	strb	r2, [r3, #0]
				break;
 8000974:	e056      	b.n	8000a24 <lin_slcan_rx+0xfc>
				if (rx_byte == 0) break;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d052      	beq.n	8000a22 <lin_slcan_rx+0xfa>
				if (open_lin_data_layer_parity(rx_byte) == rx_byte)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f00b fcd1 	bl	800c326 <open_lin_data_layer_parity>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4293      	cmp	r3, r2
 800098c:	d109      	bne.n	80009a2 <lin_slcan_rx+0x7a>
					open_lin_data_layer_frame.pid = (open_lin_pid_t)(rx_byte & OPEN_LIN_ID_MASK);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <lin_slcan_rx+0x108>)
 8000998:	701a      	strb	r2, [r3, #0]
					open_lin_data_layer_frame.data_ptr = slcan_lin_data_array;
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <lin_slcan_rx+0x108>)
 800099c:	4a25      	ldr	r2, [pc, #148]	@ (8000a34 <lin_slcan_rx+0x10c>)
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	e001      	b.n	80009a6 <lin_slcan_rx+0x7e>
					lin_slcan_reset();
 80009a2:	f7ff ff25 	bl	80007f0 <lin_slcan_reset>
				slcan_lin_slave_state = OPEN_LIN_SLAVE_DATA_RX;
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <lin_slcan_rx+0x104>)
 80009a8:	2203      	movs	r2, #3
 80009aa:	701a      	strb	r2, [r3, #0]
				slcan_lin_timeout_counter = HAL_GetTick();
 80009ac:	f001 f99e 	bl	8001cec <HAL_GetTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <lin_slcan_rx+0x110>)
 80009b4:	6013      	str	r3, [r2, #0]
				break;
 80009b6:	e035      	b.n	8000a24 <lin_slcan_rx+0xfc>
				slcan_lin_timeout_counter = HAL_GetTick();
 80009b8:	f001 f998 	bl	8001cec <HAL_GetTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a1e      	ldr	r2, [pc, #120]	@ (8000a38 <lin_slcan_rx+0x110>)
 80009c0:	6013      	str	r3, [r2, #0]
				if (slcan_lin_slave_state_data_count < 8)
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	d80d      	bhi.n	80009e6 <lin_slcan_rx+0xbe>
					open_lin_data_layer_frame.data_ptr[slcan_lin_slave_state_data_count] = rx_byte;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	701a      	strb	r2, [r3, #0]
					slcan_lin_slave_state_data_count ++;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009e2:	701a      	strb	r2, [r3, #0]
				break;
 80009e4:	e01e      	b.n	8000a24 <lin_slcan_rx+0xfc>
					open_lin_data_layer_frame.lenght = slcan_lin_slave_state_data_count;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <lin_slcan_rx+0x114>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009ec:	705a      	strb	r2, [r3, #1]
					if (rx_byte == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009fa:	7851      	ldrb	r1, [r2, #1]
							open_lin_data_layer_frame.lenght, open_lin_data_layer_frame.data_ptr)) /* TODO remove from interrupt possible function */
 80009fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <lin_slcan_rx+0x108>)
 80009fe:	6852      	ldr	r2, [r2, #4]
					if (rx_byte == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid & OPEN_LIN_ID_MASK,
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00b fcd9 	bl	800c3b8 <open_lin_data_layer_checksum>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d102      	bne.n	8000a16 <lin_slcan_rx+0xee>
						lin_slcan_rx_handler(&open_lin_data_layer_frame);
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <lin_slcan_rx+0x108>)
 8000a12:	f7ff ff03 	bl	800081c <lin_slcan_rx_handler>
					lin_slcan_reset();
 8000a16:	f7ff feeb 	bl	80007f0 <lin_slcan_reset>
				break;
 8000a1a:	e003      	b.n	8000a24 <lin_slcan_rx+0xfc>
				lin_slcan_reset();
 8000a1c:	f7ff fee8 	bl	80007f0 <lin_slcan_reset>
				break;
 8000a20:	e000      	b.n	8000a24 <lin_slcan_rx+0xfc>
				if (rx_byte == 0) break;
 8000a22:	bf00      	nop
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000349 	.word	0x20000349
 8000a30:	20000358 	.word	0x20000358
 8000a34:	2000034c 	.word	0x2000034c
 8000a38:	20000364 	.word	0x20000364
 8000a3c:	2000034a 	.word	0x2000034a

08000a40 <slcanSetOutputChar>:
  * @brief  Adds data to send buffer
  * @param  c - data to add
  * @retval None
  */
static void slcanSetOutputChar(uint8_t c)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if (sl_frame_len < sizeof(sl_frame))
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b3d      	cmp	r3, #61	@ 0x3d
 8000a50:	d80b      	bhi.n	8000a6a <slcanSetOutputChar+0x2a>
	{
		sl_frame[sl_frame_len] = c;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <slcanSetOutputChar+0x3c>)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	5453      	strb	r3, [r2, r1]
		sl_frame_len ++;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <slcanSetOutputChar+0x38>)
 8000a68:	701a      	strb	r2, [r3, #0]
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200003b2 	.word	0x200003b2
 8000a7c:	20000374 	.word	0x20000374

08000a80 <slCanSendNibble>:
  * @brief  Add given nible value as hexadecimal string to bufferr
  * @param  c - data to add
  * @retval None
  */
static void slCanSendNibble(uint8_t ch)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	ch = ch > 9 ? ch - 10 + 'A' : ch + '0';
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b09      	cmp	r3, #9
 8000a8e:	d903      	bls.n	8000a98 <slCanSendNibble+0x18>
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	3337      	adds	r3, #55	@ 0x37
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	e002      	b.n	8000a9e <slCanSendNibble+0x1e>
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	3330      	adds	r3, #48	@ 0x30
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	71fb      	strb	r3, [r7, #7]
	slcanSetOutputChar(ch);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffcc 	bl	8000a40 <slcanSetOutputChar>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <slcanSetOutputAsHex>:
/**
  * @brief  Add given byte value as hexadecimal string to buffer
  * @param  value - data to add
  * @retval None
  */
static void slcanSetOutputAsHex(uint8_t ch) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	slCanSendNibble(ch >> 4);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	091b      	lsrs	r3, r3, #4
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffdd 	bl	8000a80 <slCanSendNibble>
	slCanSendNibble(ch & 0x0F);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffd6 	bl	8000a80 <slCanSendNibble>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <slcanOutputFlush>:

static void slcanOutputFlush(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	while (((USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData)->TxState){;} //should change by hardware
 8000ae0:	bf00      	nop
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <slcanOutputFlush+0x34>)
 8000ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000ae8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f8      	bne.n	8000ae2 <slcanOutputFlush+0x6>
	while (CDC_Transmit_FS(sl_frame, sl_frame_len) != USBD_OK);
 8000af0:	bf00      	nop
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <slcanOutputFlush+0x38>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <slcanOutputFlush+0x3c>)
 8000afa:	f00a fef3 	bl	800b8e4 <CDC_Transmit_FS>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f6      	bne.n	8000af2 <slcanOutputFlush+0x16>
    sl_frame_len = 0;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <slcanOutputFlush+0x38>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200005c0 	.word	0x200005c0
 8000b14:	200003b2 	.word	0x200003b2
 8000b18:	20000374 	.word	0x20000374

08000b1c <slCanHandler>:

void slCanHandler(uint8_t time_passed_ms)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
    if (slcan_state == SLCAN_STATE_OPEN)
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <slCanHandler+0x40>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d107      	bne.n	8000b3e <slCanHandler+0x22>
    {        
        if (lin_type == LIN_MASTER)
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <slCanHandler+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <slCanHandler+0x22>
        	open_lin_master_dl_handler(time_passed_ms);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00b fdc3 	bl	800c6c4 <open_lin_master_dl_handler>
    }
    setLinkLed(slcan_state == SLCAN_STATE_OPEN);
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <slCanHandler+0x40>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fcf3 	bl	8000538 <setLinkLed>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000370 	.word	0x20000370
 8000b60:	20000000 	.word	0x20000000

08000b64 <slCanProccesInput>:
  * @param  ch - data to add
  * @retval None
  */
static uint8_t command[LINE_MAXLEN];
int slCanProccesInput(uint8_t ch)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	static uint8_t line[LINE_MAXLEN];
	static uint8_t linepos = 0;

    if (ch == SLCAN_CR) {
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b0d      	cmp	r3, #13
 8000b72:	d111      	bne.n	8000b98 <slCanProccesInput+0x34>
        line[linepos] = 0;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <slCanProccesInput+0x68>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	5499      	strb	r1, [r3, r2]
        memcpy(command,line,linepos);
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <slCanProccesInput+0x68>)
 8000b88:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <slCanProccesInput+0x6c>)
 8000b8a:	f00c fa18 	bl	800cfbe <memcpy>
        linepos = 0;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
        return 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e013      	b.n	8000bc0 <slCanProccesInput+0x5c>
    } else if (ch != SLCAN_LR) {
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d00f      	beq.n	8000bbe <slCanProccesInput+0x5a>
        line[linepos] = ch;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <slCanProccesInput+0x68>)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	5453      	strb	r3, [r2, r1]
        if (linepos < LINE_MAXLEN - 1) linepos++;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b3c      	cmp	r3, #60	@ 0x3c
 8000bb0:	d805      	bhi.n	8000bbe <slCanProccesInput+0x5a>
 8000bb2:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <slCanProccesInput+0x64>)
 8000bbc:	701a      	strb	r2, [r3, #0]
    }
    return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200003f3 	.word	0x200003f3
 8000bcc:	200003f4 	.word	0x200003f4
 8000bd0:	200003b4 	.word	0x200003b4

08000bd4 <parseHex>:
  * @param  canmsg - line Input string
  * 		len    - of characters to interpret
  * 		value  - Pointer to variable for the resulting decoded value
  * @retval 0 on error, 1 on success
  */
uint8_t parseHex(uint8_t* line, uint8_t len, uint32_t* value) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	72fb      	strb	r3, [r7, #11]
    *value = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
    while (len--) {
 8000be8:	e045      	b.n	8000c76 <parseHex+0xa2>
        if (*line == 0) return 0;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <parseHex+0x22>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e045      	b.n	8000c82 <parseHex+0xae>
        *value <<= 4;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	011a      	lsls	r2, r3, #4
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
        if ((*line >= '0') && (*line <= '9')) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c06:	d90d      	bls.n	8000c24 <parseHex+0x50>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b39      	cmp	r3, #57	@ 0x39
 8000c0e:	d809      	bhi.n	8000c24 <parseHex+0x50>
           *value += *line - '0';
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	e025      	b.n	8000c70 <parseHex+0x9c>
        } else if ((*line >= 'A') && (*line <= 'F')) {
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b40      	cmp	r3, #64	@ 0x40
 8000c2a:	d90d      	bls.n	8000c48 <parseHex+0x74>
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b46      	cmp	r3, #70	@ 0x46
 8000c32:	d809      	bhi.n	8000c48 <parseHex+0x74>
           *value += *line - 'A' + 10;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f1a3 0237 	sub.w	r2, r3, #55	@ 0x37
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e013      	b.n	8000c70 <parseHex+0x9c>
        } else if ((*line >= 'a') && (*line <= 'f')) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b60      	cmp	r3, #96	@ 0x60
 8000c4e:	d90d      	bls.n	8000c6c <parseHex+0x98>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b66      	cmp	r3, #102	@ 0x66
 8000c56:	d809      	bhi.n	8000c6c <parseHex+0x98>
           *value += *line - 'a' + 10;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	f1a3 0257 	sub.w	r2, r3, #87	@ 0x57
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e001      	b.n	8000c70 <parseHex+0x9c>
        } else return 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e008      	b.n	8000c82 <parseHex+0xae>
        line++;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3301      	adds	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
    while (len--) {
 8000c76:	7afb      	ldrb	r3, [r7, #11]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	72fa      	strb	r2, [r7, #11]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1b4      	bne.n	8000bea <parseHex+0x16>
    }
    return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <transmitStd>:
/**
 * @brief  Interprets given line and transmit can message
 * @param  line Line string which contains the transmit command
 * @retval HAL status
 */
static uint8_t transmitStd(uint8_t* line) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b088      	sub	sp, #32
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
    uint32_t temp;
    open_lin_frame_slot_t slot;
    uint8_t data_buff[8];
    uint8_t offset = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	77fb      	strb	r3, [r7, #31]

    bool lin_data = ((line[0] == 't') || (line[0] == 'T'));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b74      	cmp	r3, #116	@ 0x74
 8000ca0:	d003      	beq.n	8000caa <transmitStd+0x1c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b54      	cmp	r3, #84	@ 0x54
 8000ca8:	d101      	bne.n	8000cae <transmitStd+0x20>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <transmitStd+0x22>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	777b      	strb	r3, [r7, #29]
 8000cb2:	7f7b      	ldrb	r3, [r7, #29]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	777b      	strb	r3, [r7, #29]

    slot.data_ptr = data_buff;
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	617b      	str	r3, [r7, #20]
    if (line[0] < 'Z')
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b59      	cmp	r3, #89	@ 0x59
 8000cc6:	d801      	bhi.n	8000ccc <transmitStd+0x3e>
		offset = 5;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	77fb      	strb	r3, [r7, #31]
    // id
    if (!parseHex(&line[2 + offset], 2, &temp)) return 0;
 8000ccc:	7ffb      	ldrb	r3, [r7, #31]
 8000cce:	3302      	adds	r3, #2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f107 0218 	add.w	r2, r7, #24
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff79 	bl	8000bd4 <parseHex>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <transmitStd+0x5e>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e059      	b.n	8000da0 <transmitStd+0x112>
    	slot.pid = open_lin_data_layer_parity((open_lin_pid_t)temp); // add parity
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00b fb18 	bl	800c326 <open_lin_data_layer_parity>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	743b      	strb	r3, [r7, #16]
    // len
    if (!parseHex(&line[4 + offset], 1, &temp)) return 0;
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	461a      	mov	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	f107 0218 	add.w	r2, r7, #24
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff62 	bl	8000bd4 <parseHex>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <transmitStd+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	e042      	b.n	8000da0 <transmitStd+0x112>
    slot.data_length = temp;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	74bb      	strb	r3, [r7, #18]

    if (slot.data_length > 8) return 0;
 8000d20:	7cbb      	ldrb	r3, [r7, #18]
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d901      	bls.n	8000d2a <transmitStd+0x9c>
 8000d26:	2300      	movs	r3, #0
 8000d28:	e03a      	b.n	8000da0 <transmitStd+0x112>
    if (lin_data)
 8000d2a:	7f7b      	ldrb	r3, [r7, #29]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d022      	beq.n	8000d76 <transmitStd+0xe8>
    {
        uint8_t i;
        for (i = 0; i < slot.data_length; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	77bb      	strb	r3, [r7, #30]
 8000d34:	e01b      	b.n	8000d6e <transmitStd+0xe0>
            if (!parseHex(&line[5 + offset + i*2], 2, &temp)) return 0;
 8000d36:	7ffb      	ldrb	r3, [r7, #31]
 8000d38:	1d5a      	adds	r2, r3, #5
 8000d3a:	7fbb      	ldrb	r3, [r7, #30]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	f107 0218 	add.w	r2, r7, #24
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff41 	bl	8000bd4 <parseHex>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <transmitStd+0xce>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e021      	b.n	8000da0 <transmitStd+0x112>
            slot.data_ptr[i] = temp;
 8000d5c:	69b9      	ldr	r1, [r7, #24]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	7fbb      	ldrb	r3, [r7, #30]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2ca      	uxtb	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < slot.data_length; i++) {
 8000d68:	7fbb      	ldrb	r3, [r7, #30]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	77bb      	strb	r3, [r7, #30]
 8000d6e:	7cbb      	ldrb	r3, [r7, #18]
 8000d70:	7fba      	ldrb	r2, [r7, #30]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3df      	bcc.n	8000d36 <transmitStd+0xa8>
        }
    }

    if (offset == 0)
 8000d76:	7ffb      	ldrb	r3, [r7, #31]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <transmitStd+0xf8>
    {
    	open_lin_master_data_tx_header(&slot);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00b fbc3 	bl	800c50c <open_lin_master_data_tx_header>
    }
    if (lin_data)
 8000d86:	7f7b      	ldrb	r3, [r7, #29]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <transmitStd+0x108>
    {
    	open_lin_master_data_tx_data(&slot);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00b fbfe 	bl	800c592 <open_lin_master_data_tx_data>
    }
    /* set data recepcion state machine */
	lin_slcan_skip_header_reception(slot.pid);
 8000d96:	7c3b      	ldrb	r3, [r7, #16]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fda1 	bl	80008e0 <lin_slcan_skip_header_reception>

    return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <USART1_UART_Init>:
extern uint32_t lin_baund_rate;

l_u8 classicChecksum = 0;

void USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <USART1_UART_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = lin_baund_rate;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <USART1_UART_Init+0x7c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000db8:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dec:	2208      	movs	r2, #8
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000df2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000df6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000dfc:	f004 fb86 	bl	800550c <HAL_LIN_Init>
  {
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e00:	2100      	movs	r1, #0
 8000e02:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000e04:	f006 fc15 	bl	8007632 <HAL_UARTEx_SetTxFifoThreshold>
  {
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000e0c:	f006 fc4f 	bl	80076ae <HAL_UARTEx_SetRxFifoThreshold>
  {
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <USART1_UART_Init+0x74>)
 8000e12:	f006 fbd5 	bl	80075c0 <HAL_UARTEx_DisableFifoMode>
  {
  }
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000490 	.word	0x20000490
 8000e20:	40013800 	.word	0x40013800
 8000e24:	20000008 	.word	0x20000008

08000e28 <slCanCheckCommand>:


void slCanCheckCommand()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
	uint8_t result = SLCAN_BELL;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	73fb      	strb	r3, [r7, #15]
	uint8_t *line = command;
 8000e32:	4bd3      	ldr	r3, [pc, #844]	@ (8001180 <slCanCheckCommand+0x358>)
 8000e34:	60bb      	str	r3, [r7, #8]
    static uint32_t tm = 0;
    if(millis() - tm > 1000)
 8000e36:	f000 fa91 	bl	800135c <millis>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4bd1      	ldr	r3, [pc, #836]	@ (8001184 <slCanCheckCommand+0x35c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e46:	d906      	bls.n	8000e56 <slCanCheckCommand+0x2e>
    {
        tm = millis();
 8000e48:	f000 fa88 	bl	800135c <millis>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4acd      	ldr	r2, [pc, #820]	@ (8001184 <slCanCheckCommand+0x35c>)
 8000e50:	6013      	str	r3, [r2, #0]
        toggleStatusLed();
 8000e52:	f7ff fb67 	bl	8000524 <toggleStatusLed>
    }
    switch (line[0]) {
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b76      	cmp	r3, #118	@ 0x76
 8000e5c:	f200 8212 	bhi.w	8001284 <slCanCheckCommand+0x45c>
 8000e60:	a201      	add	r2, pc, #4	@ (adr r2, 8000e68 <slCanCheckCommand+0x40>)
 8000e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e66:	bf00      	nop
 8000e68:	080012c3 	.word	0x080012c3
 8000e6c:	08001285 	.word	0x08001285
 8000e70:	08001285 	.word	0x08001285
 8000e74:	08001285 	.word	0x08001285
 8000e78:	08001285 	.word	0x08001285
 8000e7c:	08001285 	.word	0x08001285
 8000e80:	08001285 	.word	0x08001285
 8000e84:	08001285 	.word	0x08001285
 8000e88:	08001285 	.word	0x08001285
 8000e8c:	08001285 	.word	0x08001285
 8000e90:	08001285 	.word	0x08001285
 8000e94:	08001285 	.word	0x08001285
 8000e98:	08001285 	.word	0x08001285
 8000e9c:	08001285 	.word	0x08001285
 8000ea0:	08001285 	.word	0x08001285
 8000ea4:	08001285 	.word	0x08001285
 8000ea8:	08001285 	.word	0x08001285
 8000eac:	08001285 	.word	0x08001285
 8000eb0:	08001285 	.word	0x08001285
 8000eb4:	08001285 	.word	0x08001285
 8000eb8:	08001285 	.word	0x08001285
 8000ebc:	08001285 	.word	0x08001285
 8000ec0:	08001285 	.word	0x08001285
 8000ec4:	08001285 	.word	0x08001285
 8000ec8:	08001285 	.word	0x08001285
 8000ecc:	08001285 	.word	0x08001285
 8000ed0:	08001285 	.word	0x08001285
 8000ed4:	08001285 	.word	0x08001285
 8000ed8:	08001285 	.word	0x08001285
 8000edc:	08001285 	.word	0x08001285
 8000ee0:	08001285 	.word	0x08001285
 8000ee4:	08001285 	.word	0x08001285
 8000ee8:	08001285 	.word	0x08001285
 8000eec:	08001285 	.word	0x08001285
 8000ef0:	08001285 	.word	0x08001285
 8000ef4:	08001285 	.word	0x08001285
 8000ef8:	08001285 	.word	0x08001285
 8000efc:	08001285 	.word	0x08001285
 8000f00:	08001285 	.word	0x08001285
 8000f04:	08001285 	.word	0x08001285
 8000f08:	08001285 	.word	0x08001285
 8000f0c:	08001285 	.word	0x08001285
 8000f10:	08001285 	.word	0x08001285
 8000f14:	08001285 	.word	0x08001285
 8000f18:	08001285 	.word	0x08001285
 8000f1c:	08001285 	.word	0x08001285
 8000f20:	08001285 	.word	0x08001285
 8000f24:	08001285 	.word	0x08001285
 8000f28:	08001285 	.word	0x08001285
 8000f2c:	08001285 	.word	0x08001285
 8000f30:	08001285 	.word	0x08001285
 8000f34:	08001285 	.word	0x08001285
 8000f38:	08001285 	.word	0x08001285
 8000f3c:	08001285 	.word	0x08001285
 8000f40:	08001285 	.word	0x08001285
 8000f44:	08001285 	.word	0x08001285
 8000f48:	08001285 	.word	0x08001285
 8000f4c:	08001285 	.word	0x08001285
 8000f50:	08001285 	.word	0x08001285
 8000f54:	08001285 	.word	0x08001285
 8000f58:	08001285 	.word	0x08001285
 8000f5c:	08001285 	.word	0x08001285
 8000f60:	08001285 	.word	0x08001285
 8000f64:	08001285 	.word	0x08001285
 8000f68:	08001285 	.word	0x08001285
 8000f6c:	08001285 	.word	0x08001285
 8000f70:	08001285 	.word	0x08001285
 8000f74:	0800116d 	.word	0x0800116d
 8000f78:	08001285 	.word	0x08001285
 8000f7c:	08001285 	.word	0x08001285
 8000f80:	0800108f 	.word	0x0800108f
 8000f84:	08001063 	.word	0x08001063
 8000f88:	08001285 	.word	0x08001285
 8000f8c:	08001285 	.word	0x08001285
 8000f90:	08001285 	.word	0x08001285
 8000f94:	08001285 	.word	0x08001285
 8000f98:	08001121 	.word	0x08001121
 8000f9c:	08001285 	.word	0x08001285
 8000fa0:	080010c5 	.word	0x080010c5
 8000fa4:	08001109 	.word	0x08001109
 8000fa8:	08001285 	.word	0x08001285
 8000fac:	08001285 	.word	0x08001285
 8000fb0:	0800119d 	.word	0x0800119d
 8000fb4:	08001063 	.word	0x08001063
 8000fb8:	0800119d 	.word	0x0800119d
 8000fbc:	08001285 	.word	0x08001285
 8000fc0:	08001097 	.word	0x08001097
 8000fc4:	08001063 	.word	0x08001063
 8000fc8:	08001285 	.word	0x08001285
 8000fcc:	08001285 	.word	0x08001285
 8000fd0:	08001285 	.word	0x08001285
 8000fd4:	08001285 	.word	0x08001285
 8000fd8:	08001285 	.word	0x08001285
 8000fdc:	08001285 	.word	0x08001285
 8000fe0:	08001285 	.word	0x08001285
 8000fe4:	08001285 	.word	0x08001285
 8000fe8:	08001285 	.word	0x08001285
 8000fec:	08001045 	.word	0x08001045
 8000ff0:	08001285 	.word	0x08001285
 8000ff4:	08001285 	.word	0x08001285
 8000ff8:	08001285 	.word	0x08001285
 8000ffc:	08001285 	.word	0x08001285
 8001000:	08001285 	.word	0x08001285
 8001004:	08001285 	.word	0x08001285
 8001008:	08001285 	.word	0x08001285
 800100c:	08001285 	.word	0x08001285
 8001010:	08001285 	.word	0x08001285
 8001014:	08001285 	.word	0x08001285
 8001018:	08001147 	.word	0x08001147
 800101c:	08001285 	.word	0x08001285
 8001020:	08001285 	.word	0x08001285
 8001024:	08001109 	.word	0x08001109
 8001028:	08001285 	.word	0x08001285
 800102c:	08001285 	.word	0x08001285
 8001030:	0800119d 	.word	0x0800119d
 8001034:	08001063 	.word	0x08001063
 8001038:	0800119d 	.word	0x0800119d
 800103c:	08001285 	.word	0x08001285
 8001040:	080010ab 	.word	0x080010ab
    	case 0:
    		return;
    	case 'a':
    	{
    		if (terminator == SLCAN_CR)
 8001044:	4b50      	ldr	r3, [pc, #320]	@ (8001188 <slCanCheckCommand+0x360>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b0d      	cmp	r3, #13
 800104a:	d103      	bne.n	8001054 <slCanCheckCommand+0x22c>
    			terminator = SLCAN_LR;
 800104c:	4b4e      	ldr	r3, [pc, #312]	@ (8001188 <slCanCheckCommand+0x360>)
 800104e:	220a      	movs	r2, #10
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e002      	b.n	800105a <slCanCheckCommand+0x232>
    		else
    			terminator = SLCAN_CR;
 8001054:	4b4c      	ldr	r3, [pc, #304]	@ (8001188 <slCanCheckCommand+0x360>)
 8001056:	220d      	movs	r2, #13
 8001058:	701a      	strb	r2, [r3, #0]
    		result = terminator;
 800105a:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <slCanCheckCommand+0x360>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	73fb      	strb	r3, [r7, #15]
    		break;
 8001060:	e110      	b.n	8001284 <slCanCheckCommand+0x45c>
    	}
        case 'S':
        case 'G':
        case 'W':
        case 's':
        	if (line[1] == '2')
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b32      	cmp	r3, #50	@ 0x32
 800106a:	d104      	bne.n	8001076 <slCanCheckCommand+0x24e>
        	{
        		lin_baund_rate = 9600;
 800106c:	4b47      	ldr	r3, [pc, #284]	@ (800118c <slCanCheckCommand+0x364>)
 800106e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e003      	b.n	800107e <slCanCheckCommand+0x256>
        	} else
        	{
        		lin_baund_rate = 19200;
 8001076:	4b45      	ldr	r3, [pc, #276]	@ (800118c <slCanCheckCommand+0x364>)
 8001078:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800107c:	601a      	str	r2, [r3, #0]

        	}
        	USART1_UART_Init();
 800107e:	f7ff fe93 	bl	8000da8 <USART1_UART_Init>
        	open_lin_hw_reset();
 8001082:	f00b f8d3 	bl	800c22c <open_lin_hw_reset>
        	result = terminator;
 8001086:	4b40      	ldr	r3, [pc, #256]	@ (8001188 <slCanCheckCommand+0x360>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	73fb      	strb	r3, [r7, #15]
        	break;
 800108c:	e0fa      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'F': // Read status flags
      		result = terminator;
 800108e:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <slCanCheckCommand+0x360>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	73fb      	strb	r3, [r7, #15]
            break;
 8001094:	e0f6      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'V': // Get hardware version
            {
                slcanSetOutputChar('V');
 8001096:	2056      	movs	r0, #86	@ 0x56
 8001098:	f7ff fcd2 	bl	8000a40 <slcanSetOutputChar>
//                slcanSetOutputAsHex(VERSION_HARDWARE_MAJOR);
                slcanSetOutputAsHex(VERSION_HARDWARE_MINOR);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fd07 	bl	8000ab0 <slcanSetOutputAsHex>
                result = terminator;
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <slCanCheckCommand+0x360>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80010a8:	e0ec      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'v': // Get firmware version
            {
                slcanSetOutputChar('v');
 80010aa:	2076      	movs	r0, #118	@ 0x76
 80010ac:	f7ff fcc8 	bl	8000a40 <slcanSetOutputChar>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MAJOR);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fcfd 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MINOR);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fcfa 	bl	8000ab0 <slcanSetOutputAsHex>
                result = terminator;
 80010bc:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <slCanCheckCommand+0x360>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80010c2:	e0df      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'N': // Get serial number
            {

                slcanSetOutputChar('N');
 80010c4:	204e      	movs	r0, #78	@ 0x4e
 80010c6:	f7ff fcbb 	bl	8000a40 <slcanSetOutputChar>
                slcanSetOutputAsHex((uint8_t)(serialNumber));
 80010ca:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <slCanCheckCommand+0x368>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fced 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>8));
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <slCanCheckCommand+0x368>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	121b      	asrs	r3, r3, #8
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fce6 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>16));
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <slCanCheckCommand+0x368>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	141b      	asrs	r3, r3, #16
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fcdf 	bl	8000ab0 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>24));
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <slCanCheckCommand+0x368>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	161b      	asrs	r3, r3, #24
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fcd8 	bl	8000ab0 <slcanSetOutputAsHex>
                result = terminator;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <slCanCheckCommand+0x360>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001106:	e0bd      	b.n	8001284 <slCanCheckCommand+0x45c>
        case 'o':  // master mode
        case 'O':
            if (slcan_state == SLCAN_STATE_CONFIG)
 8001108:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <slCanCheckCommand+0x36c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 80b4 	bne.w	800127a <slCanCheckCommand+0x452>
            {
                lin_type = LIN_MASTER;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <slCanCheckCommand+0x370>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <slCanCheckCommand+0x360>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800111e:	e0ac      	b.n	800127a <slCanCheckCommand+0x452>
        case 'L': // slave mode
        	 if (slcan_state == SLCAN_STATE_CONFIG){
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <slCanCheckCommand+0x36c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f040 80aa 	bne.w	800127e <slCanCheckCommand+0x456>
        		 result = terminator;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <slCanCheckCommand+0x360>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	73fb      	strb	r3, [r7, #15]
				 lin_type = LIN_SLAVE;
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <slCanCheckCommand+0x370>)
 8001132:	2202      	movs	r2, #2
 8001134:	701a      	strb	r2, [r3, #0]
				 slcan_state = SLCAN_STATE_OPEN;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <slCanCheckCommand+0x36c>)
 8001138:	2202      	movs	r2, #2
 800113a:	701a      	strb	r2, [r3, #0]
				 open_lin_hw_reset();
 800113c:	f00b f876 	bl	800c22c <open_lin_hw_reset>
				 lin_slcan_reset();
 8001140:	f7ff fb56 	bl	80007f0 <lin_slcan_reset>
        	 }
        	 break;
 8001144:	e09b      	b.n	800127e <slCanCheckCommand+0x456>
        case 'l':  // monitor
            if (slcan_state == SLCAN_STATE_CONFIG)
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <slCanCheckCommand+0x36c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 8099 	bne.w	8001282 <slCanCheckCommand+0x45a>
            {
				result = terminator;
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <slCanCheckCommand+0x360>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	73fb      	strb	r3, [r7, #15]
                lin_type = LIN_MONITOR;
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <slCanCheckCommand+0x370>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
                slcan_state = SLCAN_STATE_OPEN;
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <slCanCheckCommand+0x36c>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
            	open_lin_hw_reset();
 8001162:	f00b f863 	bl	800c22c <open_lin_hw_reset>
            	lin_slcan_reset();
 8001166:	f7ff fb43 	bl	80007f0 <lin_slcan_reset>
            }
            break;
 800116a:	e08a      	b.n	8001282 <slCanCheckCommand+0x45a>

        case 'C': // Close LIN channel
            slcan_state = SLCAN_STATE_CONFIG;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <slCanCheckCommand+0x36c>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
            result = terminator;
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <slCanCheckCommand+0x360>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	73fb      	strb	r3, [r7, #15]
            lin_type = LIN_MASTER;
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <slCanCheckCommand+0x370>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
            break;
 800117e:	e081      	b.n	8001284 <slCanCheckCommand+0x45c>
 8001180:	200003b4 	.word	0x200003b4
 8001184:	20000434 	.word	0x20000434
 8001188:	20000001 	.word	0x20000001
 800118c:	20000008 	.word	0x20000008
 8001190:	20000438 	.word	0x20000438
 8001194:	20000370 	.word	0x20000370
 8001198:	20000000 	.word	0x20000000
        case 'R':
        case 'r': // Transmit header
        case 'T':
        case 't': // Transmit full frame
            // shame on you that you put this code here ...
        	if (line[1] == '3')
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b33      	cmp	r3, #51	@ 0x33
 80011a4:	d112      	bne.n	80011cc <slCanCheckCommand+0x3a4>
			{
				if (line[2] == '1')
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3302      	adds	r3, #2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b31      	cmp	r3, #49	@ 0x31
 80011ae:	d103      	bne.n	80011b8 <slCanCheckCommand+0x390>
					classicChecksum  = 1;
 80011b0:	4b46      	ldr	r3, [pc, #280]	@ (80012cc <slCanCheckCommand+0x4a4>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e002      	b.n	80011be <slCanCheckCommand+0x396>
				else
					classicChecksum  = 0;
 80011b8:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <slCanCheckCommand+0x4a4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				 slcanSetOutputChar('Z');
 80011be:	205a      	movs	r0, #90	@ 0x5a
 80011c0:	f7ff fc3e 	bl	8000a40 <slcanSetOutputChar>
				result = terminator;
 80011c4:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	73fb      	strb	r3, [r7, #15]
				break;
 80011ca:	e05b      	b.n	8001284 <slCanCheckCommand+0x45c>
			}

            // baud rate selection
            if (line[2] == '4')
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3302      	adds	r3, #2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b34      	cmp	r3, #52	@ 0x34
 80011d4:	d114      	bne.n	8001200 <slCanCheckCommand+0x3d8>
            {
        		uint32_t temp;
        		parseHex(&line[3], 4, &temp);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3303      	adds	r3, #3
 80011da:	1d3a      	adds	r2, r7, #4
 80011dc:	2104      	movs	r1, #4
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fcf8 	bl	8000bd4 <parseHex>
        		lin_baund_rate = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	@ (80012d4 <slCanCheckCommand+0x4ac>)
 80011e8:	6013      	str	r3, [r2, #0]
        		USART1_UART_Init();
 80011ea:	f7ff fddd 	bl	8000da8 <USART1_UART_Init>
        		open_lin_hw_reset();
 80011ee:	f00b f81d 	bl	800c22c <open_lin_hw_reset>
        		 slcanSetOutputChar('Z');
 80011f2:	205a      	movs	r0, #90	@ 0x5a
 80011f4:	f7ff fc24 	bl	8000a40 <slcanSetOutputChar>
        		result = terminator;
 80011f8:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	73fb      	strb	r3, [r7, #15]
        		break;
 80011fe:	e041      	b.n	8001284 <slCanCheckCommand+0x45c>
            }


        	switch (lin_type)
 8001200:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <slCanCheckCommand+0x4b0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d006      	beq.n	8001216 <slCanCheckCommand+0x3ee>
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc32      	bgt.n	8001272 <slCanCheckCommand+0x44a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <slCanCheckCommand+0x3ee>
 8001210:	2b01      	cmp	r3, #1
 8001212:	d015      	beq.n	8001240 <slCanCheckCommand+0x418>
	                        result = terminator;
	                    }
	                }
					break;
				default:
					break;
 8001214:	e02d      	b.n	8001272 <slCanCheckCommand+0x44a>
	                if (addLinMasterRow(line) == 1){
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff f9d8 	bl	80005cc <addLinMasterRow>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d10a      	bne.n	8001238 <slCanCheckCommand+0x410>
	                	if (line[0] < 'Z') slcanSetOutputChar('Z');
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b59      	cmp	r3, #89	@ 0x59
 8001228:	d803      	bhi.n	8001232 <slCanCheckCommand+0x40a>
 800122a:	205a      	movs	r0, #90	@ 0x5a
 800122c:	f7ff fc08 	bl	8000a40 <slcanSetOutputChar>
 8001230:	e002      	b.n	8001238 <slCanCheckCommand+0x410>
	                	else slcanSetOutputChar('z');
 8001232:	207a      	movs	r0, #122	@ 0x7a
 8001234:	f7ff fc04 	bl	8000a40 <slcanSetOutputChar>
	                result = terminator;
 8001238:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	73fb      	strb	r3, [r7, #15]
					break;
 800123e:	e01b      	b.n	8001278 <slCanCheckCommand+0x450>
	                if (slcan_state == SLCAN_STATE_OPEN)
 8001240:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <slCanCheckCommand+0x4b4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d116      	bne.n	8001276 <slCanCheckCommand+0x44e>
	                    if (transmitStd(line) == 1) {
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f7ff fd20 	bl	8000c8e <transmitStd>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d110      	bne.n	8001276 <slCanCheckCommand+0x44e>
	                        if (line[0] < 'Z') slcanSetOutputChar('Z');
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b59      	cmp	r3, #89	@ 0x59
 800125a:	d803      	bhi.n	8001264 <slCanCheckCommand+0x43c>
 800125c:	205a      	movs	r0, #90	@ 0x5a
 800125e:	f7ff fbef 	bl	8000a40 <slcanSetOutputChar>
 8001262:	e002      	b.n	800126a <slCanCheckCommand+0x442>
	                        else slcanSetOutputChar('z');
 8001264:	207a      	movs	r0, #122	@ 0x7a
 8001266:	f7ff fbeb 	bl	8000a40 <slcanSetOutputChar>
	                        result = terminator;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <slCanCheckCommand+0x4a8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	73fb      	strb	r3, [r7, #15]
					break;
 8001270:	e001      	b.n	8001276 <slCanCheckCommand+0x44e>
					break;
 8001272:	bf00      	nop
 8001274:	e006      	b.n	8001284 <slCanCheckCommand+0x45c>
					break;
 8001276:	bf00      	nop
        	}
            break;
 8001278:	e004      	b.n	8001284 <slCanCheckCommand+0x45c>
            break;
 800127a:	bf00      	nop
 800127c:	e002      	b.n	8001284 <slCanCheckCommand+0x45c>
        	 break;
 800127e:	bf00      	nop
 8001280:	e000      	b.n	8001284 <slCanCheckCommand+0x45c>
            break;
 8001282:	bf00      	nop
    }

    if ((line[0] == 'b') && (line[1] == 'o') && (line[2] == 'o') && (line[3] == 't'))
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b62      	cmp	r3, #98	@ 0x62
 800128a:	d110      	bne.n	80012ae <slCanCheckCommand+0x486>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	3301      	adds	r3, #1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b6f      	cmp	r3, #111	@ 0x6f
 8001294:	d10b      	bne.n	80012ae <slCanCheckCommand+0x486>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3302      	adds	r3, #2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b6f      	cmp	r3, #111	@ 0x6f
 800129e:	d106      	bne.n	80012ae <slCanCheckCommand+0x486>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3303      	adds	r3, #3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b74      	cmp	r3, #116	@ 0x74
 80012a8:	d101      	bne.n	80012ae <slCanCheckCommand+0x486>
    {
    	RebootToBootloader();
 80012aa:	f7ff f92d 	bl	8000508 <RebootToBootloader>
    }

   line[0] = 0;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
   slcanSetOutputChar(result);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fbc2 	bl	8000a40 <slcanSetOutputChar>
   slcanOutputFlush();
 80012bc:	f7ff fc0e 	bl	8000adc <slcanOutputFlush>
 80012c0:	e000      	b.n	80012c4 <slCanCheckCommand+0x49c>
    		return;
 80012c2:	bf00      	nop
}
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200003f2 	.word	0x200003f2
 80012d0:	20000001 	.word	0x20000001
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000370 	.word	0x20000370

080012e0 <slcanReciveCanFrame>:
 * @param  canmsg Pointer to can message
 * 			step Current step
 * @retval Next character to print out
 */
uint8_t slcanReciveCanFrame(open_lin_frame_slot_t *pRxMsg)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	open_lin_pid_t pid;

    slcanSetOutputChar('t');
 80012e8:	2074      	movs	r0, #116	@ 0x74
 80012ea:	f7ff fba9 	bl	8000a40 <slcanSetOutputChar>

    pid = pRxMsg->pid & 0x3F;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012f6:	73bb      	strb	r3, [r7, #14]

    slCanSendNibble(0); // for slcan compatibility
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fbc1 	bl	8000a80 <slCanSendNibble>
    slcanSetOutputAsHex(pid);
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fbd5 	bl	8000ab0 <slcanSetOutputAsHex>
	slCanSendNibble(pRxMsg->data_length);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fbb8 	bl	8000a80 <slCanSendNibble>
	if (pRxMsg->data_length > 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d012      	beq.n	800133e <slcanReciveCanFrame+0x5e>
	{
		for (i = 0;  i != pRxMsg->data_length; i ++)
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e00a      	b.n	8001334 <slcanReciveCanFrame+0x54>
		{
			slcanSetOutputAsHex(pRxMsg->data_ptr[i]);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fbc1 	bl	8000ab0 <slcanSetOutputAsHex>
		for (i = 0;  i != pRxMsg->data_length; i ++)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	789b      	ldrb	r3, [r3, #2]
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	429a      	cmp	r2, r3
 800133c:	d1ef      	bne.n	800131e <slcanReciveCanFrame+0x3e>
		}
	}
	slcanSetOutputChar(terminator);
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <slcanReciveCanFrame+0x78>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fb7c 	bl	8000a40 <slcanSetOutputChar>
	slcanOutputFlush();
 8001348:	f7ff fbc8 	bl	8000adc <slcanOutputFlush>
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000001 	.word	0x20000001

0800135c <millis>:
#include "stm32g4xx_hal.h"
#include "util.h"

uint32_t millis()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001360:	f000 fcc4 	bl	8001cec <HAL_GetTick>
 8001364:	4603      	mov	r3, r0
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a2e      	ldr	r2, [pc, #184]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001388:	f043 0320 	orr.w	r3, r3, #32
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <MX_GPIO_Init+0xd4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f000 ffb9 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2170      	movs	r1, #112	@ 0x70
 80013da:	481a      	ldr	r0, [pc, #104]	@ (8001444 <MX_GPIO_Init+0xd8>)
 80013dc:	f000 ffb4 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e0:	2320      	movs	r3, #32
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fa:	f000 fe23 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001416:	f000 fe15 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800141a:	2370      	movs	r3, #112	@ 0x70
 800141c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4619      	mov	r1, r3
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_GPIO_Init+0xd8>)
 8001432:	f000 fe07 	bl	8002044 <HAL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400

08001448 <__io_putchar>:
uint8_t Uart2RxFifo;
extern void bootloaderSwitcher();

extern UART_HandleTypeDef huart2;
int __io_putchar(int ch)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 8001450:	1d39      	adds	r1, r7, #4
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	2201      	movs	r2, #1
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <__io_putchar+0x20>)
 800145a:	f004 f8c7 	bl	80055ec <HAL_UART_Transmit>
    return ch;
 800145e:	687b      	ldr	r3, [r7, #4]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000524 	.word	0x20000524

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	serialNumber = uid[0] ^ uid[1] ^ uid[2];
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <main+0x60>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <main+0x60>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	405a      	eors	r2, r3
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <main+0x60>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3308      	adds	r3, #8
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4053      	eors	r3, r2
 800148a:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <main+0x64>)
 800148c:	6013      	str	r3, [r2, #0]
	bootloaderSwitcher();
 800148e:	f7ff f842 	bl	8000516 <bootloaderSwitcher>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001492:	f000 fc00 	bl	8001c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001496:	f000 f823 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149a:	f7ff ff67 	bl	800136c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800149e:	f000 fa6d 	bl	800197c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014a2:	f000 fabd 	bl	8001a20 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 80014a6:	f00a f94d 	bl	800b744 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &Uart2RxFifo, 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	4909      	ldr	r1, [pc, #36]	@ (80014d4 <main+0x68>)
 80014ae:	480a      	ldr	r0, [pc, #40]	@ (80014d8 <main+0x6c>)
 80014b0:	f004 f92a 	bl	8005708 <HAL_UART_Receive_IT>
  printf("hello\n");
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <main+0x70>)
 80014b6:	f00b fc27 	bl	800cd08 <puts>
  // LIN_EN
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2120      	movs	r1, #32
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f000 ff41 	bl	8002348 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	slCanCheckCommand();
 80014c6:	f7ff fcaf 	bl	8000e28 <slCanCheckCommand>
 80014ca:	e7fc      	b.n	80014c6 <main+0x5a>
 80014cc:	20000004 	.word	0x20000004
 80014d0:	20000438 	.word	0x20000438
 80014d4:	2000043c 	.word	0x2000043c
 80014d8:	20000490 	.word	0x20000490
 80014dc:	0800d464 	.word	0x0800d464

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	@ 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2238      	movs	r2, #56	@ 0x38
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00b fcea 	bl	800cec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001502:	2000      	movs	r0, #0
 8001504:	f002 fc88 	bl	8003e18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001508:	2321      	movs	r3, #33	@ 0x21
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001510:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001512:	2301      	movs	r3, #1
 8001514:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	2303      	movs	r3, #3
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800151e:	2302      	movs	r3, #2
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001522:	2355      	movs	r3, #85	@ 0x55
 8001524:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fd22 	bl	8003f80 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001542:	f000 f865 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2303      	movs	r3, #3
 800154c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2104      	movs	r1, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f820 	bl	80045a4 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800156a:	f000 f851 	bl	8001610 <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3750      	adds	r7, #80	@ 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	extern LinType_t lin_type;
	uint8_t rbyte = Uart2RxFifo;
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_UART_RxCpltCallback+0x54>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	73fb      	strb	r3, [r7, #15]
	if (slcan_state == SLCAN_STATE_OPEN)
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_UART_RxCpltCallback+0x58>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d114      	bne.n	80015b8 <HAL_UART_RxCpltCallback+0x40>
	{
		switch (lin_type)
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_UART_RxCpltCallback+0x5c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_UART_RxCpltCallback+0x24>
 8001596:	2b02      	cmp	r3, #2
 8001598:	d005      	beq.n	80015a6 <HAL_UART_RxCpltCallback+0x2e>
 800159a:	e008      	b.n	80015ae <HAL_UART_RxCpltCallback+0x36>
		{
		case LIN_MASTER:
			open_lin_master_dl_rx(rbyte);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	4618      	mov	r0, r3
 80015a0:	f00b f840 	bl	800c624 <open_lin_master_dl_rx>
			break;
 80015a4:	e008      	b.n	80015b8 <HAL_UART_RxCpltCallback+0x40>
		case LIN_SLAVE:
			open_lin_slave_rx_header(rbyte);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00b f9c9 	bl	800c940 <open_lin_slave_rx_header>
		default: /* Monitor */
			lin_slcan_rx(rbyte);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f9b9 	bl	8000928 <lin_slcan_rx>
			break;
 80015b6:	bf00      	nop
		}
	}
	HAL_UART_Receive_IT(huart, &Uart2RxFifo, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	4904      	ldr	r1, [pc, #16]	@ (80015cc <HAL_UART_RxCpltCallback+0x54>)
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f004 f8a3 	bl	8005708 <HAL_UART_Receive_IT>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000043c 	.word	0x2000043c
 80015d0:	20000370 	.word	0x20000370
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015fe:	f000 fb63 	bl	8001cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012c00 	.word	0x40012c00

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <Error_Handler+0x8>

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_MspInit+0x44>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_MspInit+0x44>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6613      	str	r3, [r2, #96]	@ 0x60
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_MspInit+0x44>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_MspInit+0x44>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x44>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6593      	str	r3, [r2, #88]	@ 0x58
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x44>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001652:	f002 fc85 	bl	8003f60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	@ 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001674:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <HAL_InitTick+0xc4>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001678:	4a2b      	ldr	r2, [pc, #172]	@ (8001728 <HAL_InitTick+0xc4>)
 800167a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800167e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001680:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <HAL_InitTick+0xc4>)
 8001682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800168c:	f107 020c 	add.w	r2, r7, #12
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f003 f95a 	bl	8004950 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800169c:	f003 f942 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 80016a0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a4:	4a21      	ldr	r2, [pc, #132]	@ (800172c <HAL_InitTick+0xc8>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	3b01      	subs	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <HAL_InitTick+0xcc>)
 80016b2:	4a20      	ldr	r2, [pc, #128]	@ (8001734 <HAL_InitTick+0xd0>)
 80016b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <HAL_InitTick+0xcc>)
 80016b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016be:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_InitTick+0xcc>)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_InitTick+0xcc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_InitTick+0xcc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80016d0:	4817      	ldr	r0, [pc, #92]	@ (8001730 <HAL_InitTick+0xcc>)
 80016d2:	f003 fba5 	bl	8004e20 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11b      	bne.n	800171c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016e4:	4812      	ldr	r0, [pc, #72]	@ (8001730 <HAL_InitTick+0xcc>)
 80016e6:	f003 fbfd 	bl	8004ee4 <HAL_TIM_Base_Start_IT>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d111      	bne.n	800171c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016f8:	2019      	movs	r0, #25
 80016fa:	f000 fbd5 	bl	8001ea8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d808      	bhi.n	8001716 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	2019      	movs	r0, #25
 800170a:	f000 fbb3 	bl	8001e74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_InitTick+0xd4>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e002      	b.n	800171c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800171c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001720:	4618      	mov	r0, r3
 8001722:	3730      	adds	r7, #48	@ 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	431bde83 	.word	0x431bde83
 8001730:	20000440 	.word	0x20000440
 8001734:	40012c00 	.word	0x40012c00
 8001738:	20000010 	.word	0x20000010

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <NMI_Handler+0x4>

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <MemManage_Handler+0x4>

08001754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <UsageFault_Handler+0x4>

08001764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <USB_LP_IRQHandler+0x10>)
 80017a2:	f000 fef3 	bl	800258c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20001290 	.word	0x20001290

080017b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  extern uint32_t slcan_lin_timeout_counter ;

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b4:	480a      	ldr	r0, [pc, #40]	@ (80017e0 <TIM1_UP_TIM16_IRQHandler+0x30>)
 80017b6:	f003 fbff 	bl	8004fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  slCanHandler(1);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff f9ae 	bl	8000b1c <slCanHandler>

  if ((slcan_lin_timeout_counter != 0) && (HAL_GetTick() - slcan_lin_timeout_counter > 3))
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <TIM1_UP_TIM16_IRQHandler+0x34>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <TIM1_UP_TIM16_IRQHandler+0x2c>
 80017c8:	f000 fa90 	bl	8001cec <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <TIM1_UP_TIM16_IRQHandler+0x34>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d901      	bls.n	80017dc <TIM1_UP_TIM16_IRQHandler+0x2c>
  {
	  lin_slcan_rx_timeout_handler();
 80017d8:	f7ff f848 	bl	800086c <lin_slcan_rx_timeout_handler>
  }

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000440 	.word	0x20000440
 80017e4:	20000364 	.word	0x20000364

080017e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <USART1_IRQHandler+0x10>)
 80017ee:	f003 ffd7 	bl	80057a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000490 	.word	0x20000490

080017fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <USART2_IRQHandler+0x10>)
 8001802:	f003 ffcd 	bl	80057a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000524 	.word	0x20000524

08001810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00a      	b.n	8001838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001822:	f3af 8000 	nop.w
 8001826:	4601      	mov	r1, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf0      	blt.n	8001822 <_read+0x12>
  }

  return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e009      	b.n	8001870 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fdef 	bl	8001448 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf1      	blt.n	800185c <_write+0x12>
  }
  return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
  return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f00b fb22 	bl	800cf64 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20008000 	.word	0x20008000
 800194c:	00000800 	.word	0x00000800
 8001950:	2000048c 	.word	0x2000048c
 8001954:	20001910 	.word	0x20001910

08001958 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001980:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 8001982:	4a26      	ldr	r2, [pc, #152]	@ (8001a1c <MX_USART1_UART_Init+0xa0>)
 8001984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001986:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019c0:	2208      	movs	r2, #8
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019ca:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 80019cc:	2120      	movs	r1, #32
 80019ce:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019d0:	f003 fd9c 	bl	800550c <HAL_LIN_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80019da:	f7ff fe19 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019de:	2100      	movs	r1, #0
 80019e0:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019e2:	f005 fe26 	bl	8007632 <HAL_UARTEx_SetTxFifoThreshold>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART1_UART_Init+0x74>
  {
    Error_Handler();
 80019ec:	f7ff fe10 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f0:	2100      	movs	r1, #0
 80019f2:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 80019f4:	f005 fe5b 	bl	80076ae <HAL_UARTEx_SetRxFifoThreshold>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART1_UART_Init+0x86>
  {
    Error_Handler();
 80019fe:	f7ff fe07 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_USART1_UART_Init+0x9c>)
 8001a04:	f005 fddc 	bl	80075c0 <HAL_UARTEx_DisableFifoMode>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART1_UART_Init+0x96>
  {
    Error_Handler();
 8001a0e:	f7ff fdff 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000490 	.word	0x20000490
 8001a1c:	40013800 	.word	0x40013800

08001a20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a26:	4a23      	ldr	r2, [pc, #140]	@ (8001ab4 <MX_USART2_UART_Init+0x94>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a6a:	f003 fcff 	bl	800546c <HAL_UART_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a74:	f7ff fdcc 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a7c:	f005 fdd9 	bl	8007632 <HAL_UARTEx_SetTxFifoThreshold>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a86:	f7ff fdc3 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a8e:	f005 fe0e 	bl	80076ae <HAL_UARTEx_SetRxFifoThreshold>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a98:	f7ff fdba 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <MX_USART2_UART_Init+0x90>)
 8001a9e:	f005 fd8f 	bl	80075c0 <HAL_UARTEx_DisableFifoMode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f7ff fdb2 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000524 	.word	0x20000524
 8001ab4:	40004400 	.word	0x40004400

08001ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b09e      	sub	sp, #120	@ 0x78
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	f107 0320 	add.w	r3, r7, #32
 8001ad4:	2244      	movs	r2, #68	@ 0x44
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00b f9f5 	bl	800cec8 <memset>
  if(uartHandle->Instance==USART1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a54      	ldr	r2, [pc, #336]	@ (8001c34 <HAL_UART_MspInit+0x17c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d140      	bne.n	8001b6a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 ffa3 	bl	8004a40 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b00:	f7ff fd86 	bl	8001610 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b04:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b08:	4a4b      	ldr	r2, [pc, #300]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b10:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	4a45      	ldr	r2, [pc, #276]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b38:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b46:	2307      	movs	r3, #7
 8001b48:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b54:	f000 fa76 	bl	8002044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2025      	movs	r0, #37	@ 0x25
 8001b5e:	f000 f989 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b62:	2025      	movs	r0, #37	@ 0x25
 8001b64:	f000 f9a0 	bl	8001ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b68:	e060      	b.n	8001c2c <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a33      	ldr	r2, [pc, #204]	@ (8001c3c <HAL_UART_MspInit+0x184>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d15b      	bne.n	8001c2c <HAL_UART_MspInit+0x174>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 ff5d 	bl	8004a40 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001b8c:	f7ff fd40 	bl	8001610 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b90:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	4a28      	ldr	r2, [pc, #160]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9c:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bac:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb4:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <HAL_UART_MspInit+0x180>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bdc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bea:	2307      	movs	r3, #7
 8001bec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf8:	f000 fa24 	bl	8002044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c14:	4619      	mov	r1, r3
 8001c16:	480a      	ldr	r0, [pc, #40]	@ (8001c40 <HAL_UART_MspInit+0x188>)
 8001c18:	f000 fa14 	bl	8002044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2026      	movs	r0, #38	@ 0x26
 8001c22:	f000 f927 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c26:	2026      	movs	r0, #38	@ 0x26
 8001c28:	f000 f93e 	bl	8001ea8 <HAL_NVIC_EnableIRQ>
}
 8001c2c:	bf00      	nop
 8001c2e:	3778      	adds	r7, #120	@ 0x78
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40004400 	.word	0x40004400
 8001c40:	48000400 	.word	0x48000400

08001c44 <Reset_Handler>:
 8001c44:	480d      	ldr	r0, [pc, #52]	@ (8001c7c <LoopForever+0x2>)
 8001c46:	4685      	mov	sp, r0
 8001c48:	f7ff fe86 	bl	8001958 <SystemInit>
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <LoopForever+0x6>)
 8001c4e:	490d      	ldr	r1, [pc, #52]	@ (8001c84 <LoopForever+0xa>)
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <LoopForever+0xe>)
 8001c52:	2300      	movs	r3, #0
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:
 8001c56:	58d4      	ldr	r4, [r2, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:
 8001c5c:	18c4      	adds	r4, r0, r3
 8001c5e:	428c      	cmp	r4, r1
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <LoopForever+0x12>)
 8001c64:	4c0a      	ldr	r4, [pc, #40]	@ (8001c90 <LoopForever+0x16>)
 8001c66:	2300      	movs	r3, #0
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:
 8001c6e:	42a2      	cmp	r2, r4
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>
 8001c72:	f00b f97d 	bl	800cf70 <__libc_init_array>
 8001c76:	f7ff fbf9 	bl	800146c <main>

08001c7a <LoopForever>:
 8001c7a:	e7fe      	b.n	8001c7a <LoopForever>
 8001c7c:	20008000 	.word	0x20008000
 8001c80:	20000000 	.word	0x20000000
 8001c84:	200001ec 	.word	0x200001ec
 8001c88:	0800d504 	.word	0x0800d504
 8001c8c:	200001ec 	.word	0x200001ec
 8001c90:	2000190c 	.word	0x2000190c

08001c94 <ADC1_2_IRQHandler>:
 8001c94:	e7fe      	b.n	8001c94 <ADC1_2_IRQHandler>

08001c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 f8dc 	bl	8001e5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f7ff fcdc 	bl	8001664 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	e001      	b.n	8001cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb8:	f7ff fcb0 	bl	800161c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cbc:	79fb      	ldrb	r3, [r7, #7]

}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_IncTick+0x1c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_IncTick+0x20>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a03      	ldr	r2, [pc, #12]	@ (8001ce4 <HAL_IncTick+0x1c>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	200005b8 	.word	0x200005b8
 8001ce8:	20000014 	.word	0x20000014

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200005b8 	.word	0x200005b8

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	@ (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	@ (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff4c 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e82:	f7ff ff63 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001e86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f7ff ffb3 	bl	8001df8 <NVIC_EncodePriority>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff82 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff56 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d005      	beq.n	8001ee8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e037      	b.n	8001f58 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 020e 	bic.w	r2, r2, #14
 8001ef6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f06:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f34:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f4c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f56:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d00d      	beq.n	8001faa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2204      	movs	r2, #4
 8001f92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e047      	b.n	800203a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 020e 	bic.w	r2, r2, #14
 8001fb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f003 021f 	and.w	r2, r3, #31
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ff6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800200e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002018:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
    }
  }
  return status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002052:	e15a      	b.n	800230a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 814c 	beq.w	8002304 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d005      	beq.n	8002084 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002080:	2b02      	cmp	r3, #2
 8002082:	d130      	bne.n	80020e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ba:	2201      	movs	r2, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 0201 	and.w	r2, r3, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d017      	beq.n	8002122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d123      	bne.n	8002176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0203 	and.w	r2, r3, #3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80a6 	beq.w	8002304 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <HAL_GPIO_Init+0x2e4>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002328 <HAL_GPIO_Init+0x2e4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80021c4:	4b58      	ldr	r3, [pc, #352]	@ (8002328 <HAL_GPIO_Init+0x2e4>)
 80021c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d0:	4a56      	ldr	r2, [pc, #344]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021fa:	d01f      	beq.n	800223c <HAL_GPIO_Init+0x1f8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a4c      	ldr	r2, [pc, #304]	@ (8002330 <HAL_GPIO_Init+0x2ec>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d019      	beq.n	8002238 <HAL_GPIO_Init+0x1f4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a4b      	ldr	r2, [pc, #300]	@ (8002334 <HAL_GPIO_Init+0x2f0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d013      	beq.n	8002234 <HAL_GPIO_Init+0x1f0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <HAL_GPIO_Init+0x2f4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00d      	beq.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a49      	ldr	r2, [pc, #292]	@ (800233c <HAL_GPIO_Init+0x2f8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d007      	beq.n	800222c <HAL_GPIO_Init+0x1e8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a48      	ldr	r2, [pc, #288]	@ (8002340 <HAL_GPIO_Init+0x2fc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_GPIO_Init+0x1e4>
 8002224:	2305      	movs	r3, #5
 8002226:	e00a      	b.n	800223e <HAL_GPIO_Init+0x1fa>
 8002228:	2306      	movs	r3, #6
 800222a:	e008      	b.n	800223e <HAL_GPIO_Init+0x1fa>
 800222c:	2304      	movs	r3, #4
 800222e:	e006      	b.n	800223e <HAL_GPIO_Init+0x1fa>
 8002230:	2303      	movs	r3, #3
 8002232:	e004      	b.n	800223e <HAL_GPIO_Init+0x1fa>
 8002234:	2302      	movs	r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x1fa>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_GPIO_Init+0x1fa>
 800223c:	2300      	movs	r3, #0
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	f002 0203 	and.w	r2, r2, #3
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	4093      	lsls	r3, r2
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800224e:	4937      	ldr	r1, [pc, #220]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800225c:	4b39      	ldr	r3, [pc, #228]	@ (8002344 <HAL_GPIO_Init+0x300>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002280:	4a30      	ldr	r2, [pc, #192]	@ (8002344 <HAL_GPIO_Init+0x300>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002286:	4b2f      	ldr	r3, [pc, #188]	@ (8002344 <HAL_GPIO_Init+0x300>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022aa:	4a26      	ldr	r2, [pc, #152]	@ (8002344 <HAL_GPIO_Init+0x300>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022b0:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_GPIO_Init+0x300>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_GPIO_Init+0x300>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022da:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <HAL_GPIO_Init+0x300>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022fe:	4a11      	ldr	r2, [pc, #68]	@ (8002344 <HAL_GPIO_Init+0x300>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	f47f ae9d 	bne.w	8002054 <HAL_GPIO_Init+0x10>
  }
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000
 8002330:	48000400 	.word	0x48000400
 8002334:	48000800 	.word	0x48000800
 8002338:	48000c00 	.word	0x48000c00
 800233c:	48001000 	.word	0x48001000
 8002340:	48001400 	.word	0x48001400
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002364:	e002      	b.n	800236c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43d9      	mvns	r1, r3
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	400b      	ands	r3, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	619a      	str	r2, [r3, #24]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0c0      	b.n	8002540 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f009 fbce 	bl	800bb74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 fa06 	bl	80077f6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e03e      	b.n	800246e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3311      	adds	r3, #17
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3310      	adds	r3, #16
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	3313      	adds	r3, #19
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3320      	adds	r3, #32
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	3324      	adds	r3, #36	@ 0x24
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	791b      	ldrb	r3, [r3, #4]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	429a      	cmp	r2, r3
 8002476:	d3bb      	bcc.n	80023f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e044      	b.n	8002508 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	3301      	adds	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	791b      	ldrb	r3, [r3, #4]
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3b5      	bcc.n	800247e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800251e:	f005 f985 	bl	800782c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7a9b      	ldrb	r3, [r3, #10]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f001 fc42 	bl	8003dc2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_PCD_Start+0x16>
 800255a:	2302      	movs	r3, #2
 800255c:	e012      	b.n	8002584 <HAL_PCD_Start+0x3c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f005 f92c 	bl	80077c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f007 fbed 	bl	8009d54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f007 fbf2 	bl	8009d82 <USB_ReadInterrupts>
 800259e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fb06 	bl	8002bbc <PCD_EP_ISR_Handler>

    return;
 80025b0:	e110      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ce:	b292      	uxth	r2, r2
 80025d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f009 fb5e 	bl	800bc96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025da:	2100      	movs	r1, #0
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8fc 	bl	80027da <HAL_PCD_SetAddress>

    return;
 80025e2:	e0f7      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002600:	b292      	uxth	r2, r2
 8002602:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002606:	e0e5      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002624:	b292      	uxth	r2, r2
 8002626:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800262a:	e0d3      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d034      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	b292      	uxth	r2, r2
 800264a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	b292      	uxth	r2, r2
 8002662:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002678:	2100      	movs	r1, #0
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f009 fcfe 	bl	800c07c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f009 fb41 	bl	800bd08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002698:	b292      	uxth	r2, r2
 800269a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800269e:	e099      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d027      	beq.n	80026fa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0208 	orr.w	r2, r2, #8
 80026bc:	b292      	uxth	r2, r2
 80026be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d4:	b292      	uxth	r2, r2
 80026d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0204 	orr.w	r2, r2, #4
 80026ec:	b292      	uxth	r2, r2
 80026ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f009 faee 	bl	800bcd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026f8:	e06c      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d040      	beq.n	8002786 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002716:	b292      	uxth	r2, r2
 8002718:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d12b      	bne.n	800277e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0204 	orr.w	r2, r2, #4
 8002738:	b292      	uxth	r2, r2
 800273a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0208 	orr.w	r2, r2, #8
 8002750:	b292      	uxth	r2, r2
 8002752:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002766:	b29b      	uxth	r3, r3
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002774:	2101      	movs	r1, #1
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f009 fc80 	bl	800c07c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800277c:	e02a      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f009 faa8 	bl	800bcd4 <HAL_PCD_SuspendCallback>
    return;
 8002784:	e026      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00f      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027a2:	b292      	uxth	r2, r2
 80027a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f009 fa66 	bl	800bc7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027ae:	e011      	b.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027cc:	b292      	uxth	r2, r2
 80027ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027d2:	bf00      	nop
  }
}
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_SetAddress+0x1a>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e012      	b.n	800281a <HAL_PCD_SetAddress+0x40>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f007 fa8e 	bl	8009d2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	4608      	mov	r0, r1
 800282c:	4611      	mov	r1, r2
 800282e:	461a      	mov	r2, r3
 8002830:	4603      	mov	r3, r0
 8002832:	70fb      	strb	r3, [r7, #3]
 8002834:	460b      	mov	r3, r1
 8002836:	803b      	strh	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002844:	2b00      	cmp	r3, #0
 8002846:	da0e      	bge.n	8002866 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	f003 0207 	and.w	r2, r3, #7
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	3310      	adds	r3, #16
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	705a      	strb	r2, [r3, #1]
 8002864:	e00e      	b.n	8002884 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 0207 	and.w	r2, r3, #7
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002890:	883b      	ldrh	r3, [r7, #0]
 8002892:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	78ba      	ldrb	r2, [r7, #2]
 800289e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028a0:	78bb      	ldrb	r3, [r7, #2]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d102      	bne.n	80028ac <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_PCD_EP_Open+0x98>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e00e      	b.n	80028d8 <HAL_PCD_EP_Open+0xb6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68f9      	ldr	r1, [r7, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 ffcd 	bl	8007868 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80028d6:	7afb      	ldrb	r3, [r7, #11]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	da0e      	bge.n	8002912 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	f003 0207 	and.w	r2, r3, #7
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	3310      	adds	r3, #16
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	705a      	strb	r2, [r3, #1]
 8002910:	e00e      	b.n	8002930 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	f003 0207 	and.w	r2, r3, #7
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_PCD_EP_Close+0x6a>
 8002946:	2302      	movs	r3, #2
 8002948:	e00e      	b.n	8002968 <HAL_PCD_EP_Close+0x88>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	4618      	mov	r0, r3
 800295a:	f005 fb49 	bl	8007ff0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	460b      	mov	r3, r1
 800297e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002980:	7afb      	ldrb	r3, [r7, #11]
 8002982:	f003 0207 	and.w	r2, r3, #7
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4413      	add	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2200      	movs	r2, #0
 80029ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b0:	7afb      	ldrb	r3, [r7, #11]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6979      	ldr	r1, [r7, #20]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f005 fd01 	bl	80083ca <USB_EPStartXfer>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f003 0207 	and.w	r2, r3, #7
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80029f4:	681b      	ldr	r3, [r3, #0]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	f003 0207 	and.w	r2, r3, #7
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	3310      	adds	r3, #16
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6979      	ldr	r1, [r7, #20]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f005 fcb2 	bl	80083ca <USB_EPStartXfer>

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	7912      	ldrb	r2, [r2, #4]
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e03e      	b.n	8002b0c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da0e      	bge.n	8002ab4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 0207 	and.w	r2, r3, #7
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	705a      	strb	r2, [r3, #1]
 8002ab2:	e00c      	b.n	8002ace <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_PCD_EP_SetStall+0x7e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e00e      	b.n	8002b0c <HAL_PCD_EP_SetStall+0x9c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f007 f816 	bl	8009b2e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	7912      	ldrb	r2, [r2, #4]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e040      	b.n	8002bb4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da0e      	bge.n	8002b58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 0207 	and.w	r2, r3, #7
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3310      	adds	r3, #16
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	705a      	strb	r2, [r3, #1]
 8002b56:	e00e      	b.n	8002b76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 0207 	and.w	r2, r3, #7
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_EP_ClrStall+0x82>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e00e      	b.n	8002bb4 <HAL_PCD_EP_ClrStall+0xa0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f007 f813 	bl	8009bd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b096      	sub	sp, #88	@ 0x58
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bc4:	e3ad      	b.n	8003322 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bce:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8002be0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 816f 	bne.w	8002ec8 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d14c      	bne.n	8002c90 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c06:	81fb      	strh	r3, [r7, #14]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	441a      	add	r2, r3
 8002c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c56:	2100      	movs	r1, #0
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f008 fff4 	bl	800bc46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7b1b      	ldrb	r3, [r3, #12]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 835c 	beq.w	8003322 <PCD_EP_ISR_Handler+0x766>
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 8357 	bne.w	8003322 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7b1b      	ldrb	r3, [r3, #12]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	731a      	strb	r2, [r3, #12]
 8002c8e:	e348      	b.n	8003322 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c96:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ca2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d032      	beq.n	8002d14 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f007 f89c 	bl	8009e26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	823b      	strh	r3, [r7, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	8a3a      	ldrh	r2, [r7, #16]
 8002d04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d08:	b292      	uxth	r2, r2
 8002d0a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f008 ff6d 	bl	800bbec <HAL_PCD_SetupStageCallback>
 8002d12:	e306      	b.n	8003322 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d14:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f280 8302 	bge.w	8003322 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	83fb      	strh	r3, [r7, #30]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	8bfa      	ldrh	r2, [r7, #30]
 8002d34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d019      	beq.n	8002da0 <PCD_EP_ISR_Handler+0x1e4>
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7a:	6959      	ldr	r1, [r3, #20]
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f007 f84e 	bl	8009e26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	441a      	add	r2, r3
 8002d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f008 ff38 	bl	800bc10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002daa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 82b5 	bne.w	8003322 <PCD_EP_ISR_Handler+0x766>
 8002db8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002dbc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002dc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dc4:	f000 82ad 	beq.w	8003322 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <PCD_EP_ISR_Handler+0x25a>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	e039      	b.n	8002e8a <PCD_EP_ISR_Handler+0x2ce>
 8002e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e1c:	d818      	bhi.n	8002e50 <PCD_EP_ISR_Handler+0x294>
 8002e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <PCD_EP_ISR_Handler+0x27c>
 8002e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e34:	3301      	adds	r3, #1
 8002e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	029b      	lsls	r3, r3, #10
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e01c      	b.n	8002e8a <PCD_EP_ISR_Handler+0x2ce>
 8002e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <PCD_EP_ISR_Handler+0x2ae>
 8002e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e66:	3b01      	subs	r3, #1
 8002e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	029b      	lsls	r3, r3, #10
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e9a:	827b      	strh	r3, [r7, #18]
 8002e9c:	8a7b      	ldrh	r3, [r7, #18]
 8002e9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002ea2:	827b      	strh	r3, [r7, #18]
 8002ea4:	8a7b      	ldrh	r3, [r7, #18]
 8002ea6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002eaa:	827b      	strh	r3, [r7, #18]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	8a7b      	ldrh	r3, [r7, #18]
 8002eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	8013      	strh	r3, [r2, #0]
 8002ec6:	e22c      	b.n	8003322 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002edc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f280 80f6 	bge.w	80030d2 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002efc:	4013      	ands	r3, r2
 8002efe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002f14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f1c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	7b1b      	ldrb	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d123      	bne.n	8002f82 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002f62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 808e 	beq.w	8003088 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f72:	6959      	ldr	r1, [r3, #20]
 8002f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f76:	88da      	ldrh	r2, [r3, #6]
 8002f78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f7c:	f006 ff53 	bl	8009e26 <USB_ReadPMA>
 8002f80:	e082      	b.n	8003088 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f84:	78db      	ldrb	r3, [r3, #3]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d10a      	bne.n	8002fa0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9d3 	bl	800333e <HAL_PCD_EP_DB_Receive>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002f9e:	e073      	b.n	8003088 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fba:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d022      	beq.n	8003044 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	4413      	add	r3, r2
 8003018:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003022:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003026:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02c      	beq.n	8003088 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003034:	6959      	ldr	r1, [r3, #20]
 8003036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003038:	891a      	ldrh	r2, [r3, #8]
 800303a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800303e:	f006 fef2 	bl	8009e26 <USB_ReadPMA>
 8003042:	e021      	b.n	8003088 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800304c:	b29b      	uxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4413      	add	r3, r2
 800305e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003068:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800306c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307a:	6959      	ldr	r1, [r3, #20]
 800307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307e:	895a      	ldrh	r2, [r3, #10]
 8003080:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003084:	f006 fecf 	bl	8009e26 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003090:	441a      	add	r2, r3
 8003092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003094:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800309e:	441a      	add	r2, r3
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <PCD_EP_ISR_Handler+0x4fc>
 80030ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80030b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d206      	bcs.n	80030c6 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f008 fda6 	bl	800bc10 <HAL_PCD_DataOutStageCallback>
 80030c4:	e005      	b.n	80030d2 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030cc:	4618      	mov	r0, r3
 80030ce:	f005 f97c 	bl	80083ca <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8121 	beq.w	8003322 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80030e0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3310      	adds	r3, #16
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800310a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	441a      	add	r2, r3
 8003120:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800312c:	b29b      	uxth	r3, r3
 800312e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003132:	78db      	ldrb	r3, [r3, #3]
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 80a2 	bne.w	800327e <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800313a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003142:	7b1b      	ldrb	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8093 	beq.w	8003270 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800314a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d046      	beq.n	80031e4 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d126      	bne.n	80031ac <PCD_EP_ISR_Handler+0x5f0>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	4413      	add	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00da      	lsls	r2, r3, #3
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	4413      	add	r3, r2
 8003180:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003184:	623b      	str	r3, [r7, #32]
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003190:	b29a      	uxth	r2, r3
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	801a      	strh	r2, [r3, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	e061      	b.n	8003270 <PCD_EP_ISR_Handler+0x6b4>
 80031ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ae:	785b      	ldrb	r3, [r3, #1]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d15d      	bne.n	8003270 <PCD_EP_ISR_Handler+0x6b4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c8:	4413      	add	r3, r2
 80031ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	00da      	lsls	r2, r3, #3
 80031d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d4:	4413      	add	r3, r2
 80031d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	2200      	movs	r2, #0
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	e045      	b.n	8003270 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	785b      	ldrb	r3, [r3, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d126      	bne.n	8003240 <PCD_EP_ISR_Handler+0x684>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003200:	b29b      	uxth	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003206:	4413      	add	r3, r2
 8003208:	637b      	str	r3, [r7, #52]	@ 0x34
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	00da      	lsls	r2, r3, #3
 8003210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003212:	4413      	add	r3, r2
 8003214:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003218:	633b      	str	r3, [r7, #48]	@ 0x30
 800321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003224:	b29a      	uxth	r2, r3
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	801a      	strh	r2, [r3, #0]
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003238:	b29a      	uxth	r2, r3
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	801a      	strh	r2, [r3, #0]
 800323e:	e017      	b.n	8003270 <PCD_EP_ISR_Handler+0x6b4>
 8003240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d113      	bne.n	8003270 <PCD_EP_ISR_Handler+0x6b4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003256:	4413      	add	r3, r2
 8003258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003262:	4413      	add	r3, r2
 8003264:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800326a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326c:	2200      	movs	r2, #0
 800326e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f008 fce5 	bl	800bc46 <HAL_PCD_DataInStageCallback>
 800327c:	e051      	b.n	8003322 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800327e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d144      	bne.n	8003314 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80032b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d907      	bls.n	80032ce <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80032be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032c6:	1ad2      	subs	r2, r2, r3
 80032c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ca:	619a      	str	r2, [r3, #24]
 80032cc:	e002      	b.n	80032d4 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80032ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f008 fcaf 	bl	800bc46 <HAL_PCD_DataInStageCallback>
 80032e8:	e01b      	b.n	8003322 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032f2:	441a      	add	r2, r3
 80032f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003300:	441a      	add	r2, r3
 8003302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003304:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800330c:	4618      	mov	r0, r3
 800330e:	f005 f85c 	bl	80083ca <USB_EPStartXfer>
 8003312:	e006      	b.n	8003322 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003314:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003318:	461a      	mov	r2, r3
 800331a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f917 	bl	8003550 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800332a:	b29b      	uxth	r3, r3
 800332c:	b21b      	sxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	f6ff ac49 	blt.w	8002bc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3758      	adds	r7, #88	@ 0x58
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b088      	sub	sp, #32
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	4613      	mov	r3, r2
 800334a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d07c      	beq.n	8003450 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800335e:	b29b      	uxth	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	4413      	add	r3, r2
 8003370:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800337a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	8b7b      	ldrh	r3, [r7, #26]
 8003382:	429a      	cmp	r2, r3
 8003384:	d306      	bcc.n	8003394 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	8b7b      	ldrh	r3, [r7, #26]
 800338c:	1ad2      	subs	r2, r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	619a      	str	r2, [r3, #24]
 8003392:	e002      	b.n	800339a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d123      	bne.n	80033ea <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033bc:	833b      	strh	r3, [r7, #24]
 80033be:	8b3b      	ldrh	r3, [r7, #24]
 80033c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033c4:	833b      	strh	r3, [r7, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	441a      	add	r2, r3
 80033d4:	8b3b      	ldrh	r3, [r7, #24]
 80033d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01f      	beq.n	8003434 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800340a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340e:	82fb      	strh	r3, [r7, #22]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	8afb      	ldrh	r3, [r7, #22]
 8003420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003430:	b29b      	uxth	r3, r3
 8003432:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003434:	8b7b      	ldrh	r3, [r7, #26]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8085 	beq.w	8003546 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6959      	ldr	r1, [r3, #20]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	891a      	ldrh	r2, [r3, #8]
 8003448:	8b7b      	ldrh	r3, [r7, #26]
 800344a:	f006 fcec 	bl	8009e26 <USB_ReadPMA>
 800344e:	e07a      	b.n	8003546 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003458:	b29b      	uxth	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	4413      	add	r3, r2
 800346a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003474:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	8b7b      	ldrh	r3, [r7, #26]
 800347c:	429a      	cmp	r2, r3
 800347e:	d306      	bcc.n	800348e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	699a      	ldr	r2, [r3, #24]
 8003484:	8b7b      	ldrh	r3, [r7, #26]
 8003486:	1ad2      	subs	r2, r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	619a      	str	r2, [r3, #24]
 800348c:	e002      	b.n	8003494 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d123      	bne.n	80034e4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b6:	83fb      	strh	r3, [r7, #30]
 80034b8:	8bfb      	ldrh	r3, [r7, #30]
 80034ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034be:	83fb      	strh	r3, [r7, #30]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	8bfb      	ldrh	r3, [r7, #30]
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11f      	bne.n	800352e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003508:	83bb      	strh	r3, [r7, #28]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	8bbb      	ldrh	r3, [r7, #28]
 800351a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800351e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003526:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800352a:	b29b      	uxth	r3, r3
 800352c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800352e:	8b7b      	ldrh	r3, [r7, #26]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6959      	ldr	r1, [r3, #20]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	895a      	ldrh	r2, [r3, #10]
 8003540:	8b7b      	ldrh	r3, [r7, #26]
 8003542:	f006 fc70 	bl	8009e26 <USB_ReadPMA>
    }
  }

  return count;
 8003546:	8b7b      	ldrh	r3, [r7, #26]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b0a4      	sub	sp, #144	@ 0x90
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 81db 	beq.w	8003920 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	4413      	add	r3, r2
 8003584:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800359a:	429a      	cmp	r2, r3
 800359c:	d907      	bls.n	80035ae <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80035a6:	1ad2      	subs	r2, r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	619a      	str	r2, [r3, #24]
 80035ac:	e002      	b.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 80b9 	bne.w	8003730 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	785b      	ldrb	r3, [r3, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d126      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0xc4>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035da:	4413      	add	r3, r2
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	00da      	lsls	r2, r3, #3
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	4413      	add	r3, r2
 80035e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360c:	b29a      	uxth	r2, r3
 800360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	e01a      	b.n	800364a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d116      	bne.n	800364a <HAL_PCD_EP_DB_Transmit+0xfa>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	637b      	str	r3, [r7, #52]	@ 0x34
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	4413      	add	r3, r2
 8003632:	637b      	str	r3, [r7, #52]	@ 0x34
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	00da      	lsls	r2, r3, #3
 800363a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363c:	4413      	add	r3, r2
 800363e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d126      	bne.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x156>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003666:	b29b      	uxth	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	00da      	lsls	r2, r3, #3
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800368a:	b29a      	uxth	r2, r3
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	801a      	strh	r2, [r3, #0]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369e:	b29a      	uxth	r2, r3
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	801a      	strh	r2, [r3, #0]
 80036a4:	e017      	b.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x186>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d113      	bne.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x186>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	4413      	add	r3, r2
 80036be:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	00da      	lsls	r2, r3, #3
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	4413      	add	r3, r2
 80036ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2200      	movs	r2, #0
 80036d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f008 fab2 	bl	800bc46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 82fa 	beq.w	8003ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003708:	82fb      	strh	r3, [r7, #22]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	8afb      	ldrh	r3, [r7, #22]
 800371a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800371e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800372a:	b29b      	uxth	r3, r3
 800372c:	8013      	strh	r3, [r2, #0]
 800372e:	e2d8      	b.n	8003ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d021      	beq.n	800377e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003754:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800376a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800376e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 82ac 	bne.w	8003ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003792:	441a      	add	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037a0:	441a      	add	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d30b      	bcc.n	80037ca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	621a      	str	r2, [r3, #32]
 80037c8:	e017      	b.n	80037fa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d108      	bne.n	80037e4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80037d2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037e2:	e00a      	b.n	80037fa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2200      	movs	r2, #0
 80037f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	785b      	ldrb	r3, [r3, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d165      	bne.n	80038ce <HAL_PCD_EP_DB_Transmit+0x37e>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003816:	4413      	add	r3, r2
 8003818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	00da      	lsls	r2, r3, #3
 8003820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003822:	4413      	add	r3, r2
 8003824:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800382a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003834:	b29a      	uxth	r2, r3
 8003836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_PCD_EP_DB_Transmit+0x308>
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003850:	b29a      	uxth	r2, r3
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	e057      	b.n	8003908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800385c:	2b3e      	cmp	r3, #62	@ 0x3e
 800385e:	d818      	bhi.n	8003892 <HAL_PCD_EP_DB_Transmit+0x342>
 8003860:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_PCD_EP_DB_Transmit+0x32a>
 8003874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003876:	3301      	adds	r3, #1
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29a      	uxth	r2, r3
 8003880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003882:	b29b      	uxth	r3, r3
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	b29b      	uxth	r3, r3
 8003888:	4313      	orrs	r3, r2
 800388a:	b29a      	uxth	r2, r3
 800388c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	e03a      	b.n	8003908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800389a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_PCD_EP_DB_Transmit+0x35c>
 80038a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a8:	3b01      	subs	r3, #1
 80038aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4313      	orrs	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	801a      	strh	r2, [r3, #0]
 80038cc:	e01c      	b.n	8003908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	785b      	ldrb	r3, [r3, #1]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d118      	bne.n	8003908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	647b      	str	r3, [r7, #68]	@ 0x44
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ea:	4413      	add	r3, r2
 80038ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	00da      	lsls	r2, r3, #3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f6:	4413      	add	r3, r2
 80038f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80038fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003902:	b29a      	uxth	r2, r3
 8003904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003906:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6959      	ldr	r1, [r3, #20]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	891a      	ldrh	r2, [r3, #8]
 8003914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003918:	b29b      	uxth	r3, r3
 800391a:	f006 fa42 	bl	8009da2 <USB_WritePMA>
 800391e:	e1e0      	b.n	8003ce2 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	4413      	add	r3, r2
 800393a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003944:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003950:	429a      	cmp	r2, r3
 8003952:	d307      	bcc.n	8003964 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800395c:	1ad2      	subs	r2, r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	619a      	str	r2, [r3, #24]
 8003962:	e002      	b.n	800396a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 80c0 	bne.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	785b      	ldrb	r3, [r3, #1]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d126      	bne.n	80039ca <HAL_PCD_EP_DB_Transmit+0x47a>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003990:	4413      	add	r3, r2
 8003992:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	00da      	lsls	r2, r3, #3
 800399a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800399c:	4413      	add	r3, r2
 800399e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039c6:	801a      	strh	r2, [r3, #0]
 80039c8:	e01a      	b.n	8003a00 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d116      	bne.n	8003a00 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039e6:	4413      	add	r3, r2
 80039e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	00da      	lsls	r2, r3, #3
 80039f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039f2:	4413      	add	r3, r2
 80039f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80039fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039fc:	2200      	movs	r2, #0
 80039fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	785b      	ldrb	r3, [r3, #1]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d12b      	bne.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x516>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a22:	4413      	add	r3, r2
 8003a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	00da      	lsls	r2, r3, #3
 8003a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2e:	4413      	add	r3, r2
 8003a30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	e017      	b.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x546>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d113      	bne.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x546>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a7c:	4413      	add	r3, r2
 8003a7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	00da      	lsls	r2, r3, #3
 8003a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a88:	4413      	add	r3, r2
 8003a8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a92:	2200      	movs	r2, #0
 8003a94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f008 f8d2 	bl	800bc46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 811a 	bne.w	8003ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ae6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]
 8003af2:	e0f6      	b.n	8003ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d121      	bne.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f040 80ca 	bne.w	8003ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b56:	441a      	add	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b64:	441a      	add	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d30b      	bcc.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6a1a      	ldr	r2, [r3, #32]
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	621a      	str	r2, [r3, #32]
 8003b8c:	e017      	b.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003b96:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ba6:	e00a      	b.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d165      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x748>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be0:	4413      	add	r3, r2
 8003be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	00da      	lsls	r2, r3, #3
 8003bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bec:	4413      	add	r3, r2
 8003bee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8003c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	e054      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c26:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c28:	d818      	bhi.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x70c>
 8003c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8003c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c40:	3301      	adds	r3, #1
 8003c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c58:	801a      	strh	r2, [r3, #0]
 8003c5a:	e037      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x726>
 8003c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c72:	3b01      	subs	r3, #1
 8003c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	029b      	lsls	r3, r3, #10
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e019      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d115      	bne.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cae:	4413      	add	r3, r2
 8003cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cba:	4413      	add	r3, r2
 8003cbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6959      	ldr	r1, [r3, #20]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	895a      	ldrh	r2, [r3, #10]
 8003cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f006 f860 	bl	8009da2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cfc:	82bb      	strh	r3, [r7, #20]
 8003cfe:	8abb      	ldrh	r3, [r7, #20]
 8003d00:	f083 0310 	eor.w	r3, r3, #16
 8003d04:	82bb      	strh	r3, [r7, #20]
 8003d06:	8abb      	ldrh	r3, [r7, #20]
 8003d08:	f083 0320 	eor.w	r3, r3, #32
 8003d0c:	82bb      	strh	r3, [r7, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	441a      	add	r2, r3
 8003d1c:	8abb      	ldrh	r3, [r7, #20]
 8003d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3790      	adds	r7, #144	@ 0x90
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	f003 0207 	and.w	r2, r3, #7
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	3310      	adds	r3, #16
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e009      	b.n	8003d86 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d72:	897a      	ldrh	r2, [r7, #10]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d86:	893b      	ldrh	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	80da      	strh	r2, [r3, #6]
 8003d9a:	e00b      	b.n	8003db4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d141      	bne.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e26:	4b4b      	ldr	r3, [pc, #300]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e32:	d131      	bne.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e34:	4b47      	ldr	r3, [pc, #284]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3a:	4a46      	ldr	r2, [pc, #280]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e44:	4b43      	ldr	r3, [pc, #268]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e4c:	4a41      	ldr	r2, [pc, #260]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e54:	4b40      	ldr	r3, [pc, #256]	@ (8003f58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2232      	movs	r2, #50	@ 0x32
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	0c9b      	lsrs	r3, r3, #18
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6a:	e002      	b.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e72:	4b38      	ldr	r3, [pc, #224]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7e:	d102      	bne.n	8003e86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f2      	bne.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e86:	4b33      	ldr	r3, [pc, #204]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e92:	d158      	bne.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e057      	b.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e98:	4b2e      	ldr	r3, [pc, #184]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ea8:	e04d      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb0:	d141      	bne.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eb2:	4b28      	ldr	r3, [pc, #160]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebe:	d131      	bne.n	8003f24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec0:	4b24      	ldr	r3, [pc, #144]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ec6:	4a23      	ldr	r2, [pc, #140]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed0:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2232      	movs	r2, #50	@ 0x32
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4a1c      	ldr	r2, [pc, #112]	@ (8003f5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	0c9b      	lsrs	r3, r3, #18
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef6:	e002      	b.n	8003efe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003efe:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0a:	d102      	bne.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f2      	bne.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f12:	4b10      	ldr	r3, [pc, #64]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1e:	d112      	bne.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e011      	b.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f34:	e007      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f36:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f3e:	4a05      	ldr	r2, [pc, #20]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40007000 	.word	0x40007000
 8003f58:	2000000c 	.word	0x2000000c
 8003f5c:	431bde83 	.word	0x431bde83

08003f60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a04      	ldr	r2, [pc, #16]	@ (8003f7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f6e:	6093      	str	r3, [r2, #8]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40007000 	.word	0x40007000

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e2fe      	b.n	8004590 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d075      	beq.n	800408a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f9e:	4b97      	ldr	r3, [pc, #604]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fa8:	4b94      	ldr	r3, [pc, #592]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d102      	bne.n	8003fbe <HAL_RCC_OscConfig+0x3e>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d002      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x44>
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b8d      	ldr	r3, [pc, #564]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0x108>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d157      	bne.n	8004088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e2d9      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x74>
 8003fe6:	4b85      	ldr	r3, [pc, #532]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a84      	ldr	r2, [pc, #528]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7e      	ldr	r2, [pc, #504]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b7c      	ldr	r3, [pc, #496]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7b      	ldr	r2, [pc, #492]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8004018:	4b78      	ldr	r3, [pc, #480]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a77      	ldr	r2, [pc, #476]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b75      	ldr	r3, [pc, #468]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a74      	ldr	r2, [pc, #464]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd fe58 	bl	8001cec <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd fe54 	bl	8001cec <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	@ 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e29e      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004052:	4b6a      	ldr	r3, [pc, #424]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xc0>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd fe44 	bl	8001cec <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd fe40 	bl	8001cec <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	@ 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e28a      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407a:	4b60      	ldr	r3, [pc, #384]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0xe8>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d075      	beq.n	8004182 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004096:	4b59      	ldr	r3, [pc, #356]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a0:	4b56      	ldr	r3, [pc, #344]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	d102      	bne.n	80040b6 <HAL_RCC_OscConfig+0x136>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_OscConfig+0x13c>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d11f      	bne.n	80040fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040bc:	4b4f      	ldr	r3, [pc, #316]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_OscConfig+0x154>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e25d      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b49      	ldr	r3, [pc, #292]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	4946      	ldr	r1, [pc, #280]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040e8:	4b45      	ldr	r3, [pc, #276]	@ (8004200 <HAL_RCC_OscConfig+0x280>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fd fab9 	bl	8001664 <HAL_InitTick>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d043      	beq.n	8004180 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e249      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d023      	beq.n	800414c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004104:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a3c      	ldr	r2, [pc, #240]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800410a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fdec 	bl	8001cec <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004118:	f7fd fde8 	bl	8001cec <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e232      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412a:	4b34      	ldr	r3, [pc, #208]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b31      	ldr	r3, [pc, #196]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	061b      	lsls	r3, r3, #24
 8004144:	492d      	ldr	r1, [pc, #180]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
 800414a:	e01a      	b.n	8004182 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2a      	ldr	r2, [pc, #168]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fdc8 	bl	8001cec <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004160:	f7fd fdc4 	bl	8001cec <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e20e      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004172:	4b22      	ldr	r3, [pc, #136]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x1e0>
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004180:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d041      	beq.n	8004212 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004196:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419c:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd fda1 	bl	8001cec <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fd fd9d 	bl	8001cec <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e1e7      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c0:	4b0e      	ldr	r3, [pc, #56]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ef      	beq.n	80041ae <HAL_RCC_OscConfig+0x22e>
 80041ce:	e020      	b.n	8004212 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d6:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e0:	f7fd fd84 	bl	8001cec <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e6:	e00d      	b.n	8004204 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e8:	f7fd fd80 	bl	8001cec <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d906      	bls.n	8004204 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e1ca      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004204:	4b8c      	ldr	r3, [pc, #560]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ea      	bne.n	80041e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80a6 	beq.w	800436c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004220:	2300      	movs	r3, #0
 8004222:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004224:	4b84      	ldr	r3, [pc, #528]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_OscConfig+0x2b4>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x2b6>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b7f      	ldr	r3, [pc, #508]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 800423c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423e:	4a7e      	ldr	r2, [pc, #504]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004244:	6593      	str	r3, [r2, #88]	@ 0x58
 8004246:	4b7c      	ldr	r3, [pc, #496]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004256:	4b79      	ldr	r3, [pc, #484]	@ (800443c <HAL_RCC_OscConfig+0x4bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004262:	4b76      	ldr	r3, [pc, #472]	@ (800443c <HAL_RCC_OscConfig+0x4bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a75      	ldr	r2, [pc, #468]	@ (800443c <HAL_RCC_OscConfig+0x4bc>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fd fd3d 	bl	8001cec <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fd fd39 	bl	8001cec <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e183      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004288:	4b6c      	ldr	r3, [pc, #432]	@ (800443c <HAL_RCC_OscConfig+0x4bc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d108      	bne.n	80042ae <HAL_RCC_OscConfig+0x32e>
 800429c:	4b66      	ldr	r3, [pc, #408]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a2:	4a65      	ldr	r2, [pc, #404]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042ac:	e024      	b.n	80042f8 <HAL_RCC_OscConfig+0x378>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d110      	bne.n	80042d8 <HAL_RCC_OscConfig+0x358>
 80042b6:	4b60      	ldr	r3, [pc, #384]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042d6:	e00f      	b.n	80042f8 <HAL_RCC_OscConfig+0x378>
 80042d8:	4b57      	ldr	r3, [pc, #348]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	4a56      	ldr	r2, [pc, #344]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042e8:	4b53      	ldr	r3, [pc, #332]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ee:	4a52      	ldr	r2, [pc, #328]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d016      	beq.n	800432e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fd fcf4 	bl	8001cec <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fd fcf0 	bl	8001cec <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e138      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431e:	4b46      	ldr	r3, [pc, #280]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ed      	beq.n	8004308 <HAL_RCC_OscConfig+0x388>
 800432c:	e015      	b.n	800435a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fd fcdd 	bl	8001cec <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fd fcd9 	bl	8001cec <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e121      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800434c:	4b3a      	ldr	r3, [pc, #232]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ed      	bne.n	8004336 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	4a34      	ldr	r2, [pc, #208]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d03c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01c      	beq.n	80043ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004380:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004386:	4a2c      	ldr	r2, [pc, #176]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fd fcac 	bl	8001cec <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004398:	f7fd fca8 	bl	8001cec <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0f2      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043aa:	4b23      	ldr	r3, [pc, #140]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80043ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ef      	beq.n	8004398 <HAL_RCC_OscConfig+0x418>
 80043b8:	e01b      	b.n	80043f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd fc8f 	bl	8001cec <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043d2:	f7fd fc8b 	bl	8001cec <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0d5      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043e4:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80043e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ef      	bne.n	80043d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80c9 	beq.w	800458e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b0c      	cmp	r3, #12
 8004406:	f000 8083 	beq.w	8004510 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d15e      	bne.n	80044d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	4b09      	ldr	r3, [pc, #36]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a08      	ldr	r2, [pc, #32]	@ (8004438 <HAL_RCC_OscConfig+0x4b8>)
 8004418:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800441c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fd fc65 	bl	8001cec <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004424:	e00c      	b.n	8004440 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004426:	f7fd fc61 	bl	8001cec <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d905      	bls.n	8004440 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0ab      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004440:	4b55      	ldr	r3, [pc, #340]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ec      	bne.n	8004426 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800444c:	4b52      	ldr	r3, [pc, #328]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	4b52      	ldr	r3, [pc, #328]	@ (800459c <HAL_RCC_OscConfig+0x61c>)
 8004452:	4013      	ands	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6a11      	ldr	r1, [r2, #32]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800445c:	3a01      	subs	r2, #1
 800445e:	0112      	lsls	r2, r2, #4
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004466:	0212      	lsls	r2, r2, #8
 8004468:	4311      	orrs	r1, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800446e:	0852      	lsrs	r2, r2, #1
 8004470:	3a01      	subs	r2, #1
 8004472:	0552      	lsls	r2, r2, #21
 8004474:	4311      	orrs	r1, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800447a:	0852      	lsrs	r2, r2, #1
 800447c:	3a01      	subs	r2, #1
 800447e:	0652      	lsls	r2, r2, #25
 8004480:	4311      	orrs	r1, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004486:	06d2      	lsls	r2, r2, #27
 8004488:	430a      	orrs	r2, r1
 800448a:	4943      	ldr	r1, [pc, #268]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 800448c:	4313      	orrs	r3, r2
 800448e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004490:	4b41      	ldr	r3, [pc, #260]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a40      	ldr	r2, [pc, #256]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800449a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800449c:	4b3e      	ldr	r3, [pc, #248]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 80044a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fc20 	bl	8001cec <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd fc1c 	bl	8001cec <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e066      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c2:	4b35      	ldr	r3, [pc, #212]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x530>
 80044ce:	e05e      	b.n	800458e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a30      	ldr	r2, [pc, #192]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 80044d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fc06 	bl	8001cec <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fd fc02 	bl	8001cec <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e04c      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f6:	4b28      	ldr	r3, [pc, #160]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004502:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	4924      	ldr	r1, [pc, #144]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 8004508:	4b25      	ldr	r3, [pc, #148]	@ (80045a0 <HAL_RCC_OscConfig+0x620>)
 800450a:	4013      	ands	r3, r2
 800450c:	60cb      	str	r3, [r1, #12]
 800450e:	e03e      	b.n	800458e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e039      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800451c:	4b1e      	ldr	r3, [pc, #120]	@ (8004598 <HAL_RCC_OscConfig+0x618>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f003 0203 	and.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	429a      	cmp	r2, r3
 800452e:	d12c      	bne.n	800458a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	3b01      	subs	r3, #1
 800453c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d123      	bne.n	800458a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d11b      	bne.n	800458a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d113      	bne.n	800458a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	3b01      	subs	r3, #1
 8004570:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d109      	bne.n	800458a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	019f800c 	.word	0x019f800c
 80045a0:	feeefffc 	.word	0xfeeefffc

080045a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e11e      	b.n	80047fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045bc:	4b91      	ldr	r3, [pc, #580]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d910      	bls.n	80045ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b8e      	ldr	r3, [pc, #568]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 020f 	bic.w	r2, r3, #15
 80045d2:	498c      	ldr	r1, [pc, #560]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b8a      	ldr	r3, [pc, #552]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e106      	b.n	80047fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d073      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d129      	bne.n	8004654 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004600:	4b81      	ldr	r3, [pc, #516]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0f4      	b.n	80047fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004610:	f000 f9d0 	bl	80049b4 <RCC_GetSysClockFreqFromPLLSource>
 8004614:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4a7c      	ldr	r2, [pc, #496]	@ (800480c <HAL_RCC_ClockConfig+0x268>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d93f      	bls.n	800469e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800461e:	4b7a      	ldr	r3, [pc, #488]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004632:	2b00      	cmp	r3, #0
 8004634:	d033      	beq.n	800469e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	d12f      	bne.n	800469e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800463e:	4b72      	ldr	r3, [pc, #456]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004646:	4a70      	ldr	r2, [pc, #448]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e024      	b.n	800469e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d107      	bne.n	800466c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800465c:	4b6a      	ldr	r3, [pc, #424]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0c6      	b.n	80047fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800466c:	4b66      	ldr	r3, [pc, #408]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0be      	b.n	80047fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800467c:	f000 f8ce 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8004680:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4a61      	ldr	r2, [pc, #388]	@ (800480c <HAL_RCC_ClockConfig+0x268>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d909      	bls.n	800469e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800468a:	4b5f      	ldr	r3, [pc, #380]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004692:	4a5d      	ldr	r2, [pc, #372]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004698:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800469a:	2380      	movs	r3, #128	@ 0x80
 800469c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b5a      	ldr	r3, [pc, #360]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4957      	ldr	r1, [pc, #348]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fd fb1c 	bl	8001cec <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fb18 	bl	8001cec <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e095      	b.n	80047fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d023      	beq.n	8004734 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f8:	4b43      	ldr	r3, [pc, #268]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a42      	ldr	r2, [pc, #264]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80046fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004702:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004710:	4b3d      	ldr	r3, [pc, #244]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004718:	4a3b      	ldr	r2, [pc, #236]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 800471a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800471e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b39      	ldr	r3, [pc, #228]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4936      	ldr	r1, [pc, #216]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
 8004732:	e008      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b80      	cmp	r3, #128	@ 0x80
 8004738:	d105      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800473a:	4b33      	ldr	r3, [pc, #204]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4a32      	ldr	r2, [pc, #200]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 8004740:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004744:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004746:	4b2f      	ldr	r3, [pc, #188]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d21d      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004754:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 020f 	bic.w	r2, r3, #15
 800475c:	4929      	ldr	r1, [pc, #164]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004764:	f7fd fac2 	bl	8001cec <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fd fabe 	bl	8001cec <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e03b      	b.n	80047fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d1ed      	bne.n	800476c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4917      	ldr	r1, [pc, #92]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490f      	ldr	r1, [pc, #60]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ce:	f000 f825 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <HAL_RCC_ClockConfig+0x264>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490c      	ldr	r1, [pc, #48]	@ (8004810 <HAL_RCC_ClockConfig+0x26c>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <HAL_RCC_ClockConfig+0x270>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <HAL_RCC_ClockConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fc ff36 	bl	8001664 <HAL_InitTick>
 80047f8:	4603      	mov	r3, r0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40022000 	.word	0x40022000
 8004808:	40021000 	.word	0x40021000
 800480c:	04c4b400 	.word	0x04c4b400
 8004810:	0800d4b4 	.word	0x0800d4b4
 8004814:	2000000c 	.word	0x2000000c
 8004818:	20000010 	.word	0x20000010

0800481c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004822:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d102      	bne.n	8004834 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800482e:	4b2a      	ldr	r3, [pc, #168]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e047      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004834:	4b27      	ldr	r3, [pc, #156]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	d102      	bne.n	8004846 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004840:	4b26      	ldr	r3, [pc, #152]	@ (80048dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	e03e      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004846:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b0c      	cmp	r3, #12
 8004850:	d136      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004852:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800485c:	4b1d      	ldr	r3, [pc, #116]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	3301      	adds	r3, #1
 8004868:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d10c      	bne.n	800488a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004870:	4a1a      	ldr	r2, [pc, #104]	@ (80048dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	4a16      	ldr	r2, [pc, #88]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800487a:	68d2      	ldr	r2, [r2, #12]
 800487c:	0a12      	lsrs	r2, r2, #8
 800487e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	617b      	str	r3, [r7, #20]
      break;
 8004888:	e00c      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800488a:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	4a10      	ldr	r2, [pc, #64]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004894:	68d2      	ldr	r2, [r2, #12]
 8004896:	0a12      	lsrs	r2, r2, #8
 8004898:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]
      break;
 80048a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	3301      	adds	r3, #1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e001      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048c4:	693b      	ldr	r3, [r7, #16]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	@ (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000000c 	.word	0x2000000c

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048fc:	f7ff fff0 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4904      	ldr	r1, [pc, #16]	@ (8004920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000
 8004920:	0800d4c4 	.word	0x0800d4c4

08004924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004928:	f7ff ffda 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0adb      	lsrs	r3, r3, #11
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4904      	ldr	r1, [pc, #16]	@ (800494c <HAL_RCC_GetPCLK2Freq+0x28>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	0800d4c4 	.word	0x0800d4c4

08004950 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	220f      	movs	r2, #15
 800495e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004960:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0203 	and.w	r2, r3, #3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800496c:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004984:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004992:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <HAL_RCC_GetClockConfig+0x60>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 020f 	and.w	r2, r3, #15
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	601a      	str	r2, [r3, #0]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40022000 	.word	0x40022000

080049b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d10c      	bne.n	80049f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049d8:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049e2:	68d2      	ldr	r2, [r2, #12]
 80049e4:	0a12      	lsrs	r2, r2, #8
 80049e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	617b      	str	r3, [r7, #20]
    break;
 80049f0:	e00c      	b.n	8004a0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049f2:	4a12      	ldr	r2, [pc, #72]	@ (8004a3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049fc:	68d2      	ldr	r2, [r2, #12]
 80049fe:	0a12      	lsrs	r2, r2, #8
 8004a00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	617b      	str	r3, [r7, #20]
    break;
 8004a0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a0c:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	0e5b      	lsrs	r3, r3, #25
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	3301      	adds	r3, #1
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a26:	687b      	ldr	r3, [r7, #4]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40021000 	.word	0x40021000
 8004a38:	007a1200 	.word	0x007a1200
 8004a3c:	00f42400 	.word	0x00f42400

08004a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a48:	2300      	movs	r3, #0
 8004a4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8098 	beq.w	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a62:	4b43      	ldr	r3, [pc, #268]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10d      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	4b40      	ldr	r3, [pc, #256]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a72:	4a3f      	ldr	r2, [pc, #252]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a86:	2301      	movs	r3, #1
 8004a88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a39      	ldr	r2, [pc, #228]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a96:	f7fd f929 	bl	8001cec <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a9c:	e009      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fd f925 	bl	8001cec <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d902      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	74fb      	strb	r3, [r7, #19]
        break;
 8004ab0:	e005      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ab2:	4b30      	ldr	r3, [pc, #192]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d159      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ace:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d019      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ae0:	4b23      	ldr	r3, [pc, #140]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004aec:	4b20      	ldr	r3, [pc, #128]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004afc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	4a1b      	ldr	r2, [pc, #108]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b0c:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fd f8e5 	bl	8001cec <HAL_GetTick>
 8004b22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b24:	e00b      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f7fd f8e1 	bl	8001cec <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d902      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b3c:	e006      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ec      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b52:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	4903      	ldr	r1, [pc, #12]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b68:	e008      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	74bb      	strb	r3, [r7, #18]
 8004b6e:	e005      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b7c:	7c7b      	ldrb	r3, [r7, #17]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4ba6      	ldr	r3, [pc, #664]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b86:	4aa5      	ldr	r2, [pc, #660]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b9a:	4ba0      	ldr	r3, [pc, #640]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba0:	f023 0203 	bic.w	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	499c      	ldr	r1, [pc, #624]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bbc:	4b97      	ldr	r3, [pc, #604]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc2:	f023 020c 	bic.w	r2, r3, #12
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	4994      	ldr	r1, [pc, #592]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bde:	4b8f      	ldr	r3, [pc, #572]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	498b      	ldr	r1, [pc, #556]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c00:	4b86      	ldr	r3, [pc, #536]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	4983      	ldr	r1, [pc, #524]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c22:	4b7e      	ldr	r3, [pc, #504]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	497a      	ldr	r1, [pc, #488]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c44:	4b75      	ldr	r3, [pc, #468]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	4972      	ldr	r1, [pc, #456]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c66:	4b6d      	ldr	r3, [pc, #436]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4969      	ldr	r1, [pc, #420]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c88:	4b64      	ldr	r3, [pc, #400]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	4961      	ldr	r1, [pc, #388]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004caa:	4b5c      	ldr	r3, [pc, #368]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	4958      	ldr	r1, [pc, #352]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d015      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ccc:	4b53      	ldr	r3, [pc, #332]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	4950      	ldr	r1, [pc, #320]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cec:	4b4b      	ldr	r3, [pc, #300]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cf6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d04:	4b45      	ldr	r3, [pc, #276]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	4942      	ldr	r1, [pc, #264]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d22:	d105      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d24:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a3c      	ldr	r2, [pc, #240]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d2e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d3c:	4b37      	ldr	r3, [pc, #220]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	4934      	ldr	r1, [pc, #208]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a2e      	ldr	r2, [pc, #184]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d74:	4b29      	ldr	r3, [pc, #164]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d82:	4926      	ldr	r1, [pc, #152]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d94:	4b21      	ldr	r3, [pc, #132]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a20      	ldr	r2, [pc, #128]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d015      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dac:	4b1b      	ldr	r3, [pc, #108]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dba:	4918      	ldr	r1, [pc, #96]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dcc:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4a12      	ldr	r2, [pc, #72]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d015      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004de4:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df2:	490a      	ldr	r1, [pc, #40]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e02:	d105      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a04      	ldr	r2, [pc, #16]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e10:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e049      	b.n	8004ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f841 	bl	8004ece <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f000 fa22 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d001      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e04a      	b.n	8004f92 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a21      	ldr	r2, [pc, #132]	@ (8004fa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d018      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f26:	d013      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d009      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1a      	ldr	r2, [pc, #104]	@ (8004fac <HAL_TIM_Base_Start_IT+0xc8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d115      	bne.n	8004f7c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	4b17      	ldr	r3, [pc, #92]	@ (8004fb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d015      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0xaa>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f68:	d011      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	e008      	b.n	8004f8e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e000      	b.n	8004f90 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	00010007 	.word	0x00010007

08004fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d020      	beq.n	800501c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0202 	mvn.w	r2, #2
 8004fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f931 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f923 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f934 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d020      	beq.n	8005068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01b      	beq.n	8005068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0204 	mvn.w	r2, #4
 8005038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f90b 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f8fd 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f90e 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d020      	beq.n	80050b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01b      	beq.n	80050b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0208 	mvn.w	r2, #8
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2204      	movs	r2, #4
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f8e5 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f8d7 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f8e8 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d020      	beq.n	8005100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2208      	movs	r2, #8
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8bf 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8b1 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f8c2 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0201 	mvn.w	r2, #1
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc fa64 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f951 	bl	80053f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00c      	beq.n	8005176 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f949 	bl	8005408 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00c      	beq.n	800519a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f87c 	bl	8005292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00c      	beq.n	80051be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f06f 0220 	mvn.w	r2, #32
 80051b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f911 	bl	80053e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80051da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f91d 	bl	800541c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80051fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f915 	bl	8005430 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f90d 	bl	8005444 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f905 	bl	8005458 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a42      	ldr	r2, [pc, #264]	@ (80053c4 <TIM_Base_SetConfig+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00f      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c6:	d00b      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a3f      	ldr	r2, [pc, #252]	@ (80053c8 <TIM_Base_SetConfig+0x120>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a3e      	ldr	r2, [pc, #248]	@ (80053cc <TIM_Base_SetConfig+0x124>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3d      	ldr	r2, [pc, #244]	@ (80053d0 <TIM_Base_SetConfig+0x128>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d108      	bne.n	80052f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a33      	ldr	r2, [pc, #204]	@ (80053c4 <TIM_Base_SetConfig+0x11c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01b      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005300:	d017      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a30      	ldr	r2, [pc, #192]	@ (80053c8 <TIM_Base_SetConfig+0x120>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <TIM_Base_SetConfig+0x124>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00f      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2e      	ldr	r2, [pc, #184]	@ (80053d0 <TIM_Base_SetConfig+0x128>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2d      	ldr	r2, [pc, #180]	@ (80053d4 <TIM_Base_SetConfig+0x12c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2c      	ldr	r2, [pc, #176]	@ (80053d8 <TIM_Base_SetConfig+0x130>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2b      	ldr	r2, [pc, #172]	@ (80053dc <TIM_Base_SetConfig+0x134>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a16      	ldr	r2, [pc, #88]	@ (80053c4 <TIM_Base_SetConfig+0x11c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00f      	beq.n	8005390 <TIM_Base_SetConfig+0xe8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a17      	ldr	r2, [pc, #92]	@ (80053d0 <TIM_Base_SetConfig+0x128>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00b      	beq.n	8005390 <TIM_Base_SetConfig+0xe8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <TIM_Base_SetConfig+0x12c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d007      	beq.n	8005390 <TIM_Base_SetConfig+0xe8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <TIM_Base_SetConfig+0x130>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_Base_SetConfig+0xe8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a14      	ldr	r2, [pc, #80]	@ (80053dc <TIM_Base_SetConfig+0x134>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d103      	bne.n	8005398 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	611a      	str	r2, [r3, #16]
  }
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800

080053e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e042      	b.n	8005504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fc fb11 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2224      	movs	r2, #36	@ 0x24
 800549a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 ffc0 	bl	800643c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fcf1 	bl	8005ea4 <UART_SetConfig>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e01b      	b.n	8005504 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 f83f 	bl	8006580 <UART_CheckIdleState>
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e061      	b.n	80055e4 <HAL_LIN_Init+0xd8>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005528:	d101      	bne.n	800552e <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e05a      	b.n	80055e4 <HAL_LIN_Init+0xd8>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e054      	b.n	80055e4 <HAL_LIN_Init+0xd8>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <HAL_LIN_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fc fab3 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2224      	movs	r2, #36	@ 0x24
 8005556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_LIN_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 ff62 	bl	800643c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fc93 	bl	8005ea4 <UART_SetConfig>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_LIN_Init+0x7c>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e02d      	b.n	80055e4 <HAL_LIN_Init+0xd8>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a6:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055b6:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f023 0120 	bic.w	r1, r3, #32
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 ffcf 	bl	8006580 <UART_CheckIdleState>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005602:	2b20      	cmp	r3, #32
 8005604:	d17b      	bne.n	80056fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_UART_Transmit+0x26>
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e074      	b.n	8005700 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2221      	movs	r2, #33	@ 0x21
 8005622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005626:	f7fc fb61 	bl	8001cec <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005644:	d108      	bne.n	8005658 <HAL_UART_Transmit+0x6c>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e003      	b.n	8005660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005660:	e030      	b.n	80056c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	@ 0x80
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f001 f831 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e03d      	b.n	8005700 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005698:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e007      	b.n	80056b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1c8      	bne.n	8005662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	2140      	movs	r1, #64	@ 0x40
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fffa 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e006      	b.n	8005700 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e000      	b.n	8005700 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
  }
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	@ 0x28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800571c:	2b20      	cmp	r3, #32
 800571e:	d137      	bne.n	8005790 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_UART_Receive_IT+0x24>
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e030      	b.n	8005792 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a18      	ldr	r2, [pc, #96]	@ (800579c <HAL_UART_Receive_IT+0x94>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d01f      	beq.n	8005780 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d018      	beq.n	8005780 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	613b      	str	r3, [r7, #16]
   return(result);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	623b      	str	r3, [r7, #32]
 800576e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	6a3a      	ldr	r2, [r7, #32]
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	61bb      	str	r3, [r7, #24]
   return(result);
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	461a      	mov	r2, r3
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f001 f812 	bl	80067b0 <UART_Start_Receive_IT>
 800578c:	4603      	mov	r3, r0
 800578e:	e000      	b.n	8005792 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	3728      	adds	r7, #40	@ 0x28
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40008000 	.word	0x40008000

080057a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b0ba      	sub	sp, #232	@ 0xe8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057ce:	4013      	ands	r3, r2
 80057d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11b      	bne.n	8005814 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d015      	beq.n	8005814 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d009      	beq.n	8005814 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8300 	beq.w	8005e0a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	4798      	blx	r3
      }
      return;
 8005812:	e2fa      	b.n	8005e0a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8123 	beq.w	8005a64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800581e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005822:	4b8d      	ldr	r3, [pc, #564]	@ (8005a58 <HAL_UART_IRQHandler+0x2b8>)
 8005824:	4013      	ands	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800582a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800582e:	4b8b      	ldr	r3, [pc, #556]	@ (8005a5c <HAL_UART_IRQHandler+0x2bc>)
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 8116 	beq.w	8005a64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d011      	beq.n	8005868 <HAL_UART_IRQHandler+0xc8>
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d011      	beq.n	8005898 <HAL_UART_IRQHandler+0xf8>
 8005874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2202      	movs	r2, #2
 8005886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588e:	f043 0204 	orr.w	r2, r3, #4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d011      	beq.n	80058c8 <HAL_UART_IRQHandler+0x128>
 80058a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2204      	movs	r2, #4
 80058b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058be:	f043 0202 	orr.w	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d017      	beq.n	8005904 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005a58 <HAL_UART_IRQHandler+0x2b8>)
 80058e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2208      	movs	r2, #8
 80058f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fa:	f043 0208 	orr.w	r2, r3, #8
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800590c:	2b00      	cmp	r3, #0
 800590e:	d012      	beq.n	8005936 <HAL_UART_IRQHandler+0x196>
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005914:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8266 	beq.w	8005e0e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800594e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800595e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598a:	2b40      	cmp	r3, #64	@ 0x40
 800598c:	d005      	beq.n	800599a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800598e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005992:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005996:	2b00      	cmp	r3, #0
 8005998:	d054      	beq.n	8005a44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 f82a 	bl	80069f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d146      	bne.n	8005a3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3308      	adds	r3, #8
 80059d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1d9      	bne.n	80059ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d017      	beq.n	8005a34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0a:	4a15      	ldr	r2, [pc, #84]	@ (8005a60 <HAL_UART_IRQHandler+0x2c0>)
 8005a0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fc faae 	bl	8001f76 <HAL_DMA_Abort_IT>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a32:	e00f      	b.n	8005a54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fb fdcf 	bl	80015d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3a:	e00b      	b.n	8005a54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fb fdcb 	bl	80015d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a42:	e007      	b.n	8005a54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fb fdc7 	bl	80015d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a52:	e1dc      	b.n	8005e0e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	bf00      	nop
    return;
 8005a56:	e1da      	b.n	8005e0e <HAL_UART_IRQHandler+0x66e>
 8005a58:	10000001 	.word	0x10000001
 8005a5c:	04000120 	.word	0x04000120
 8005a60:	08006ac1 	.word	0x08006ac1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f040 8170 	bne.w	8005d4e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8169 	beq.w	8005d4e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8162 	beq.w	8005d4e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b40      	cmp	r3, #64	@ 0x40
 8005a9e:	f040 80d8 	bne.w	8005c52 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80af 	beq.w	8005c18 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ac0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	f080 80a7 	bcs.w	8005c18 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ad0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 8087 	bne.w	8005bf6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1da      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3308      	adds	r3, #8
 8005b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e1      	bne.n	8005b32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e3      	bne.n	8005b6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc4:	f023 0310 	bic.w	r3, r3, #16
 8005bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e4      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fc f967 	bl	8001ec4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f911 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c16:	e0fc      	b.n	8005e12 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c22:	429a      	cmp	r2, r3
 8005c24:	f040 80f5 	bne.w	8005e12 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	f040 80eb 	bne.w	8005e12 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8f4 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
      return;
 8005c50:	e0df      	b.n	8005e12 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80d1 	beq.w	8005e16 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80cc 	beq.w	8005e16 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e4      	bne.n	8005c7e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cca:	f023 0301 	bic.w	r3, r3, #1
 8005cce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e1      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	69b9      	ldr	r1, [r7, #24]
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	617b      	str	r3, [r7, #20]
   return(result);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e4      	bne.n	8005d04 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f876 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d4c:	e063      	b.n	8005e16 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00e      	beq.n	8005d78 <HAL_UART_IRQHandler+0x5d8>
 8005d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 fc07 	bl	8007584 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d76:	e051      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d014      	beq.n	8005dae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d105      	bne.n	8005d9c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d03a      	beq.n	8005e1a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
    }
    return;
 8005dac:	e035      	b.n	8005e1a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <HAL_UART_IRQHandler+0x62e>
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fe90 	bl	8006aec <UART_EndTransmit_IT>
    return;
 8005dcc:	e026      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_UART_IRQHandler+0x64e>
 8005dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dde:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 fbe0 	bl	80075ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dec:	e016      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <HAL_UART_IRQHandler+0x67c>
 8005dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da0c      	bge.n	8005e1c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fbc8 	bl	8007598 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e08:	e008      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
      return;
 8005e0a:	bf00      	nop
 8005e0c:	e006      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
    return;
 8005e0e:	bf00      	nop
 8005e10:	e004      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
      return;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
      return;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_UART_IRQHandler+0x67c>
    return;
 8005e1a:	bf00      	nop
  }
}
 8005e1c:	37e8      	adds	r7, #232	@ 0xe8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop

08005e24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_LIN_SendBreak+0x16>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e018      	b.n	8005e98 <HAL_LIN_SendBreak+0x48>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2224      	movs	r2, #36	@ 0x24
 8005e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0202 	orr.w	r2, r2, #2
 8005e84:	619a      	str	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea8:	b08c      	sub	sp, #48	@ 0x30
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4bab      	ldr	r3, [pc, #684]	@ (8006180 <UART_SetConfig+0x2dc>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005edc:	430b      	orrs	r3, r1
 8005ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4aa0      	ldr	r2, [pc, #640]	@ (8006184 <UART_SetConfig+0x2e0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005f1a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2e:	f023 010f 	bic.w	r1, r3, #15
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a91      	ldr	r2, [pc, #580]	@ (8006188 <UART_SetConfig+0x2e4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d125      	bne.n	8005f94 <UART_SetConfig+0xf0>
 8005f48:	4b90      	ldr	r3, [pc, #576]	@ (800618c <UART_SetConfig+0x2e8>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d81a      	bhi.n	8005f8c <UART_SetConfig+0xe8>
 8005f56:	a201      	add	r2, pc, #4	@ (adr r2, 8005f5c <UART_SetConfig+0xb8>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f7d 	.word	0x08005f7d
 8005f64:	08005f75 	.word	0x08005f75
 8005f68:	08005f85 	.word	0x08005f85
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f72:	e0d6      	b.n	8006122 <UART_SetConfig+0x27e>
 8005f74:	2302      	movs	r3, #2
 8005f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7a:	e0d2      	b.n	8006122 <UART_SetConfig+0x27e>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e0ce      	b.n	8006122 <UART_SetConfig+0x27e>
 8005f84:	2308      	movs	r3, #8
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e0ca      	b.n	8006122 <UART_SetConfig+0x27e>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f92:	e0c6      	b.n	8006122 <UART_SetConfig+0x27e>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a7d      	ldr	r2, [pc, #500]	@ (8006190 <UART_SetConfig+0x2ec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d138      	bne.n	8006010 <UART_SetConfig+0x16c>
 8005f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800618c <UART_SetConfig+0x2e8>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa4:	f003 030c 	and.w	r3, r3, #12
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	d82d      	bhi.n	8006008 <UART_SetConfig+0x164>
 8005fac:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <UART_SetConfig+0x110>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fe9 	.word	0x08005fe9
 8005fb8:	08006009 	.word	0x08006009
 8005fbc:	08006009 	.word	0x08006009
 8005fc0:	08006009 	.word	0x08006009
 8005fc4:	08005ff9 	.word	0x08005ff9
 8005fc8:	08006009 	.word	0x08006009
 8005fcc:	08006009 	.word	0x08006009
 8005fd0:	08006009 	.word	0x08006009
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	08006009 	.word	0x08006009
 8005fdc:	08006009 	.word	0x08006009
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006001 	.word	0x08006001
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fee:	e098      	b.n	8006122 <UART_SetConfig+0x27e>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff6:	e094      	b.n	8006122 <UART_SetConfig+0x27e>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffe:	e090      	b.n	8006122 <UART_SetConfig+0x27e>
 8006000:	2308      	movs	r3, #8
 8006002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006006:	e08c      	b.n	8006122 <UART_SetConfig+0x27e>
 8006008:	2310      	movs	r3, #16
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800600e:	e088      	b.n	8006122 <UART_SetConfig+0x27e>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5f      	ldr	r2, [pc, #380]	@ (8006194 <UART_SetConfig+0x2f0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d125      	bne.n	8006066 <UART_SetConfig+0x1c2>
 800601a:	4b5c      	ldr	r3, [pc, #368]	@ (800618c <UART_SetConfig+0x2e8>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006020:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006024:	2b30      	cmp	r3, #48	@ 0x30
 8006026:	d016      	beq.n	8006056 <UART_SetConfig+0x1b2>
 8006028:	2b30      	cmp	r3, #48	@ 0x30
 800602a:	d818      	bhi.n	800605e <UART_SetConfig+0x1ba>
 800602c:	2b20      	cmp	r3, #32
 800602e:	d00a      	beq.n	8006046 <UART_SetConfig+0x1a2>
 8006030:	2b20      	cmp	r3, #32
 8006032:	d814      	bhi.n	800605e <UART_SetConfig+0x1ba>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <UART_SetConfig+0x19a>
 8006038:	2b10      	cmp	r3, #16
 800603a:	d008      	beq.n	800604e <UART_SetConfig+0x1aa>
 800603c:	e00f      	b.n	800605e <UART_SetConfig+0x1ba>
 800603e:	2300      	movs	r3, #0
 8006040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006044:	e06d      	b.n	8006122 <UART_SetConfig+0x27e>
 8006046:	2302      	movs	r3, #2
 8006048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604c:	e069      	b.n	8006122 <UART_SetConfig+0x27e>
 800604e:	2304      	movs	r3, #4
 8006050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006054:	e065      	b.n	8006122 <UART_SetConfig+0x27e>
 8006056:	2308      	movs	r3, #8
 8006058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605c:	e061      	b.n	8006122 <UART_SetConfig+0x27e>
 800605e:	2310      	movs	r3, #16
 8006060:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006064:	e05d      	b.n	8006122 <UART_SetConfig+0x27e>
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a4b      	ldr	r2, [pc, #300]	@ (8006198 <UART_SetConfig+0x2f4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d125      	bne.n	80060bc <UART_SetConfig+0x218>
 8006070:	4b46      	ldr	r3, [pc, #280]	@ (800618c <UART_SetConfig+0x2e8>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006076:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800607a:	2bc0      	cmp	r3, #192	@ 0xc0
 800607c:	d016      	beq.n	80060ac <UART_SetConfig+0x208>
 800607e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006080:	d818      	bhi.n	80060b4 <UART_SetConfig+0x210>
 8006082:	2b80      	cmp	r3, #128	@ 0x80
 8006084:	d00a      	beq.n	800609c <UART_SetConfig+0x1f8>
 8006086:	2b80      	cmp	r3, #128	@ 0x80
 8006088:	d814      	bhi.n	80060b4 <UART_SetConfig+0x210>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <UART_SetConfig+0x1f0>
 800608e:	2b40      	cmp	r3, #64	@ 0x40
 8006090:	d008      	beq.n	80060a4 <UART_SetConfig+0x200>
 8006092:	e00f      	b.n	80060b4 <UART_SetConfig+0x210>
 8006094:	2300      	movs	r3, #0
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609a:	e042      	b.n	8006122 <UART_SetConfig+0x27e>
 800609c:	2302      	movs	r3, #2
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a2:	e03e      	b.n	8006122 <UART_SetConfig+0x27e>
 80060a4:	2304      	movs	r3, #4
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060aa:	e03a      	b.n	8006122 <UART_SetConfig+0x27e>
 80060ac:	2308      	movs	r3, #8
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b2:	e036      	b.n	8006122 <UART_SetConfig+0x27e>
 80060b4:	2310      	movs	r3, #16
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ba:	e032      	b.n	8006122 <UART_SetConfig+0x27e>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a30      	ldr	r2, [pc, #192]	@ (8006184 <UART_SetConfig+0x2e0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d12a      	bne.n	800611c <UART_SetConfig+0x278>
 80060c6:	4b31      	ldr	r3, [pc, #196]	@ (800618c <UART_SetConfig+0x2e8>)
 80060c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060d4:	d01a      	beq.n	800610c <UART_SetConfig+0x268>
 80060d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060da:	d81b      	bhi.n	8006114 <UART_SetConfig+0x270>
 80060dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e0:	d00c      	beq.n	80060fc <UART_SetConfig+0x258>
 80060e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e6:	d815      	bhi.n	8006114 <UART_SetConfig+0x270>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <UART_SetConfig+0x250>
 80060ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f0:	d008      	beq.n	8006104 <UART_SetConfig+0x260>
 80060f2:	e00f      	b.n	8006114 <UART_SetConfig+0x270>
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fa:	e012      	b.n	8006122 <UART_SetConfig+0x27e>
 80060fc:	2302      	movs	r3, #2
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006102:	e00e      	b.n	8006122 <UART_SetConfig+0x27e>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610a:	e00a      	b.n	8006122 <UART_SetConfig+0x27e>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006112:	e006      	b.n	8006122 <UART_SetConfig+0x27e>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611a:	e002      	b.n	8006122 <UART_SetConfig+0x27e>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a17      	ldr	r2, [pc, #92]	@ (8006184 <UART_SetConfig+0x2e0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	f040 80a8 	bne.w	800627e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800612e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006132:	2b08      	cmp	r3, #8
 8006134:	d834      	bhi.n	80061a0 <UART_SetConfig+0x2fc>
 8006136:	a201      	add	r2, pc, #4	@ (adr r2, 800613c <UART_SetConfig+0x298>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	08006161 	.word	0x08006161
 8006140:	080061a1 	.word	0x080061a1
 8006144:	08006169 	.word	0x08006169
 8006148:	080061a1 	.word	0x080061a1
 800614c:	0800616f 	.word	0x0800616f
 8006150:	080061a1 	.word	0x080061a1
 8006154:	080061a1 	.word	0x080061a1
 8006158:	080061a1 	.word	0x080061a1
 800615c:	08006177 	.word	0x08006177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006160:	f7fe fbca 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8006164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006166:	e021      	b.n	80061ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006168:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <UART_SetConfig+0x2f8>)
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800616c:	e01e      	b.n	80061ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616e:	f7fe fb55 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8006172:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006174:	e01a      	b.n	80061ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800617c:	e016      	b.n	80061ac <UART_SetConfig+0x308>
 800617e:	bf00      	nop
 8006180:	cfff69f3 	.word	0xcfff69f3
 8006184:	40008000 	.word	0x40008000
 8006188:	40013800 	.word	0x40013800
 800618c:	40021000 	.word	0x40021000
 8006190:	40004400 	.word	0x40004400
 8006194:	40004800 	.word	0x40004800
 8006198:	40004c00 	.word	0x40004c00
 800619c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 812a 	beq.w	8006408 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	4a9e      	ldr	r2, [pc, #632]	@ (8006434 <UART_SetConfig+0x590>)
 80061ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061be:	461a      	mov	r2, r3
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	4413      	add	r3, r2
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d305      	bcc.n	80061e4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061ea:	e10d      	b.n	8006408 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	2200      	movs	r2, #0
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	60fa      	str	r2, [r7, #12]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	4a8e      	ldr	r2, [pc, #568]	@ (8006434 <UART_SetConfig+0x590>)
 80061fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2200      	movs	r2, #0
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800620e:	f7fa f803 	bl	8000218 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	020b      	lsls	r3, r1, #8
 8006224:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006228:	0202      	lsls	r2, r0, #8
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	6849      	ldr	r1, [r1, #4]
 800622e:	0849      	lsrs	r1, r1, #1
 8006230:	2000      	movs	r0, #0
 8006232:	460c      	mov	r4, r1
 8006234:	4605      	mov	r5, r0
 8006236:	eb12 0804 	adds.w	r8, r2, r4
 800623a:	eb43 0905 	adc.w	r9, r3, r5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	469a      	mov	sl, r3
 8006246:	4693      	mov	fp, r2
 8006248:	4652      	mov	r2, sl
 800624a:	465b      	mov	r3, fp
 800624c:	4640      	mov	r0, r8
 800624e:	4649      	mov	r1, r9
 8006250:	f7f9 ffe2 	bl	8000218 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4613      	mov	r3, r2
 800625a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006262:	d308      	bcc.n	8006276 <UART_SetConfig+0x3d2>
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626a:	d204      	bcs.n	8006276 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a3a      	ldr	r2, [r7, #32]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	e0c8      	b.n	8006408 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800627c:	e0c4      	b.n	8006408 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006286:	d167      	bne.n	8006358 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006288:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800628c:	2b08      	cmp	r3, #8
 800628e:	d828      	bhi.n	80062e2 <UART_SetConfig+0x43e>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <UART_SetConfig+0x3f4>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062cd 	.word	0x080062cd
 80062a4:	080062e3 	.word	0x080062e3
 80062a8:	080062d3 	.word	0x080062d3
 80062ac:	080062e3 	.word	0x080062e3
 80062b0:	080062e3 	.word	0x080062e3
 80062b4:	080062e3 	.word	0x080062e3
 80062b8:	080062db 	.word	0x080062db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062bc:	f7fe fb1c 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062c2:	e014      	b.n	80062ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c4:	f7fe fb2e 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ca:	e010      	b.n	80062ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062cc:	4b5a      	ldr	r3, [pc, #360]	@ (8006438 <UART_SetConfig+0x594>)
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062d0:	e00d      	b.n	80062ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d2:	f7fe faa3 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80062d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062d8:	e009      	b.n	80062ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062e0:	e005      	b.n	80062ee <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8089 	beq.w	8006408 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	4a4e      	ldr	r2, [pc, #312]	@ (8006434 <UART_SetConfig+0x590>)
 80062fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006300:	461a      	mov	r2, r3
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	fbb3 f3f2 	udiv	r3, r3, r2
 8006308:	005a      	lsls	r2, r3, #1
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	085b      	lsrs	r3, r3, #1
 8006310:	441a      	add	r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	2b0f      	cmp	r3, #15
 8006320:	d916      	bls.n	8006350 <UART_SetConfig+0x4ac>
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006328:	d212      	bcs.n	8006350 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f023 030f 	bic.w	r3, r3, #15
 8006332:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	b29a      	uxth	r2, r3
 8006340:	8bfb      	ldrh	r3, [r7, #30]
 8006342:	4313      	orrs	r3, r2
 8006344:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	8bfa      	ldrh	r2, [r7, #30]
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	e05b      	b.n	8006408 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006356:	e057      	b.n	8006408 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006358:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800635c:	2b08      	cmp	r3, #8
 800635e:	d828      	bhi.n	80063b2 <UART_SetConfig+0x50e>
 8006360:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <UART_SetConfig+0x4c4>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	0800638d 	.word	0x0800638d
 800636c:	08006395 	.word	0x08006395
 8006370:	0800639d 	.word	0x0800639d
 8006374:	080063b3 	.word	0x080063b3
 8006378:	080063a3 	.word	0x080063a3
 800637c:	080063b3 	.word	0x080063b3
 8006380:	080063b3 	.word	0x080063b3
 8006384:	080063b3 	.word	0x080063b3
 8006388:	080063ab 	.word	0x080063ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fe fab4 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8006390:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006392:	e014      	b.n	80063be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006394:	f7fe fac6 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 8006398:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800639a:	e010      	b.n	80063be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800639c:	4b26      	ldr	r3, [pc, #152]	@ (8006438 <UART_SetConfig+0x594>)
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063a0:	e00d      	b.n	80063be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a2:	f7fe fa3b 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80063a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063a8:	e009      	b.n	80063be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063b0:	e005      	b.n	80063be <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063bc:	bf00      	nop
    }

    if (pclk != 0U)
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d021      	beq.n	8006408 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006434 <UART_SetConfig+0x590>)
 80063ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	441a      	add	r2, r3
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b0f      	cmp	r3, #15
 80063ec:	d909      	bls.n	8006402 <UART_SetConfig+0x55e>
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f4:	d205      	bcs.n	8006402 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60da      	str	r2, [r3, #12]
 8006400:	e002      	b.n	8006408 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2201      	movs	r2, #1
 800640c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2201      	movs	r2, #1
 8006414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2200      	movs	r2, #0
 800641c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006424:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006428:	4618      	mov	r0, r3
 800642a:	3730      	adds	r7, #48	@ 0x30
 800642c:	46bd      	mov	sp, r7
 800642e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006432:	bf00      	nop
 8006434:	0800d4cc 	.word	0x0800d4cc
 8006438:	00f42400 	.word	0x00f42400

0800643c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01a      	beq.n	8006552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800653a:	d10a      	bne.n	8006552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
  }
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b098      	sub	sp, #96	@ 0x60
 8006584:	af02      	add	r7, sp, #8
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006590:	f7fb fbac 	bl	8001cec <HAL_GetTick>
 8006594:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d12f      	bne.n	8006604 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f88e 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d022      	beq.n	8006604 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e063      	b.n	80066cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b04      	cmp	r3, #4
 8006610:	d149      	bne.n	80066a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006612:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661a:	2200      	movs	r2, #0
 800661c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f857 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d03c      	beq.n	80066a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	623b      	str	r3, [r7, #32]
   return(result);
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800664a:	633b      	str	r3, [r7, #48]	@ 0x30
 800664c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	60fb      	str	r3, [r7, #12]
   return(result);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800667e:	61fa      	str	r2, [r7, #28]
 8006680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	69b9      	ldr	r1, [r7, #24]
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	617b      	str	r3, [r7, #20]
   return(result);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e5      	bne.n	800665e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e012      	b.n	80066cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3758      	adds	r7, #88	@ 0x58
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	e04f      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d04b      	beq.n	8006786 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ee:	f7fb fafd 	bl	8001cec <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <UART_WaitOnFlagUntilTimeout+0x30>
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e04e      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	d037      	beq.n	8006786 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b80      	cmp	r3, #128	@ 0x80
 800671a:	d034      	beq.n	8006786 <UART_WaitOnFlagUntilTimeout+0xb2>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b40      	cmp	r3, #64	@ 0x40
 8006720:	d031      	beq.n	8006786 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d110      	bne.n	8006752 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2208      	movs	r2, #8
 8006736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f95b 	bl	80069f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2208      	movs	r2, #8
 8006742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e029      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006760:	d111      	bne.n	8006786 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800676a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f941 	bl	80069f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e00f      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4013      	ands	r3, r2
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d0a0      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b0a3      	sub	sp, #140	@ 0x8c
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	4613      	mov	r3, r2
 80067bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	88fa      	ldrh	r2, [r7, #6]
 80067c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e2:	d10e      	bne.n	8006802 <UART_Start_Receive_IT+0x52>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <UART_Start_Receive_IT+0x48>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80067f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80067f6:	e02d      	b.n	8006854 <UART_Start_Receive_IT+0xa4>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	22ff      	movs	r2, #255	@ 0xff
 80067fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006800:	e028      	b.n	8006854 <UART_Start_Receive_IT+0xa4>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10d      	bne.n	8006826 <UART_Start_Receive_IT+0x76>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <UART_Start_Receive_IT+0x6c>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	22ff      	movs	r2, #255	@ 0xff
 8006816:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800681a:	e01b      	b.n	8006854 <UART_Start_Receive_IT+0xa4>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	227f      	movs	r2, #127	@ 0x7f
 8006820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006824:	e016      	b.n	8006854 <UART_Start_Receive_IT+0xa4>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800682e:	d10d      	bne.n	800684c <UART_Start_Receive_IT+0x9c>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <UART_Start_Receive_IT+0x92>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	227f      	movs	r2, #127	@ 0x7f
 800683c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006840:	e008      	b.n	8006854 <UART_Start_Receive_IT+0xa4>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	223f      	movs	r2, #63	@ 0x3f
 8006846:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800684a:	e003      	b.n	8006854 <UART_Start_Receive_IT+0xa4>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2222      	movs	r2, #34	@ 0x22
 8006860:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006874:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006888:	673a      	str	r2, [r7, #112]	@ 0x70
 800688a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800688e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e3      	bne.n	8006864 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a4:	d14f      	bne.n	8006946 <UART_Start_Receive_IT+0x196>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80068ac:	88fa      	ldrh	r2, [r7, #6]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d349      	bcc.n	8006946 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ba:	d107      	bne.n	80068cc <UART_Start_Receive_IT+0x11c>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a47      	ldr	r2, [pc, #284]	@ (80069e4 <UART_Start_Receive_IT+0x234>)
 80068c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80068ca:	e002      	b.n	80068d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a46      	ldr	r2, [pc, #280]	@ (80069e8 <UART_Start_Receive_IT+0x238>)
 80068d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01a      	beq.n	8006910 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006902:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800690a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e4      	bne.n	80068da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006926:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006930:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006932:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800693e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e5      	bne.n	8006910 <UART_Start_Receive_IT+0x160>
 8006944:	e046      	b.n	80069d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800694e:	d107      	bne.n	8006960 <UART_Start_Receive_IT+0x1b0>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d103      	bne.n	8006960 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a24      	ldr	r2, [pc, #144]	@ (80069ec <UART_Start_Receive_IT+0x23c>)
 800695c:	675a      	str	r2, [r3, #116]	@ 0x74
 800695e:	e002      	b.n	8006966 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a23      	ldr	r2, [pc, #140]	@ (80069f0 <UART_Start_Receive_IT+0x240>)
 8006964:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d019      	beq.n	80069a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006982:	677b      	str	r3, [r7, #116]	@ 0x74
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
 800698e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e6      	bne.n	800696e <UART_Start_Receive_IT+0x1be>
 80069a0:	e018      	b.n	80069d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	613b      	str	r3, [r7, #16]
   return(result);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	69f9      	ldr	r1, [r7, #28]
 80069c6:	6a3a      	ldr	r2, [r7, #32]
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e6      	bne.n	80069a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	378c      	adds	r7, #140	@ 0x8c
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	08007219 	.word	0x08007219
 80069e8:	08006eb5 	.word	0x08006eb5
 80069ec:	08006cfd 	.word	0x08006cfd
 80069f0:	08006b45 	.word	0x08006b45

080069f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b095      	sub	sp, #84	@ 0x54
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e6      	bne.n	80069fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3308      	adds	r3, #8
 8006a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e3      	bne.n	8006a2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d118      	bne.n	8006aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6979      	ldr	r1, [r7, #20]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e6      	bne.n	8006a6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ab4:	bf00      	nop
 8006ab6:	3754      	adds	r7, #84	@ 0x54
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7fa fd7a 	bl	80015d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e6      	bne.n	8006af4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff f975 	bl	8005e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b3a:	bf00      	nop
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b09c      	sub	sp, #112	@ 0x70
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b5c:	2b22      	cmp	r3, #34	@ 0x22
 8006b5e:	f040 80be 	bne.w	8006cde <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b70:	b2d9      	uxtb	r1, r3
 8006b72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f040 80a1 	bne.w	8006cee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e6      	bne.n	8006bac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006bfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a33      	ldr	r2, [pc, #204]	@ (8006cf8 <UART_RxISR_8BIT+0x1b4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d01f      	beq.n	8006c70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d018      	beq.n	8006c70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d12e      	bne.n	8006cd6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d103      	bne.n	8006cc6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff f8b2 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cd4:	e00b      	b.n	8006cee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fa fc4e 	bl	8001578 <HAL_UART_RxCpltCallback>
}
 8006cdc:	e007      	b.n	8006cee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699a      	ldr	r2, [r3, #24]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0208 	orr.w	r2, r2, #8
 8006cec:	619a      	str	r2, [r3, #24]
}
 8006cee:	bf00      	nop
 8006cf0:	3770      	adds	r7, #112	@ 0x70
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40008000 	.word	0x40008000

08006cfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b09c      	sub	sp, #112	@ 0x70
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d14:	2b22      	cmp	r3, #34	@ 0x22
 8006d16:	f040 80be 	bne.w	8006e96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d28:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006d2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d32:	4013      	ands	r3, r2
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3e:	1c9a      	adds	r2, r3, #2
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 80a1 	bne.w	8006ea6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d84:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e6      	bne.n	8006d64 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006db6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e5      	bne.n	8006d96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a33      	ldr	r2, [pc, #204]	@ (8006eb0 <UART_RxISR_16BIT+0x1b4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d01f      	beq.n	8006e28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d018      	beq.n	8006e28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e6      	bne.n	8006df6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d12e      	bne.n	8006e8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f023 0310 	bic.w	r3, r3, #16
 8006e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6979      	ldr	r1, [r7, #20]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	613b      	str	r3, [r7, #16]
   return(result);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e6      	bne.n	8006e36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d103      	bne.n	8006e7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fe ffd6 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e8c:	e00b      	b.n	8006ea6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fa fb72 	bl	8001578 <HAL_UART_RxCpltCallback>
}
 8006e94:	e007      	b.n	8006ea6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0208 	orr.w	r2, r2, #8
 8006ea4:	619a      	str	r2, [r3, #24]
}
 8006ea6:	bf00      	nop
 8006ea8:	3770      	adds	r7, #112	@ 0x70
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	40008000 	.word	0x40008000

08006eb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b0ac      	sub	sp, #176	@ 0xb0
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ec2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eea:	2b22      	cmp	r3, #34	@ 0x22
 8006eec:	f040 8183 	bne.w	80071f6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ef6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006efa:	e126      	b.n	800714a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f06:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006f0a:	b2d9      	uxtb	r1, r3
 8006f0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	400a      	ands	r2, r1
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d053      	beq.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d011      	beq.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f74:	f043 0201 	orr.w	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d011      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d011      	beq.n	8006fde <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd4:	f043 0202 	orr.w	r2, r3, #2
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fa faf5 	bl	80015d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 80a3 	bne.w	800714a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007028:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800702c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007034:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e4      	bne.n	8007004 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800704a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800704c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007062:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007064:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007068:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e1      	bne.n	800703a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a60      	ldr	r2, [pc, #384]	@ (8007210 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d021      	beq.n	80070d8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01a      	beq.n	80070d8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80070c6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e4      	bne.n	80070a2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d130      	bne.n	8007142 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	f023 0310 	bic.w	r3, r3, #16
 80070fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007108:	643b      	str	r3, [r7, #64]	@ 0x40
 800710a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800710e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e4      	bne.n	80070e6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b10      	cmp	r3, #16
 8007128:	d103      	bne.n	8007132 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2210      	movs	r2, #16
 8007130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fe fe7c 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007140:	e00e      	b.n	8007160 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fa fa18 	bl	8001578 <HAL_UART_RxCpltCallback>
        break;
 8007148:	e00a      	b.n	8007160 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800714a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800714e:	2b00      	cmp	r3, #0
 8007150:	d006      	beq.n	8007160 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	f47f aece 	bne.w	8006efc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007166:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800716a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800716e:	2b00      	cmp	r3, #0
 8007170:	d049      	beq.n	8007206 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007178:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800717c:	429a      	cmp	r2, r3
 800717e:	d242      	bcs.n	8007206 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80071a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e3      	bne.n	8007180 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a16      	ldr	r2, [pc, #88]	@ (8007214 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80071bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f043 0320 	orr.w	r3, r3, #32
 80071d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6979      	ldr	r1, [r7, #20]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	613b      	str	r3, [r7, #16]
   return(result);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e4      	bne.n	80071be <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071f4:	e007      	b.n	8007206 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0208 	orr.w	r2, r2, #8
 8007204:	619a      	str	r2, [r3, #24]
}
 8007206:	bf00      	nop
 8007208:	37b0      	adds	r7, #176	@ 0xb0
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40008000 	.word	0x40008000
 8007214:	08006b45 	.word	0x08006b45

08007218 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b0ae      	sub	sp, #184	@ 0xb8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007226:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800724e:	2b22      	cmp	r3, #34	@ 0x22
 8007250:	f040 8187 	bne.w	8007562 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800725a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800725e:	e12a      	b.n	80074b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007266:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800726e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007272:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007276:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800727a:	4013      	ands	r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007282:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007288:	1c9a      	adds	r2, r3, #2
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d053      	beq.n	800735e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d011      	beq.n	80072e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80072c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2201      	movs	r2, #1
 80072d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072dc:	f043 0201 	orr.w	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d011      	beq.n	8007316 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80072f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00b      	beq.n	8007316 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2202      	movs	r2, #2
 8007304:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730c:	f043 0204 	orr.w	r2, r3, #4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d011      	beq.n	8007346 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2204      	movs	r2, #4
 8007334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733c:	f043 0202 	orr.w	r2, r3, #2
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734c:	2b00      	cmp	r3, #0
 800734e:	d006      	beq.n	800735e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7fa f941 	bl	80015d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 80a5 	bne.w	80074b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800737a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800737c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800738e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007392:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007396:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e2      	bne.n	800736c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80073ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e1      	bne.n	80073a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a60      	ldr	r2, [pc, #384]	@ (800757c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d021      	beq.n	8007444 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01a      	beq.n	8007444 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800741c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800741e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007430:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007432:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007436:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800743e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e4      	bne.n	800740e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d130      	bne.n	80074ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007462:	f023 0310 	bic.w	r3, r3, #16
 8007466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007474:	647b      	str	r3, [r7, #68]	@ 0x44
 8007476:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800747a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e4      	bne.n	8007452 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b10      	cmp	r3, #16
 8007494:	d103      	bne.n	800749e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2210      	movs	r2, #16
 800749c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fe fcc6 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80074ac:	e00e      	b.n	80074cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fa f862 	bl	8001578 <HAL_UART_RxCpltCallback>
        break;
 80074b4:	e00a      	b.n	80074cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074b6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d006      	beq.n	80074cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80074be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f47f aeca 	bne.w	8007260 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d049      	beq.n	8007572 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074e4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d242      	bcs.n	8007572 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	623b      	str	r3, [r7, #32]
   return(result);
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007502:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007510:	633a      	str	r2, [r7, #48]	@ 0x30
 8007512:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e3      	bne.n	80074ec <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a16      	ldr	r2, [pc, #88]	@ (8007580 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007528:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	60fb      	str	r3, [r7, #12]
   return(result);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f043 0320 	orr.w	r3, r3, #32
 800753e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	69fa      	ldr	r2, [r7, #28]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	617b      	str	r3, [r7, #20]
   return(result);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e4      	bne.n	800752a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007560:	e007      	b.n	8007572 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0208 	orr.w	r2, r2, #8
 8007570:	619a      	str	r2, [r3, #24]
}
 8007572:	bf00      	nop
 8007574:	37b8      	adds	r7, #184	@ 0xb8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	40008000 	.word	0x40008000
 8007580:	08006cfd 	.word	0x08006cfd

08007584 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e027      	b.n	8007626 <HAL_UARTEx_DisableFifoMode+0x66>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2224      	movs	r2, #36	@ 0x24
 80075e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007604:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007646:	2302      	movs	r3, #2
 8007648:	e02d      	b.n	80076a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2224      	movs	r2, #36	@ 0x24
 8007656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f850 	bl	800772c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e02d      	b.n	8007722 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2224      	movs	r2, #36	@ 0x24
 80076d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f812 	bl	800772c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007738:	2b00      	cmp	r3, #0
 800773a:	d108      	bne.n	800774e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800774c:	e031      	b.n	80077b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800774e:	2308      	movs	r3, #8
 8007750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007752:	2308      	movs	r3, #8
 8007754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	0e5b      	lsrs	r3, r3, #25
 800775e:	b2db      	uxtb	r3, r3
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	0f5b      	lsrs	r3, r3, #29
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	7b3a      	ldrb	r2, [r7, #12]
 800777a:	4911      	ldr	r1, [pc, #68]	@ (80077c0 <UARTEx_SetNbDataToProcess+0x94>)
 800777c:	5c8a      	ldrb	r2, [r1, r2]
 800777e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007782:	7b3a      	ldrb	r2, [r7, #12]
 8007784:	490f      	ldr	r1, [pc, #60]	@ (80077c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007788:	fb93 f3f2 	sdiv	r3, r3, r2
 800778c:	b29a      	uxth	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	7b7a      	ldrb	r2, [r7, #13]
 8007798:	4909      	ldr	r1, [pc, #36]	@ (80077c0 <UARTEx_SetNbDataToProcess+0x94>)
 800779a:	5c8a      	ldrb	r2, [r1, r2]
 800779c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077a0:	7b7a      	ldrb	r2, [r7, #13]
 80077a2:	4908      	ldr	r1, [pc, #32]	@ (80077c4 <UARTEx_SetNbDataToProcess+0x98>)
 80077a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077b2:	bf00      	nop
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	0800d4e4 	.word	0x0800d4e4
 80077c4:	0800d4ec 	.word	0x0800d4ec

080077c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077d8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80077dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077fe:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007802:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	b29b      	uxth	r3, r3
 8007810:	43db      	mvns	r3, r3
 8007812:	b29b      	uxth	r3, r3
 8007814:	4013      	ands	r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	1d3b      	adds	r3, r7, #4
 8007836:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2201      	movs	r2, #1
 800783e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007868:	b480      	push	{r7}
 800786a:	b09d      	sub	sp, #116	@ 0x74
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800788a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	78db      	ldrb	r3, [r3, #3]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d81f      	bhi.n	80078da <USB_ActivateEndpoint+0x72>
 800789a:	a201      	add	r2, pc, #4	@ (adr r2, 80078a0 <USB_ActivateEndpoint+0x38>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078cd 	.word	0x080078cd
 80078a8:	080078e3 	.word	0x080078e3
 80078ac:	080078bf 	.word	0x080078bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80078b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80078bc:	e012      	b.n	80078e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80078be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078c2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80078c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80078ca:	e00b      	b.n	80078e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80078cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80078d8:	e004      	b.n	80078e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80078e0:	e000      	b.n	80078e4 <USB_ActivateEndpoint+0x7c>
      break;
 80078e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	441a      	add	r2, r3
 80078ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007902:	b29b      	uxth	r3, r3
 8007904:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	b21b      	sxth	r3, r3
 8007916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800791a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791e:	b21a      	sxth	r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	b21b      	sxth	r3, r3
 8007926:	4313      	orrs	r3, r2
 8007928:	b21b      	sxth	r3, r3
 800792a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800793c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794c:	b29b      	uxth	r3, r3
 800794e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	7b1b      	ldrb	r3, [r3, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 8178 	bne.w	8007c4a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8084 	beq.w	8007a6c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	61bb      	str	r3, [r7, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800796e:	b29b      	uxth	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	4413      	add	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	00da      	lsls	r2, r3, #3
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	88db      	ldrh	r3, [r3, #6]
 800798c:	085b      	lsrs	r3, r3, #1
 800798e:	b29b      	uxth	r3, r3
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	827b      	strh	r3, [r7, #18]
 80079a6:	8a7b      	ldrh	r3, [r7, #18]
 80079a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01b      	beq.n	80079e8 <USB_ActivateEndpoint+0x180>
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c6:	823b      	strh	r3, [r7, #16]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	8a3b      	ldrh	r3, [r7, #16]
 80079d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	78db      	ldrb	r3, [r3, #3]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d020      	beq.n	8007a32 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a06:	81bb      	strh	r3, [r7, #12]
 8007a08:	89bb      	ldrh	r3, [r7, #12]
 8007a0a:	f083 0320 	eor.w	r3, r3, #32
 8007a0e:	81bb      	strh	r3, [r7, #12]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	441a      	add	r2, r3
 8007a1a:	89bb      	ldrh	r3, [r7, #12]
 8007a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	8013      	strh	r3, [r2, #0]
 8007a30:	e2d5      	b.n	8007fde <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a48:	81fb      	strh	r3, [r7, #14]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]
 8007a6a:	e2b8      	b.n	8007fde <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	4413      	add	r3, r2
 8007a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	00da      	lsls	r2, r3, #3
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	4413      	add	r3, r2
 8007a8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab0:	4413      	add	r3, r2
 8007ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	00da      	lsls	r2, r3, #3
 8007aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abc:	4413      	add	r3, r2
 8007abe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <USB_ActivateEndpoint+0x28a>
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e039      	b.n	8007b66 <USB_ActivateEndpoint+0x2fe>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007af8:	d818      	bhi.n	8007b2c <USB_ActivateEndpoint+0x2c4>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <USB_ActivateEndpoint+0x2ac>
 8007b0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b10:	3301      	adds	r3, #1
 8007b12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	029b      	lsls	r3, r3, #10
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	4313      	orrs	r3, r2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	e01c      	b.n	8007b66 <USB_ActivateEndpoint+0x2fe>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	095b      	lsrs	r3, r3, #5
 8007b32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <USB_ActivateEndpoint+0x2de>
 8007b40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b42:	3b01      	subs	r3, #1
 8007b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	029b      	lsls	r3, r3, #10
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007b74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01b      	beq.n	8007bb6 <USB_ActivateEndpoint+0x34e>
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b94:	843b      	strh	r3, [r7, #32]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	8c3b      	ldrh	r3, [r7, #32]
 8007ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007baa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d124      	bne.n	8007c08 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	83bb      	strh	r3, [r7, #28]
 8007bd6:	8bbb      	ldrh	r3, [r7, #28]
 8007bd8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bdc:	83bb      	strh	r3, [r7, #28]
 8007bde:	8bbb      	ldrh	r3, [r7, #28]
 8007be0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007be4:	83bb      	strh	r3, [r7, #28]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	441a      	add	r2, r3
 8007bf0:	8bbb      	ldrh	r3, [r7, #28]
 8007bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	8013      	strh	r3, [r2, #0]
 8007c06:	e1ea      	b.n	8007fde <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c1e:	83fb      	strh	r3, [r7, #30]
 8007c20:	8bfb      	ldrh	r3, [r7, #30]
 8007c22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c26:	83fb      	strh	r3, [r7, #30]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	8bfb      	ldrh	r3, [r7, #30]
 8007c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	8013      	strh	r3, [r2, #0]
 8007c48:	e1c9      	b.n	8007fde <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	78db      	ldrb	r3, [r3, #3]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d11e      	bne.n	8007c90 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c68:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	441a      	add	r2, r3
 8007c76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c82:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	8013      	strh	r3, [r2, #0]
 8007c8e:	e01d      	b.n	8007ccc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	441a      	add	r2, r3
 8007cb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cdc:	4413      	add	r3, r2
 8007cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	00da      	lsls	r2, r3, #3
 8007ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	891b      	ldrh	r3, [r3, #8]
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cfe:	801a      	strh	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d10:	4413      	add	r3, r2
 8007d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	00da      	lsls	r2, r3, #3
 8007d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	895b      	ldrh	r3, [r3, #10]
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f040 8093 	bne.w	8007e64 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007d4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01b      	beq.n	8007d92 <USB_ActivateEndpoint+0x52a>
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	441a      	add	r2, r3
 8007d7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007da0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01b      	beq.n	8007de2 <USB_ActivateEndpoint+0x57a>
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	441a      	add	r2, r3
 8007dcc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007dfa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007dfc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e00:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e02:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e08:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	441a      	add	r2, r3
 8007e14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e40:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	8013      	strh	r3, [r2, #0]
 8007e62:	e0bc      	b.n	8007fde <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007e74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01d      	beq.n	8007ebc <USB_ActivateEndpoint+0x654>
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e96:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	441a      	add	r2, r3
 8007ea4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007ecc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01d      	beq.n	8007f14 <USB_ActivateEndpoint+0x6ac>
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007f00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	78db      	ldrb	r3, [r3, #3]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d024      	beq.n	8007f66 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f32:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f3a:	f083 0320 	eor.w	r3, r3, #32
 8007f3e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	8013      	strh	r3, [r2, #0]
 8007f64:	e01d      	b.n	8007fa2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	441a      	add	r2, r3
 8007f8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	441a      	add	r2, r3
 8007fc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007fde:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3774      	adds	r7, #116	@ 0x74
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop

08007ff0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b08d      	sub	sp, #52	@ 0x34
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	7b1b      	ldrb	r3, [r3, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 808e 	bne.w	8008120 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d044      	beq.n	8008096 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	81bb      	strh	r3, [r7, #12]
 800801a:	89bb      	ldrh	r3, [r7, #12]
 800801c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01b      	beq.n	800805c <USB_DeactivateEndpoint+0x6c>
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803a:	817b      	strh	r3, [r7, #10]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	897b      	ldrh	r3, [r7, #10]
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008054:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800806e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008072:	813b      	strh	r3, [r7, #8]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	441a      	add	r2, r3
 800807e:	893b      	ldrh	r3, [r7, #8]
 8008080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800808c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008090:	b29b      	uxth	r3, r3
 8008092:	8013      	strh	r3, [r2, #0]
 8008094:	e192      	b.n	80083bc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	827b      	strh	r3, [r7, #18]
 80080a4:	8a7b      	ldrh	r3, [r7, #18]
 80080a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d01b      	beq.n	80080e6 <USB_DeactivateEndpoint+0xf6>
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c4:	823b      	strh	r3, [r7, #16]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	441a      	add	r2, r3
 80080d0:	8a3b      	ldrh	r3, [r7, #16]
 80080d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080fc:	81fb      	strh	r3, [r7, #14]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	441a      	add	r2, r3
 8008108:	89fb      	ldrh	r3, [r7, #14]
 800810a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800810e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811a:	b29b      	uxth	r3, r3
 800811c:	8013      	strh	r3, [r2, #0]
 800811e:	e14d      	b.n	80083bc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 80a5 	bne.w	8008274 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	843b      	strh	r3, [r7, #32]
 8008138:	8c3b      	ldrh	r3, [r7, #32]
 800813a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01b      	beq.n	800817a <USB_DeactivateEndpoint+0x18a>
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008158:	83fb      	strh	r3, [r7, #30]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	8bfb      	ldrh	r3, [r7, #30]
 8008166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800816a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800816e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008176:	b29b      	uxth	r3, r3
 8008178:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	83bb      	strh	r3, [r7, #28]
 8008188:	8bbb      	ldrh	r3, [r7, #28]
 800818a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818e:	2b00      	cmp	r3, #0
 8008190:	d01b      	beq.n	80081ca <USB_DeactivateEndpoint+0x1da>
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081a8:	837b      	strh	r3, [r7, #26]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	441a      	add	r2, r3
 80081b4:	8b7b      	ldrh	r3, [r7, #26]
 80081b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e0:	833b      	strh	r3, [r7, #24]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	441a      	add	r2, r3
 80081ec:	8b3b      	ldrh	r3, [r7, #24]
 80081ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081fe:	b29b      	uxth	r3, r3
 8008200:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008218:	82fb      	strh	r3, [r7, #22]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	8afb      	ldrh	r3, [r7, #22]
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800824c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008250:	82bb      	strh	r3, [r7, #20]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	441a      	add	r2, r3
 800825c:	8abb      	ldrh	r3, [r7, #20]
 800825e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800826a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800826e:	b29b      	uxth	r3, r3
 8008270:	8013      	strh	r3, [r2, #0]
 8008272:	e0a3      	b.n	80083bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008282:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01b      	beq.n	80082c4 <USB_DeactivateEndpoint+0x2d4>
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800829e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	441a      	add	r2, r3
 80082ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80082b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80082d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01b      	beq.n	8008314 <USB_DeactivateEndpoint+0x324>
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	441a      	add	r2, r3
 80082fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800830c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008310:	b29b      	uxth	r3, r3
 8008312:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	441a      	add	r2, r3
 8008336:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800833c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008340:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008348:	b29b      	uxth	r3, r3
 800834a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800835e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008362:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	441a      	add	r2, r3
 800836e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800837c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008380:	b29b      	uxth	r3, r3
 8008382:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	441a      	add	r2, r3
 80083a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80083a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3734      	adds	r7, #52	@ 0x34
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b0c2      	sub	sp, #264	@ 0x108
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d8:	6018      	str	r0, [r3, #0]
 80083da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	f040 86b7 	bne.w	8009164 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80083f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	429a      	cmp	r2, r3
 8008410:	d908      	bls.n	8008424 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008422:	e007      	b.n	8008434 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	7b1b      	ldrb	r3, [r3, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d13a      	bne.n	80084ba <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6959      	ldr	r1, [r3, #20]
 8008450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	88da      	ldrh	r2, [r3, #6]
 800845c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008460:	b29b      	uxth	r3, r3
 8008462:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008466:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	f001 fc99 	bl	8009da2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800848a:	b29b      	uxth	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	4413      	add	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	00da      	lsls	r2, r3, #3
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	4413      	add	r3, r2
 80084a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	f000 be1f 	b.w	80090f8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80084ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	78db      	ldrb	r3, [r3, #3]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	f040 8462 	bne.w	8008d90 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6a1a      	ldr	r2, [r3, #32]
 80084d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	f240 83df 	bls.w	8008ca8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800850c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008510:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800853a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800853e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008542:	b29b      	uxth	r3, r3
 8008544:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a1a      	ldr	r2, [r3, #32]
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008556:	1ad2      	subs	r2, r2, r3
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 81c7 	beq.w	800891a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800858c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	633b      	str	r3, [r7, #48]	@ 0x30
 8008598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d177      	bne.n	8008698 <USB_EPStartXfer+0x2ce>
 80085a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	4413      	add	r3, r2
 80085ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	00da      	lsls	r2, r3, #3
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	4413      	add	r3, r2
 80085de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <USB_EPStartXfer+0x248>
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860a:	b29a      	uxth	r2, r3
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e067      	b.n	80086e2 <USB_EPStartXfer+0x318>
 8008612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008616:	2b3e      	cmp	r3, #62	@ 0x3e
 8008618:	d81c      	bhi.n	8008654 <USB_EPStartXfer+0x28a>
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <USB_EPStartXfer+0x270>
 8008630:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008634:	3301      	adds	r3, #1
 8008636:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29a      	uxth	r2, r3
 8008640:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008644:	b29b      	uxth	r3, r3
 8008646:	029b      	lsls	r3, r3, #10
 8008648:	b29b      	uxth	r3, r3
 800864a:	4313      	orrs	r3, r2
 800864c:	b29a      	uxth	r2, r3
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	e046      	b.n	80086e2 <USB_EPStartXfer+0x318>
 8008654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800865e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	2b00      	cmp	r3, #0
 8008668:	d104      	bne.n	8008674 <USB_EPStartXfer+0x2aa>
 800866a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800866e:	3b01      	subs	r3, #1
 8008670:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29a      	uxth	r2, r3
 800867a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800867e:	b29b      	uxth	r3, r3
 8008680:	029b      	lsls	r3, r3, #10
 8008682:	b29b      	uxth	r3, r3
 8008684:	4313      	orrs	r3, r2
 8008686:	b29b      	uxth	r3, r3
 8008688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008690:	b29a      	uxth	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	e024      	b.n	80086e2 <USB_EPStartXfer+0x318>
 8008698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d11c      	bne.n	80086e2 <USB_EPStartXfer+0x318>
 80086a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	461a      	mov	r2, r3
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	4413      	add	r3, r2
 80086be:	633b      	str	r3, [r7, #48]	@ 0x30
 80086c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	00da      	lsls	r2, r3, #3
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	4413      	add	r3, r2
 80086d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086dc:	b29a      	uxth	r2, r3
 80086de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	895b      	ldrh	r3, [r3, #10]
 80086ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6959      	ldr	r1, [r3, #20]
 80086fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008702:	b29b      	uxth	r3, r3
 8008704:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008708:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800870c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008710:	6800      	ldr	r0, [r0, #0]
 8008712:	f001 fb46 	bl	8009da2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008726:	441a      	add	r2, r3
 8008728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6a1a      	ldr	r2, [r3, #32]
 8008740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	429a      	cmp	r2, r3
 800874e:	d90f      	bls.n	8008770 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6a1a      	ldr	r2, [r3, #32]
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008760:	1ad2      	subs	r2, r2, r3
 8008762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	621a      	str	r2, [r3, #32]
 800876e:	e00e      	b.n	800878e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800878e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	785b      	ldrb	r3, [r3, #1]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d177      	bne.n	800888e <USB_EPStartXfer+0x4c4>
 800879e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	4413      	add	r3, r2
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	00da      	lsls	r2, r3, #3
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	4413      	add	r3, r2
 80087d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	801a      	strh	r2, [r3, #0]
 80087ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <USB_EPStartXfer+0x43e>
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008800:	b29a      	uxth	r2, r3
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	e06d      	b.n	80088e4 <USB_EPStartXfer+0x51a>
 8008808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880c:	2b3e      	cmp	r3, #62	@ 0x3e
 800880e:	d81c      	bhi.n	800884a <USB_EPStartXfer+0x480>
 8008810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <USB_EPStartXfer+0x466>
 8008826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800882a:	3301      	adds	r3, #1
 800882c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29a      	uxth	r2, r3
 8008836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800883a:	b29b      	uxth	r3, r3
 800883c:	029b      	lsls	r3, r3, #10
 800883e:	b29b      	uxth	r3, r3
 8008840:	4313      	orrs	r3, r2
 8008842:	b29a      	uxth	r2, r3
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	e04c      	b.n	80088e4 <USB_EPStartXfer+0x51a>
 800884a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800884e:	095b      	lsrs	r3, r3, #5
 8008850:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008858:	f003 031f 	and.w	r3, r3, #31
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <USB_EPStartXfer+0x4a0>
 8008860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008864:	3b01      	subs	r3, #1
 8008866:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29a      	uxth	r2, r3
 8008870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008874:	b29b      	uxth	r3, r3
 8008876:	029b      	lsls	r3, r3, #10
 8008878:	b29b      	uxth	r3, r3
 800887a:	4313      	orrs	r3, r2
 800887c:	b29b      	uxth	r3, r3
 800887e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008886:	b29a      	uxth	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	e02a      	b.n	80088e4 <USB_EPStartXfer+0x51a>
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d122      	bne.n	80088e4 <USB_EPStartXfer+0x51a>
 800889e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	623b      	str	r3, [r7, #32]
 80088aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	4413      	add	r3, r2
 80088c0:	623b      	str	r3, [r7, #32]
 80088c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	00da      	lsls	r2, r3, #3
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	4413      	add	r3, r2
 80088d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088d8:	61fb      	str	r3, [r7, #28]
 80088da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088de:	b29a      	uxth	r2, r3
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	891b      	ldrh	r3, [r3, #8]
 80088f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6959      	ldr	r1, [r3, #20]
 8008900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008904:	b29b      	uxth	r3, r3
 8008906:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800890a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800890e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008912:	6800      	ldr	r0, [r0, #0]
 8008914:	f001 fa45 	bl	8009da2 <USB_WritePMA>
 8008918:	e3ee      	b.n	80090f8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800891a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800891e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d177      	bne.n	8008a1a <USB_EPStartXfer+0x650>
 800892a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008944:	b29b      	uxth	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800894a:	4413      	add	r3, r2
 800894c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800894e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	00da      	lsls	r2, r3, #3
 800895c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800895e:	4413      	add	r3, r2
 8008960:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008964:	647b      	str	r3, [r7, #68]	@ 0x44
 8008966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29b      	uxth	r3, r3
 800896c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008970:	b29a      	uxth	r2, r3
 8008972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <USB_EPStartXfer+0x5ca>
 800897e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800898c:	b29a      	uxth	r2, r3
 800898e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	e06d      	b.n	8008a70 <USB_EPStartXfer+0x6a6>
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	2b3e      	cmp	r3, #62	@ 0x3e
 800899a:	d81c      	bhi.n	80089d6 <USB_EPStartXfer+0x60c>
 800899c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a0:	085b      	lsrs	r3, r3, #1
 80089a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d004      	beq.n	80089bc <USB_EPStartXfer+0x5f2>
 80089b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089b6:	3301      	adds	r3, #1
 80089b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	029b      	lsls	r3, r3, #10
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	e04c      	b.n	8008a70 <USB_EPStartXfer+0x6a6>
 80089d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089da:	095b      	lsrs	r3, r3, #5
 80089dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e4:	f003 031f 	and.w	r3, r3, #31
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <USB_EPStartXfer+0x62c>
 80089ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089f0:	3b01      	subs	r3, #1
 80089f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	029b      	lsls	r3, r3, #10
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	4313      	orrs	r3, r2
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a16:	801a      	strh	r2, [r3, #0]
 8008a18:	e02a      	b.n	8008a70 <USB_EPStartXfer+0x6a6>
 8008a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d122      	bne.n	8008a70 <USB_EPStartXfer+0x6a6>
 8008a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a4a:	4413      	add	r3, r2
 8008a4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	00da      	lsls	r2, r3, #3
 8008a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a5e:	4413      	add	r3, r2
 8008a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	891b      	ldrh	r3, [r3, #8]
 8008a7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6959      	ldr	r1, [r3, #20]
 8008a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a9e:	6800      	ldr	r0, [r0, #0]
 8008aa0:	f001 f97f 	bl	8009da2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab4:	441a      	add	r2, r3
 8008ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6a1a      	ldr	r2, [r3, #32]
 8008ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d90f      	bls.n	8008afe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6a1a      	ldr	r2, [r3, #32]
 8008aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	621a      	str	r2, [r3, #32]
 8008afc:	e00e      	b.n	8008b1c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d177      	bne.n	8008c28 <USB_EPStartXfer+0x85e>
 8008b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	4413      	add	r3, r2
 8008b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	00da      	lsls	r2, r3, #3
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b82:	801a      	strh	r2, [r3, #0]
 8008b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <USB_EPStartXfer+0x7d8>
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9e:	801a      	strh	r2, [r3, #0]
 8008ba0:	e067      	b.n	8008c72 <USB_EPStartXfer+0x8a8>
 8008ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ba8:	d81c      	bhi.n	8008be4 <USB_EPStartXfer+0x81a>
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bae:	085b      	lsrs	r3, r3, #1
 8008bb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <USB_EPStartXfer+0x800>
 8008bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be0:	801a      	strh	r2, [r3, #0]
 8008be2:	e046      	b.n	8008c72 <USB_EPStartXfer+0x8a8>
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <USB_EPStartXfer+0x83a>
 8008bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	029b      	lsls	r3, r3, #10
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	4313      	orrs	r3, r2
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c24:	801a      	strh	r2, [r3, #0]
 8008c26:	e024      	b.n	8008c72 <USB_EPStartXfer+0x8a8>
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d11c      	bne.n	8008c72 <USB_EPStartXfer+0x8a8>
 8008c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c4c:	4413      	add	r3, r2
 8008c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	00da      	lsls	r2, r3, #3
 8008c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c60:	4413      	add	r3, r2
 8008c62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	895b      	ldrh	r3, [r3, #10]
 8008c7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6959      	ldr	r1, [r3, #20]
 8008c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ca0:	6800      	ldr	r0, [r0, #0]
 8008ca2:	f001 f87e 	bl	8009da2 <USB_WritePMA>
 8008ca6:	e227      	b.n	80090f8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cde:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	441a      	add	r2, r3
 8008cfc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	461a      	mov	r2, r3
 8008d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d34:	4413      	add	r3, r2
 8008d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	00da      	lsls	r2, r3, #3
 8008d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d48:	4413      	add	r3, r2
 8008d4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	891b      	ldrh	r3, [r3, #8]
 8008d66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6959      	ldr	r1, [r3, #20]
 8008d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d88:	6800      	ldr	r0, [r0, #0]
 8008d8a:	f001 f80a 	bl	8009da2 <USB_WritePMA>
 8008d8e:	e1b3      	b.n	80090f8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6a1a      	ldr	r2, [r3, #32]
 8008d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da0:	1ad2      	subs	r2, r2, r3
 8008da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80c6 	beq.w	8008f62 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	785b      	ldrb	r3, [r3, #1]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d177      	bne.n	8008ee2 <USB_EPStartXfer+0xb18>
 8008df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e12:	4413      	add	r3, r2
 8008e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	00da      	lsls	r2, r3, #3
 8008e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e26:	4413      	add	r3, r2
 8008e28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <USB_EPStartXfer+0xa92>
 8008e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	e067      	b.n	8008f2c <USB_EPStartXfer+0xb62>
 8008e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e62:	d81c      	bhi.n	8008e9e <USB_EPStartXfer+0xad4>
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d004      	beq.n	8008e84 <USB_EPStartXfer+0xaba>
 8008e7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	029b      	lsls	r3, r3, #10
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e9a:	801a      	strh	r2, [r3, #0]
 8008e9c:	e046      	b.n	8008f2c <USB_EPStartXfer+0xb62>
 8008e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eac:	f003 031f 	and.w	r3, r3, #31
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d104      	bne.n	8008ebe <USB_EPStartXfer+0xaf4>
 8008eb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	029b      	lsls	r3, r3, #10
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ede:	801a      	strh	r2, [r3, #0]
 8008ee0:	e024      	b.n	8008f2c <USB_EPStartXfer+0xb62>
 8008ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d11c      	bne.n	8008f2c <USB_EPStartXfer+0xb62>
 8008ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f06:	4413      	add	r3, r2
 8008f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	00da      	lsls	r2, r3, #3
 8008f18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	895b      	ldrh	r3, [r3, #10]
 8008f38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6959      	ldr	r1, [r3, #20]
 8008f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f5a:	6800      	ldr	r0, [r0, #0]
 8008f5c:	f000 ff21 	bl	8009da2 <USB_WritePMA>
 8008f60:	e0ca      	b.n	80090f8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d177      	bne.n	8009062 <USB_EPStartXfer+0xc98>
 8008f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f92:	4413      	add	r3, r2
 8008f94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	00da      	lsls	r2, r3, #3
 8008fa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <USB_EPStartXfer+0xc12>
 8008fc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fd8:	801a      	strh	r2, [r3, #0]
 8008fda:	e073      	b.n	80090c4 <USB_EPStartXfer+0xcfa>
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fe2:	d81c      	bhi.n	800901e <USB_EPStartXfer+0xc54>
 8008fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe8:	085b      	lsrs	r3, r3, #1
 8008fea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <USB_EPStartXfer+0xc3a>
 8008ffa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008ffe:	3301      	adds	r3, #1
 8009000:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	b29a      	uxth	r2, r3
 800900a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800900e:	b29b      	uxth	r3, r3
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	b29b      	uxth	r3, r3
 8009014:	4313      	orrs	r3, r2
 8009016:	b29a      	uxth	r2, r3
 8009018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800901a:	801a      	strh	r2, [r3, #0]
 800901c:	e052      	b.n	80090c4 <USB_EPStartXfer+0xcfa>
 800901e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800902c:	f003 031f 	and.w	r3, r3, #31
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <USB_EPStartXfer+0xc74>
 8009034:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009038:	3b01      	subs	r3, #1
 800903a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800903e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	b29a      	uxth	r2, r3
 8009044:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009048:	b29b      	uxth	r3, r3
 800904a:	029b      	lsls	r3, r3, #10
 800904c:	b29b      	uxth	r3, r3
 800904e:	4313      	orrs	r3, r2
 8009050:	b29b      	uxth	r3, r3
 8009052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905a:	b29a      	uxth	r2, r3
 800905c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800905e:	801a      	strh	r2, [r3, #0]
 8009060:	e030      	b.n	80090c4 <USB_EPStartXfer+0xcfa>
 8009062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	785b      	ldrb	r3, [r3, #1]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d128      	bne.n	80090c4 <USB_EPStartXfer+0xcfa>
 8009072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800908e:	b29b      	uxth	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009096:	4413      	add	r3, r2
 8009098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800909c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	00da      	lsls	r2, r3, #3
 80090aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090ae:	4413      	add	r3, r2
 80090b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090bc:	b29a      	uxth	r2, r3
 80090be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80090c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	891b      	ldrh	r3, [r3, #8]
 80090d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6959      	ldr	r1, [r3, #20]
 80090e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80090ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80090ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80090f2:	6800      	ldr	r0, [r0, #0]
 80090f4:	f000 fe55 	bl	8009da2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80090f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800911a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800911e:	817b      	strh	r3, [r7, #10]
 8009120:	897b      	ldrh	r3, [r7, #10]
 8009122:	f083 0310 	eor.w	r3, r3, #16
 8009126:	817b      	strh	r3, [r7, #10]
 8009128:	897b      	ldrh	r3, [r7, #10]
 800912a:	f083 0320 	eor.w	r3, r3, #32
 800912e:	817b      	strh	r3, [r7, #10]
 8009130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	441a      	add	r2, r3
 800914a:	897b      	ldrh	r3, [r7, #10]
 800914c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915c:	b29b      	uxth	r3, r3
 800915e:	8013      	strh	r3, [r2, #0]
 8009160:	f000 bcdf 	b.w	8009b22 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	7b1b      	ldrb	r3, [r3, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f040 80bc 	bne.w	80092ee <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	d917      	bls.n	80091c2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80091a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b2:	1ad2      	subs	r2, r2, r3
 80091b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	619a      	str	r2, [r3, #24]
 80091c0:	e00e      	b.n	80091e0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80091c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80091d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2200      	movs	r2, #0
 80091de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80091e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009204:	4413      	add	r3, r2
 8009206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800920a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	00da      	lsls	r2, r3, #3
 8009218:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800921c:	4413      	add	r3, r2
 800921e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009232:	b29a      	uxth	r2, r3
 8009234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009238:	801a      	strh	r2, [r3, #0]
 800923a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10d      	bne.n	800925e <USB_EPStartXfer+0xe94>
 8009242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009252:	b29a      	uxth	r2, r3
 8009254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	f000 bc28 	b.w	8009aae <USB_EPStartXfer+0x16e4>
 800925e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009262:	2b3e      	cmp	r3, #62	@ 0x3e
 8009264:	d81f      	bhi.n	80092a6 <USB_EPStartXfer+0xedc>
 8009266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <USB_EPStartXfer+0xebc>
 800927c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009280:	3301      	adds	r3, #1
 8009282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29a      	uxth	r2, r3
 800928e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009292:	b29b      	uxth	r3, r3
 8009294:	029b      	lsls	r3, r3, #10
 8009296:	b29b      	uxth	r3, r3
 8009298:	4313      	orrs	r3, r2
 800929a:	b29a      	uxth	r2, r3
 800929c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	f000 bc04 	b.w	8009aae <USB_EPStartXfer+0x16e4>
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092aa:	095b      	lsrs	r3, r3, #5
 80092ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d104      	bne.n	80092c6 <USB_EPStartXfer+0xefc>
 80092bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80092c0:	3b01      	subs	r3, #1
 80092c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	029b      	lsls	r3, r3, #10
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	4313      	orrs	r3, r2
 80092da:	b29b      	uxth	r3, r3
 80092dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ea:	801a      	strh	r2, [r3, #0]
 80092ec:	e3df      	b.n	8009aae <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80092ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	78db      	ldrb	r3, [r3, #3]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	f040 8218 	bne.w	8009730 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b00      	cmp	r3, #0
 800930e:	f040 809d 	bne.w	800944c <USB_EPStartXfer+0x1082>
 8009312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800932e:	b29b      	uxth	r3, r3
 8009330:	461a      	mov	r2, r3
 8009332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009336:	4413      	add	r3, r2
 8009338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800933c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	00da      	lsls	r2, r3, #3
 800934a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800934e:	4413      	add	r3, r2
 8009350:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	b29b      	uxth	r3, r3
 8009360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009364:	b29a      	uxth	r2, r3
 8009366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10c      	bne.n	8009396 <USB_EPStartXfer+0xfcc>
 800937c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938c:	b29a      	uxth	r2, r3
 800938e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e08f      	b.n	80094b6 <USB_EPStartXfer+0x10ec>
 8009396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80093a4:	d826      	bhi.n	80093f4 <USB_EPStartXfer+0x102a>
 80093a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	085b      	lsrs	r3, r3, #1
 80093b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <USB_EPStartXfer+0x100c>
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d0:	3301      	adds	r3, #1
 80093d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29a      	uxth	r2, r3
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	029b      	lsls	r3, r3, #10
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	4313      	orrs	r3, r2
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093f0:	801a      	strh	r2, [r3, #0]
 80093f2:	e060      	b.n	80094b6 <USB_EPStartXfer+0x10ec>
 80093f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	095b      	lsrs	r3, r3, #5
 8009402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 031f 	and.w	r3, r3, #31
 8009416:	2b00      	cmp	r3, #0
 8009418:	d104      	bne.n	8009424 <USB_EPStartXfer+0x105a>
 800941a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800941e:	3b01      	subs	r3, #1
 8009420:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29a      	uxth	r2, r3
 800942c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009430:	b29b      	uxth	r3, r3
 8009432:	029b      	lsls	r3, r3, #10
 8009434:	b29b      	uxth	r3, r3
 8009436:	4313      	orrs	r3, r2
 8009438:	b29b      	uxth	r3, r3
 800943a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800943e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009442:	b29a      	uxth	r2, r3
 8009444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009448:	801a      	strh	r2, [r3, #0]
 800944a:	e034      	b.n	80094b6 <USB_EPStartXfer+0x10ec>
 800944c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	785b      	ldrb	r3, [r3, #1]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d12c      	bne.n	80094b6 <USB_EPStartXfer+0x10ec>
 800945c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800946a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009478:	b29b      	uxth	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009480:	4413      	add	r3, r2
 8009482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	00da      	lsls	r2, r3, #3
 8009494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009498:	4413      	add	r3, r2
 800949a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800949e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80094b4:	801a      	strh	r2, [r3, #0]
 80094b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f040 809d 	bne.w	8009610 <USB_EPStartXfer+0x1246>
 80094d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	461a      	mov	r2, r3
 80094f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094fa:	4413      	add	r3, r2
 80094fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	00da      	lsls	r2, r3, #3
 800950e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009512:	4413      	add	r3, r2
 8009514:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800951c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009528:	b29a      	uxth	r2, r3
 800952a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800952e:	801a      	strh	r2, [r3, #0]
 8009530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10c      	bne.n	800955a <USB_EPStartXfer+0x1190>
 8009540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800954c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009550:	b29a      	uxth	r2, r3
 8009552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	e088      	b.n	800966c <USB_EPStartXfer+0x12a2>
 800955a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800955e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	2b3e      	cmp	r3, #62	@ 0x3e
 8009568:	d826      	bhi.n	80095b8 <USB_EPStartXfer+0x11ee>
 800956a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	085b      	lsrs	r3, r3, #1
 8009578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800957c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <USB_EPStartXfer+0x11d0>
 8009590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009594:	3301      	adds	r3, #1
 8009596:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800959a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	029b      	lsls	r3, r3, #10
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	4313      	orrs	r3, r2
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095b4:	801a      	strh	r2, [r3, #0]
 80095b6:	e059      	b.n	800966c <USB_EPStartXfer+0x12a2>
 80095b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	095b      	lsrs	r3, r3, #5
 80095c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 031f 	and.w	r3, r3, #31
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d104      	bne.n	80095e8 <USB_EPStartXfer+0x121e>
 80095de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e2:	3b01      	subs	r3, #1
 80095e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	029b      	lsls	r3, r3, #10
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4313      	orrs	r3, r2
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009606:	b29a      	uxth	r2, r3
 8009608:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	e02d      	b.n	800966c <USB_EPStartXfer+0x12a2>
 8009610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	785b      	ldrb	r3, [r3, #1]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d125      	bne.n	800966c <USB_EPStartXfer+0x12a2>
 8009620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800962e:	b29b      	uxth	r3, r3
 8009630:	461a      	mov	r2, r3
 8009632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009636:	4413      	add	r3, r2
 8009638:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800963c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	00da      	lsls	r2, r3, #3
 800964a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800964e:	4413      	add	r3, r2
 8009650:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	b29a      	uxth	r2, r3
 8009666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800966a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800966c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 8218 	beq.w	8009aae <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800967e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800968c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800969e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d005      	beq.n	80096b6 <USB_EPStartXfer+0x12ec>
 80096aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10d      	bne.n	80096d2 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80096b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f040 81f5 	bne.w	8009aae <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80096c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f040 81ee 	bne.w	8009aae <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80096d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80096fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	441a      	add	r2, r3
 8009716:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800971a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800971e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009726:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800972a:	b29b      	uxth	r3, r3
 800972c:	8013      	strh	r3, [r2, #0]
 800972e:	e1be      	b.n	8009aae <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	78db      	ldrb	r3, [r3, #3]
 800973c:	2b01      	cmp	r3, #1
 800973e:	f040 81b4 	bne.w	8009aaa <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	429a      	cmp	r2, r3
 800975c:	d917      	bls.n	800978e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800975e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800976e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699a      	ldr	r2, [r3, #24]
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	619a      	str	r2, [r3, #24]
 800978c:	e00e      	b.n	80097ac <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800978e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800979e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2200      	movs	r2, #0
 80097aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80097ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f040 8085 	bne.w	80098c8 <USB_EPStartXfer+0x14fe>
 80097be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097e2:	4413      	add	r3, r2
 80097e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	00da      	lsls	r2, r3, #3
 80097f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097fa:	4413      	add	r3, r2
 80097fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009810:	b29a      	uxth	r2, r3
 8009812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10c      	bne.n	800983a <USB_EPStartXfer+0x1470>
 8009820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009830:	b29a      	uxth	r2, r3
 8009832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	e077      	b.n	800992a <USB_EPStartXfer+0x1560>
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009840:	d81e      	bhi.n	8009880 <USB_EPStartXfer+0x14b6>
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800984c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <USB_EPStartXfer+0x1498>
 8009858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800985c:	3301      	adds	r3, #1
 800985e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b29a      	uxth	r2, r3
 800986a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800986e:	b29b      	uxth	r3, r3
 8009870:	029b      	lsls	r3, r3, #10
 8009872:	b29b      	uxth	r3, r3
 8009874:	4313      	orrs	r3, r2
 8009876:	b29a      	uxth	r2, r3
 8009878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800987c:	801a      	strh	r2, [r3, #0]
 800987e:	e054      	b.n	800992a <USB_EPStartXfer+0x1560>
 8009880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009884:	095b      	lsrs	r3, r3, #5
 8009886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800988a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988e:	f003 031f 	and.w	r3, r3, #31
 8009892:	2b00      	cmp	r3, #0
 8009894:	d104      	bne.n	80098a0 <USB_EPStartXfer+0x14d6>
 8009896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800989a:	3b01      	subs	r3, #1
 800989c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80098a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	029b      	lsls	r3, r3, #10
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	4313      	orrs	r3, r2
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098be:	b29a      	uxth	r2, r3
 80098c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098c4:	801a      	strh	r2, [r3, #0]
 80098c6:	e030      	b.n	800992a <USB_EPStartXfer+0x1560>
 80098c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	785b      	ldrb	r3, [r3, #1]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d128      	bne.n	800992a <USB_EPStartXfer+0x1560>
 80098d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80098e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	461a      	mov	r2, r3
 80098f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098fc:	4413      	add	r3, r2
 80098fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	00da      	lsls	r2, r3, #3
 8009910:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009914:	4413      	add	r3, r2
 8009916:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800991a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800991e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009922:	b29a      	uxth	r2, r3
 8009924:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f040 8085 	bne.w	8009a54 <USB_EPStartXfer+0x168a>
 800994a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800994e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009966:	b29b      	uxth	r3, r3
 8009968:	461a      	mov	r2, r3
 800996a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800996e:	4413      	add	r3, r2
 8009970:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	00da      	lsls	r2, r3, #3
 8009982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009986:	4413      	add	r3, r2
 8009988:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800998c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29b      	uxth	r3, r3
 8009998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800999c:	b29a      	uxth	r2, r3
 800999e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099a2:	801a      	strh	r2, [r3, #0]
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10c      	bne.n	80099c6 <USB_EPStartXfer+0x15fc>
 80099ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099bc:	b29a      	uxth	r2, r3
 80099be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099c2:	801a      	strh	r2, [r3, #0]
 80099c4:	e073      	b.n	8009aae <USB_EPStartXfer+0x16e4>
 80099c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80099cc:	d81e      	bhi.n	8009a0c <USB_EPStartXfer+0x1642>
 80099ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d004      	beq.n	80099ee <USB_EPStartXfer+0x1624>
 80099e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099e8:	3301      	adds	r3, #1
 80099ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	029b      	lsls	r3, r3, #10
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	4313      	orrs	r3, r2
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a08:	801a      	strh	r2, [r3, #0]
 8009a0a:	e050      	b.n	8009aae <USB_EPStartXfer+0x16e4>
 8009a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a10:	095b      	lsrs	r3, r3, #5
 8009a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1a:	f003 031f 	and.w	r3, r3, #31
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <USB_EPStartXfer+0x1662>
 8009a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a26:	3b01      	subs	r3, #1
 8009a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	029b      	lsls	r3, r3, #10
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a50:	801a      	strh	r2, [r3, #0]
 8009a52:	e02c      	b.n	8009aae <USB_EPStartXfer+0x16e4>
 8009a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	785b      	ldrb	r3, [r3, #1]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d124      	bne.n	8009aae <USB_EPStartXfer+0x16e4>
 8009a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	461a      	mov	r2, r3
 8009a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	00da      	lsls	r2, r3, #3
 8009a8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a92:	4413      	add	r3, r2
 8009a94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009aa6:	801a      	strh	r2, [r3, #0]
 8009aa8:	e001      	b.n	8009aae <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e03a      	b.n	8009b24 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009ad8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009adc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ae0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009ae4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ae8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009aec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	441a      	add	r2, r3
 8009b0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b085      	sub	sp, #20
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d020      	beq.n	8009b82 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b56:	81bb      	strh	r3, [r7, #12]
 8009b58:	89bb      	ldrh	r3, [r7, #12]
 8009b5a:	f083 0310 	eor.w	r3, r3, #16
 8009b5e:	81bb      	strh	r3, [r7, #12]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	441a      	add	r2, r3
 8009b6a:	89bb      	ldrh	r3, [r7, #12]
 8009b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	8013      	strh	r3, [r2, #0]
 8009b80:	e01f      	b.n	8009bc2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b98:	81fb      	strh	r3, [r7, #14]
 8009b9a:	89fb      	ldrh	r3, [r7, #14]
 8009b9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ba0:	81fb      	strh	r3, [r7, #14]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	441a      	add	r2, r3
 8009bac:	89fb      	ldrh	r3, [r7, #14]
 8009bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	7b1b      	ldrb	r3, [r3, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f040 809d 	bne.w	8009d1e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d04c      	beq.n	8009c86 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	823b      	strh	r3, [r7, #16]
 8009bfa:	8a3b      	ldrh	r3, [r7, #16]
 8009bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d01b      	beq.n	8009c3c <USB_EPClearStall+0x6c>
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c1a:	81fb      	strh	r3, [r7, #14]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	441a      	add	r2, r3
 8009c26:	89fb      	ldrh	r3, [r7, #14]
 8009c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	78db      	ldrb	r3, [r3, #3]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d06c      	beq.n	8009d1e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c5a:	81bb      	strh	r3, [r7, #12]
 8009c5c:	89bb      	ldrh	r3, [r7, #12]
 8009c5e:	f083 0320 	eor.w	r3, r3, #32
 8009c62:	81bb      	strh	r3, [r7, #12]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	441a      	add	r2, r3
 8009c6e:	89bb      	ldrh	r3, [r7, #12]
 8009c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	8013      	strh	r3, [r2, #0]
 8009c84:	e04b      	b.n	8009d1e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4413      	add	r3, r2
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	82fb      	strh	r3, [r7, #22]
 8009c94:	8afb      	ldrh	r3, [r7, #22]
 8009c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d01b      	beq.n	8009cd6 <USB_EPClearStall+0x106>
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb4:	82bb      	strh	r3, [r7, #20]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	441a      	add	r2, r3
 8009cc0:	8abb      	ldrh	r3, [r7, #20]
 8009cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cec:	827b      	strh	r3, [r7, #18]
 8009cee:	8a7b      	ldrh	r3, [r7, #18]
 8009cf0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009cf4:	827b      	strh	r3, [r7, #18]
 8009cf6:	8a7b      	ldrh	r3, [r7, #18]
 8009cf8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009cfc:	827b      	strh	r3, [r7, #18]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	441a      	add	r2, r3
 8009d08:	8a7b      	ldrh	r3, [r7, #18]
 8009d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	371c      	adds	r7, #28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2280      	movs	r2, #128	@ 0x80
 8009d42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d94:	68fb      	ldr	r3, [r7, #12]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b08b      	sub	sp, #44	@ 0x2c
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	4611      	mov	r1, r2
 8009dae:	461a      	mov	r2, r3
 8009db0:	460b      	mov	r3, r1
 8009db2:	80fb      	strh	r3, [r7, #6]
 8009db4:	4613      	mov	r3, r2
 8009db6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009db8:	88bb      	ldrh	r3, [r7, #4]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	085b      	lsrs	r3, r3, #1
 8009dbe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dc8:	88fa      	ldrh	r2, [r7, #6]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009dd2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dd8:	e01b      	b.n	8009e12 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	3301      	adds	r3, #1
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	b21a      	sxth	r2, r3
 8009dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	b21b      	sxth	r3, r3
 8009df2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	8a7a      	ldrh	r2, [r7, #18]
 8009df8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	3301      	adds	r3, #1
 8009e04:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e0      	bne.n	8009dda <USB_WritePMA+0x38>
  }
}
 8009e18:	bf00      	nop
 8009e1a:	bf00      	nop
 8009e1c:	372c      	adds	r7, #44	@ 0x2c
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b08b      	sub	sp, #44	@ 0x2c
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	4611      	mov	r1, r2
 8009e32:	461a      	mov	r2, r3
 8009e34:	460b      	mov	r3, r1
 8009e36:	80fb      	strh	r3, [r7, #6]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e3c:	88bb      	ldrh	r3, [r7, #4]
 8009e3e:	085b      	lsrs	r3, r3, #1
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e4c:	88fa      	ldrh	r2, [r7, #6]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e56:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e5c:	e018      	b.n	8009e90 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	3302      	adds	r3, #2
 8009e6a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	3301      	adds	r3, #1
 8009e78:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	0a1b      	lsrs	r3, r3, #8
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	3301      	adds	r3, #1
 8009e88:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e3      	bne.n	8009e5e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009e96:	88bb      	ldrh	r3, [r7, #4]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	701a      	strb	r2, [r3, #0]
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	372c      	adds	r7, #44	@ 0x2c
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009eca:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ece:	f002 f90b 	bl	800c0e8 <USBD_static_malloc>
 8009ed2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e066      	b.n	8009fb4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	7c1b      	ldrb	r3, [r3, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d119      	bne.n	8009f2a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009efa:	2202      	movs	r2, #2
 8009efc:	2181      	movs	r1, #129	@ 0x81
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f001 ff99 	bl	800be36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f0e:	2202      	movs	r2, #2
 8009f10:	2101      	movs	r1, #1
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 ff8f 	bl	800be36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2210      	movs	r2, #16
 8009f24:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009f28:	e016      	b.n	8009f58 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f2a:	2340      	movs	r3, #64	@ 0x40
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	2181      	movs	r1, #129	@ 0x81
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 ff80 	bl	800be36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f3c:	2340      	movs	r3, #64	@ 0x40
 8009f3e:	2202      	movs	r2, #2
 8009f40:	2101      	movs	r1, #1
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 ff77 	bl	800be36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2210      	movs	r2, #16
 8009f54:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f58:	2308      	movs	r3, #8
 8009f5a:	2203      	movs	r2, #3
 8009f5c:	2182      	movs	r1, #130	@ 0x82
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 ff69 	bl	800be36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	7c1b      	ldrb	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d109      	bne.n	8009fa2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f98:	2101      	movs	r1, #1
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f002 f83a 	bl	800c014 <USBD_LL_PrepareReceive>
 8009fa0:	e007      	b.n	8009fb2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009fa8:	2340      	movs	r3, #64	@ 0x40
 8009faa:	2101      	movs	r1, #1
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f002 f831 	bl	800c014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009fc8:	2181      	movs	r1, #129	@ 0x81
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 ff59 	bl	800be82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 ff52 	bl	800be82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009fe6:	2182      	movs	r1, #130	@ 0x82
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 ff4a 	bl	800be82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a018:	4618      	mov	r0, r3
 800a01a:	f002 f873 	bl	800c104 <USBD_static_free>
    pdev->pClassData = NULL;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a040:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a054:	2303      	movs	r3, #3
 800a056:	e0af      	b.n	800a1b8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a060:	2b00      	cmp	r3, #0
 800a062:	d03f      	beq.n	800a0e4 <USBD_CDC_Setup+0xb4>
 800a064:	2b20      	cmp	r3, #32
 800a066:	f040 809f 	bne.w	800a1a8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	88db      	ldrh	r3, [r3, #6]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d02e      	beq.n	800a0d0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b25b      	sxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da16      	bge.n	800a0aa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a088:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	88d2      	ldrh	r2, [r2, #6]
 800a08e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b07      	cmp	r3, #7
 800a096:	bf28      	it	cs
 800a098:	2307      	movcs	r3, #7
 800a09a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	89fa      	ldrh	r2, [r7, #14]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 facd 	bl	800b642 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a0a8:	e085      	b.n	800a1b6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	785a      	ldrb	r2, [r3, #1]
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	88db      	ldrh	r3, [r3, #6]
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a0c0:	6939      	ldr	r1, [r7, #16]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	88db      	ldrh	r3, [r3, #6]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 fae6 	bl	800b69a <USBD_CtlPrepareRx>
      break;
 800a0ce:	e072      	b.n	800a1b6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	7850      	ldrb	r0, [r2, #1]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	4798      	blx	r3
      break;
 800a0e2:	e068      	b.n	800a1b6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	785b      	ldrb	r3, [r3, #1]
 800a0e8:	2b0b      	cmp	r3, #11
 800a0ea:	d852      	bhi.n	800a192 <USBD_CDC_Setup+0x162>
 800a0ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f4 <USBD_CDC_Setup+0xc4>)
 800a0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f2:	bf00      	nop
 800a0f4:	0800a125 	.word	0x0800a125
 800a0f8:	0800a1a1 	.word	0x0800a1a1
 800a0fc:	0800a193 	.word	0x0800a193
 800a100:	0800a193 	.word	0x0800a193
 800a104:	0800a193 	.word	0x0800a193
 800a108:	0800a193 	.word	0x0800a193
 800a10c:	0800a193 	.word	0x0800a193
 800a110:	0800a193 	.word	0x0800a193
 800a114:	0800a193 	.word	0x0800a193
 800a118:	0800a193 	.word	0x0800a193
 800a11c:	0800a14f 	.word	0x0800a14f
 800a120:	0800a179 	.word	0x0800a179
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d107      	bne.n	800a140 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a130:	f107 030a 	add.w	r3, r7, #10
 800a134:	2202      	movs	r2, #2
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 fa82 	bl	800b642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a13e:	e032      	b.n	800a1a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f001 fa0c 	bl	800b560 <USBD_CtlError>
            ret = USBD_FAIL;
 800a148:	2303      	movs	r3, #3
 800a14a:	75fb      	strb	r3, [r7, #23]
          break;
 800a14c:	e02b      	b.n	800a1a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b03      	cmp	r3, #3
 800a158:	d107      	bne.n	800a16a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a15a:	f107 030d 	add.w	r3, r7, #13
 800a15e:	2201      	movs	r2, #1
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 fa6d 	bl	800b642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a168:	e01d      	b.n	800a1a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f9f7 	bl	800b560 <USBD_CtlError>
            ret = USBD_FAIL;
 800a172:	2303      	movs	r3, #3
 800a174:	75fb      	strb	r3, [r7, #23]
          break;
 800a176:	e016      	b.n	800a1a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b03      	cmp	r3, #3
 800a182:	d00f      	beq.n	800a1a4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 f9ea 	bl	800b560 <USBD_CtlError>
            ret = USBD_FAIL;
 800a18c:	2303      	movs	r3, #3
 800a18e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a190:	e008      	b.n	800a1a4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f9e3 	bl	800b560 <USBD_CtlError>
          ret = USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	75fb      	strb	r3, [r7, #23]
          break;
 800a19e:	e002      	b.n	800a1a6 <USBD_CDC_Setup+0x176>
          break;
 800a1a0:	bf00      	nop
 800a1a2:	e008      	b.n	800a1b6 <USBD_CDC_Setup+0x186>
          break;
 800a1a4:	bf00      	nop
      }
      break;
 800a1a6:	e006      	b.n	800a1b6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f001 f9d8 	bl	800b560 <USBD_CtlError>
      ret = USBD_FAIL;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e04f      	b.n	800a282 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a1ea:	78fa      	ldrb	r2, [r7, #3]
 800a1ec:	6879      	ldr	r1, [r7, #4]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	440b      	add	r3, r1
 800a1f8:	3318      	adds	r3, #24
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d029      	beq.n	800a254 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a200:	78fa      	ldrb	r2, [r7, #3]
 800a202:	6879      	ldr	r1, [r7, #4]
 800a204:	4613      	mov	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	440b      	add	r3, r1
 800a20e:	3318      	adds	r3, #24
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	78f9      	ldrb	r1, [r7, #3]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	460b      	mov	r3, r1
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	4403      	add	r3, r0
 800a220:	3320      	adds	r3, #32
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	fbb2 f1f3 	udiv	r1, r2, r3
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d110      	bne.n	800a254 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	440b      	add	r3, r1
 800a240:	3318      	adds	r3, #24
 800a242:	2200      	movs	r2, #0
 800a244:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a246:	78f9      	ldrb	r1, [r7, #3]
 800a248:	2300      	movs	r3, #0
 800a24a:	2200      	movs	r2, #0
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f001 fec0 	bl	800bfd2 <USBD_LL_Transmit>
 800a252:	e015      	b.n	800a280 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a29c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e015      	b.n	800a2d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2ac:	78fb      	ldrb	r3, [r7, #3]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fed0 	bl	800c056 <USBD_LL_GetRxDataSize>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e01a      	b.n	800a330 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d014      	beq.n	800a32e <USBD_CDC_EP0_RxReady+0x4e>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a30a:	2bff      	cmp	r3, #255	@ 0xff
 800a30c:	d00f      	beq.n	800a32e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a31c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a324:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	22ff      	movs	r2, #255	@ 0xff
 800a32a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2243      	movs	r2, #67	@ 0x43
 800a344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a346:	4b03      	ldr	r3, [pc, #12]	@ (800a354 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	200000a0 	.word	0x200000a0

0800a358 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2243      	movs	r2, #67	@ 0x43
 800a364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a366:	4b03      	ldr	r3, [pc, #12]	@ (800a374 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a368:	4618      	mov	r0, r3
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	2000005c 	.word	0x2000005c

0800a378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2243      	movs	r2, #67	@ 0x43
 800a384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a386:	4b03      	ldr	r3, [pc, #12]	@ (800a394 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	200000e4 	.word	0x200000e4

0800a398 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	220a      	movs	r2, #10
 800a3a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3a6:	4b03      	ldr	r3, [pc, #12]	@ (800a3b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	20000018 	.word	0x20000018

0800a3b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e004      	b.n	800a3d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b087      	sub	sp, #28
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3f4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e008      	b.n	800a412 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a42e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a436:	2303      	movs	r3, #3
 800a438:	e004      	b.n	800a444 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a45e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a460:	2301      	movs	r3, #1
 800a462:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a46e:	2303      	movs	r3, #3
 800a470:	e01a      	b.n	800a4a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d114      	bne.n	800a4a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2201      	movs	r2, #1
 800a480:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a49a:	2181      	movs	r1, #129	@ 0x81
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 fd98 	bl	800bfd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e016      	b.n	800a4fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7c1b      	ldrb	r3, [r3, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d109      	bne.n	800a4ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f001 fd96 	bl	800c014 <USBD_LL_PrepareReceive>
 800a4e8:	e007      	b.n	800a4fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4f0:	2340      	movs	r3, #64	@ 0x40
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 fd8d 	bl	800c014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4613      	mov	r3, r2
 800a510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	e01f      	b.n	800a55c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	79fa      	ldrb	r2, [r7, #7]
 800a54e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f001 fbf5 	bl	800bd40 <USBD_LL_Init>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e016      	b.n	800a5aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a598:	f107 020e 	add.w	r2, r7, #14
 800a59c:	4610      	mov	r0, r2
 800a59e:	4798      	blx	r3
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f001 fc20 	bl	800be00 <USBD_LL_Start>
 800a5c0:	4603      	mov	r3, r0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	4611      	mov	r1, r2
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4798      	blx	r3
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d007      	beq.n	800a63e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	4611      	mov	r1, r2
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
  }

  return USBD_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 ff46 	bl	800b4ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a66e:	461a      	mov	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a67c:	f003 031f 	and.w	r3, r3, #31
 800a680:	2b02      	cmp	r3, #2
 800a682:	d01a      	beq.n	800a6ba <USBD_LL_SetupStage+0x72>
 800a684:	2b02      	cmp	r3, #2
 800a686:	d822      	bhi.n	800a6ce <USBD_LL_SetupStage+0x86>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <USBD_LL_SetupStage+0x4a>
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d00a      	beq.n	800a6a6 <USBD_LL_SetupStage+0x5e>
 800a690:	e01d      	b.n	800a6ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f9ee 	bl	800aa7c <USBD_StdDevReq>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a4:	e020      	b.n	800a6e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa52 	bl	800ab58 <USBD_StdItfReq>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b8:	e016      	b.n	800a6e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa91 	bl	800abea <USBD_StdEPReq>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a6cc:	e00c      	b.n	800a6e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 fbef 	bl	800bec0 <USBD_LL_StallEP>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e6:	bf00      	nop
  }

  return ret;
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b086      	sub	sp, #24
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	607a      	str	r2, [r7, #4]
 800a6fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d138      	bne.n	800a778 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a70c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a714:	2b03      	cmp	r3, #3
 800a716:	d14a      	bne.n	800a7ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	429a      	cmp	r2, r3
 800a722:	d913      	bls.n	800a74c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	1ad2      	subs	r2, r2, r3
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	4293      	cmp	r3, r2
 800a73c:	bf28      	it	cs
 800a73e:	4613      	movcs	r3, r2
 800a740:	461a      	mov	r2, r3
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 ffc5 	bl	800b6d4 <USBD_CtlContinueRx>
 800a74a:	e030      	b.n	800a7ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b03      	cmp	r3, #3
 800a756:	d10b      	bne.n	800a770 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 ffc0 	bl	800b6f6 <USBD_CtlSendStatus>
 800a776:	e01a      	b.n	800a7ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b03      	cmp	r3, #3
 800a782:	d114      	bne.n	800a7ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00e      	beq.n	800a7ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	7afa      	ldrb	r2, [r7, #11]
 800a79a:	4611      	mov	r1, r2
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	4798      	blx	r3
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	e000      	b.n	800a7b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a7c6:	7afb      	ldrb	r3, [r7, #11]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d16b      	bne.n	800a8a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3314      	adds	r3, #20
 800a7d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d156      	bne.n	800a88a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d914      	bls.n	800a812 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	689a      	ldr	r2, [r3, #8]
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	1ad2      	subs	r2, r2, r3
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 ff3a 	bl	800b678 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a804:	2300      	movs	r3, #0
 800a806:	2200      	movs	r2, #0
 800a808:	2100      	movs	r1, #0
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f001 fc02 	bl	800c014 <USBD_LL_PrepareReceive>
 800a810:	e03b      	b.n	800a88a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d11c      	bne.n	800a858 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a826:	429a      	cmp	r2, r3
 800a828:	d316      	bcc.n	800a858 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a834:	429a      	cmp	r2, r3
 800a836:	d20f      	bcs.n	800a858 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a838:	2200      	movs	r2, #0
 800a83a:	2100      	movs	r1, #0
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 ff1b 	bl	800b678 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a84a:	2300      	movs	r3, #0
 800a84c:	2200      	movs	r2, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f001 fbdf 	bl	800c014 <USBD_LL_PrepareReceive>
 800a856:	e018      	b.n	800a88a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b03      	cmp	r3, #3
 800a862:	d10b      	bne.n	800a87c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d005      	beq.n	800a87c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a87c:	2180      	movs	r1, #128	@ 0x80
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f001 fb1e 	bl	800bec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 ff49 	bl	800b71c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a890:	2b01      	cmp	r3, #1
 800a892:	d122      	bne.n	800a8da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fe98 	bl	800a5ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8a2:	e01a      	b.n	800a8da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d114      	bne.n	800a8da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00e      	beq.n	800a8da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	7afa      	ldrb	r2, [r7, #11]
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	4798      	blx	r3
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	e000      	b.n	800a8dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a914:	2303      	movs	r3, #3
 800a916:	e02f      	b.n	800a978 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00f      	beq.n	800a942 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d009      	beq.n	800a942 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	6852      	ldr	r2, [r2, #4]
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	4611      	mov	r1, r2
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a942:	2340      	movs	r3, #64	@ 0x40
 800a944:	2200      	movs	r2, #0
 800a946:	2100      	movs	r1, #0
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 fa74 	bl	800be36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2240      	movs	r2, #64	@ 0x40
 800a95a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a95e:	2340      	movs	r3, #64	@ 0x40
 800a960:	2200      	movs	r2, #0
 800a962:	2180      	movs	r1, #128	@ 0x80
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 fa66 	bl	800be36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2240      	movs	r2, #64	@ 0x40
 800a974:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	78fa      	ldrb	r2, [r7, #3]
 800a990:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2204      	movs	r2, #4
 800a9ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d106      	bne.n	800a9ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e012      	b.n	800aa38 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d10b      	bne.n	800aa36 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d005      	beq.n	800aa36 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	3301      	adds	r3, #1
 800aa56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa5e:	8a3b      	ldrh	r3, [r7, #16]
 800aa60:	021b      	lsls	r3, r3, #8
 800aa62:	b21a      	sxth	r2, r3
 800aa64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	b21b      	sxth	r3, r3
 800aa6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa6e:	89fb      	ldrh	r3, [r7, #14]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	371c      	adds	r7, #28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa92:	2b40      	cmp	r3, #64	@ 0x40
 800aa94:	d005      	beq.n	800aaa2 <USBD_StdDevReq+0x26>
 800aa96:	2b40      	cmp	r3, #64	@ 0x40
 800aa98:	d853      	bhi.n	800ab42 <USBD_StdDevReq+0xc6>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00b      	beq.n	800aab6 <USBD_StdDevReq+0x3a>
 800aa9e:	2b20      	cmp	r3, #32
 800aaa0:	d14f      	bne.n	800ab42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	4798      	blx	r3
 800aab0:	4603      	mov	r3, r0
 800aab2:	73fb      	strb	r3, [r7, #15]
      break;
 800aab4:	e04a      	b.n	800ab4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	2b09      	cmp	r3, #9
 800aabc:	d83b      	bhi.n	800ab36 <USBD_StdDevReq+0xba>
 800aabe:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <USBD_StdDevReq+0x48>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800ab19 	.word	0x0800ab19
 800aac8:	0800ab2d 	.word	0x0800ab2d
 800aacc:	0800ab37 	.word	0x0800ab37
 800aad0:	0800ab23 	.word	0x0800ab23
 800aad4:	0800ab37 	.word	0x0800ab37
 800aad8:	0800aaf7 	.word	0x0800aaf7
 800aadc:	0800aaed 	.word	0x0800aaed
 800aae0:	0800ab37 	.word	0x0800ab37
 800aae4:	0800ab0f 	.word	0x0800ab0f
 800aae8:	0800ab01 	.word	0x0800ab01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f9de 	bl	800aeb0 <USBD_GetDescriptor>
          break;
 800aaf4:	e024      	b.n	800ab40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fb6d 	bl	800b1d8 <USBD_SetAddress>
          break;
 800aafe:	e01f      	b.n	800ab40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fbac 	bl	800b260 <USBD_SetConfig>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]
          break;
 800ab0c:	e018      	b.n	800ab40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fc4b 	bl	800b3ac <USBD_GetConfig>
          break;
 800ab16:	e013      	b.n	800ab40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fc7c 	bl	800b418 <USBD_GetStatus>
          break;
 800ab20:	e00e      	b.n	800ab40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fcab 	bl	800b480 <USBD_SetFeature>
          break;
 800ab2a:	e009      	b.n	800ab40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fcba 	bl	800b4a8 <USBD_ClrFeature>
          break;
 800ab34:	e004      	b.n	800ab40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fd11 	bl	800b560 <USBD_CtlError>
          break;
 800ab3e:	bf00      	nop
      }
      break;
 800ab40:	e004      	b.n	800ab4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fd0b 	bl	800b560 <USBD_CtlError>
      break;
 800ab4a:	bf00      	nop
  }

  return ret;
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop

0800ab58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab6e:	2b40      	cmp	r3, #64	@ 0x40
 800ab70:	d005      	beq.n	800ab7e <USBD_StdItfReq+0x26>
 800ab72:	2b40      	cmp	r3, #64	@ 0x40
 800ab74:	d82f      	bhi.n	800abd6 <USBD_StdItfReq+0x7e>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <USBD_StdItfReq+0x26>
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	d12b      	bne.n	800abd6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d81d      	bhi.n	800abc8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	889b      	ldrh	r3, [r3, #4]
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d813      	bhi.n	800abbe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	88db      	ldrh	r3, [r3, #6]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d110      	bne.n	800abd2 <USBD_StdItfReq+0x7a>
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10d      	bne.n	800abd2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fd9d 	bl	800b6f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abbc:	e009      	b.n	800abd2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fccd 	bl	800b560 <USBD_CtlError>
          break;
 800abc6:	e004      	b.n	800abd2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fcc8 	bl	800b560 <USBD_CtlError>
          break;
 800abd0:	e000      	b.n	800abd4 <USBD_StdItfReq+0x7c>
          break;
 800abd2:	bf00      	nop
      }
      break;
 800abd4:	e004      	b.n	800abe0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fcc1 	bl	800b560 <USBD_CtlError>
      break;
 800abde:	bf00      	nop
  }

  return ret;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	889b      	ldrh	r3, [r3, #4]
 800abfc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac06:	2b40      	cmp	r3, #64	@ 0x40
 800ac08:	d007      	beq.n	800ac1a <USBD_StdEPReq+0x30>
 800ac0a:	2b40      	cmp	r3, #64	@ 0x40
 800ac0c:	f200 8145 	bhi.w	800ae9a <USBD_StdEPReq+0x2b0>
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00c      	beq.n	800ac2e <USBD_StdEPReq+0x44>
 800ac14:	2b20      	cmp	r3, #32
 800ac16:	f040 8140 	bne.w	800ae9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	4798      	blx	r3
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac2c:	e13a      	b.n	800aea4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	d007      	beq.n	800ac46 <USBD_StdEPReq+0x5c>
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	f300 8129 	bgt.w	800ae8e <USBD_StdEPReq+0x2a4>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d07f      	beq.n	800ad40 <USBD_StdEPReq+0x156>
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d03c      	beq.n	800acbe <USBD_StdEPReq+0xd4>
 800ac44:	e123      	b.n	800ae8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d002      	beq.n	800ac58 <USBD_StdEPReq+0x6e>
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d016      	beq.n	800ac84 <USBD_StdEPReq+0x9a>
 800ac56:	e02c      	b.n	800acb2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00d      	beq.n	800ac7a <USBD_StdEPReq+0x90>
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	2b80      	cmp	r3, #128	@ 0x80
 800ac62:	d00a      	beq.n	800ac7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f001 f929 	bl	800bec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac6e:	2180      	movs	r1, #128	@ 0x80
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 f925 	bl	800bec0 <USBD_LL_StallEP>
 800ac76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac78:	e020      	b.n	800acbc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fc6f 	bl	800b560 <USBD_CtlError>
              break;
 800ac82:	e01b      	b.n	800acbc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	885b      	ldrh	r3, [r3, #2]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10e      	bne.n	800acaa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00b      	beq.n	800acaa <USBD_StdEPReq+0xc0>
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	2b80      	cmp	r3, #128	@ 0x80
 800ac96:	d008      	beq.n	800acaa <USBD_StdEPReq+0xc0>
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	88db      	ldrh	r3, [r3, #6]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d104      	bne.n	800acaa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f001 f90b 	bl	800bec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fd23 	bl	800b6f6 <USBD_CtlSendStatus>

              break;
 800acb0:	e004      	b.n	800acbc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fc53 	bl	800b560 <USBD_CtlError>
              break;
 800acba:	bf00      	nop
          }
          break;
 800acbc:	e0ec      	b.n	800ae98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d002      	beq.n	800acd0 <USBD_StdEPReq+0xe6>
 800acca:	2b03      	cmp	r3, #3
 800accc:	d016      	beq.n	800acfc <USBD_StdEPReq+0x112>
 800acce:	e030      	b.n	800ad32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00d      	beq.n	800acf2 <USBD_StdEPReq+0x108>
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	2b80      	cmp	r3, #128	@ 0x80
 800acda:	d00a      	beq.n	800acf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 f8ed 	bl	800bec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ace6:	2180      	movs	r1, #128	@ 0x80
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 f8e9 	bl	800bec0 <USBD_LL_StallEP>
 800acee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acf0:	e025      	b.n	800ad3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fc33 	bl	800b560 <USBD_CtlError>
              break;
 800acfa:	e020      	b.n	800ad3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	885b      	ldrh	r3, [r3, #2]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d11b      	bne.n	800ad3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 f8f3 	bl	800befe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fcec 	bl	800b6f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	4798      	blx	r3
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ad30:	e004      	b.n	800ad3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fc13 	bl	800b560 <USBD_CtlError>
              break;
 800ad3a:	e000      	b.n	800ad3e <USBD_StdEPReq+0x154>
              break;
 800ad3c:	bf00      	nop
          }
          break;
 800ad3e:	e0ab      	b.n	800ae98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d002      	beq.n	800ad52 <USBD_StdEPReq+0x168>
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d032      	beq.n	800adb6 <USBD_StdEPReq+0x1cc>
 800ad50:	e097      	b.n	800ae82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d007      	beq.n	800ad68 <USBD_StdEPReq+0x17e>
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b80      	cmp	r3, #128	@ 0x80
 800ad5c:	d004      	beq.n	800ad68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fbfd 	bl	800b560 <USBD_CtlError>
                break;
 800ad66:	e091      	b.n	800ae8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da0b      	bge.n	800ad88 <USBD_StdEPReq+0x19e>
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	3310      	adds	r3, #16
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	4413      	add	r3, r2
 800ad84:	3304      	adds	r3, #4
 800ad86:	e00b      	b.n	800ada0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	3304      	adds	r3, #4
 800ada0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2202      	movs	r2, #2
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fc47 	bl	800b642 <USBD_CtlSendData>
              break;
 800adb4:	e06a      	b.n	800ae8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	da11      	bge.n	800ade2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	f003 020f 	and.w	r2, r3, #15
 800adc4:	6879      	ldr	r1, [r7, #4]
 800adc6:	4613      	mov	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	440b      	add	r3, r1
 800add0:	3324      	adds	r3, #36	@ 0x24
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d117      	bne.n	800ae08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fbc0 	bl	800b560 <USBD_CtlError>
                  break;
 800ade0:	e054      	b.n	800ae8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	f003 020f 	and.w	r2, r3, #15
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	440b      	add	r3, r1
 800adf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d104      	bne.n	800ae08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fbad 	bl	800b560 <USBD_CtlError>
                  break;
 800ae06:	e041      	b.n	800ae8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	da0b      	bge.n	800ae28 <USBD_StdEPReq+0x23e>
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
 800ae12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	3310      	adds	r3, #16
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	4413      	add	r3, r2
 800ae24:	3304      	adds	r3, #4
 800ae26:	e00b      	b.n	800ae40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae2e:	4613      	mov	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4413      	add	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	3304      	adds	r3, #4
 800ae40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <USBD_StdEPReq+0x264>
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	2b80      	cmp	r3, #128	@ 0x80
 800ae4c:	d103      	bne.n	800ae56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e00e      	b.n	800ae74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f001 f86e 	bl	800bf3c <USBD_LL_IsStallEP>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	e002      	b.n	800ae74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2202      	movs	r2, #2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fbe1 	bl	800b642 <USBD_CtlSendData>
              break;
 800ae80:	e004      	b.n	800ae8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fb6b 	bl	800b560 <USBD_CtlError>
              break;
 800ae8a:	bf00      	nop
          }
          break;
 800ae8c:	e004      	b.n	800ae98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fb65 	bl	800b560 <USBD_CtlError>
          break;
 800ae96:	bf00      	nop
      }
      break;
 800ae98:	e004      	b.n	800aea4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fb5f 	bl	800b560 <USBD_CtlError>
      break;
 800aea2:	bf00      	nop
  }

  return ret;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	0a1b      	lsrs	r3, r3, #8
 800aecc:	b29b      	uxth	r3, r3
 800aece:	3b01      	subs	r3, #1
 800aed0:	2b0e      	cmp	r3, #14
 800aed2:	f200 8152 	bhi.w	800b17a <USBD_GetDescriptor+0x2ca>
 800aed6:	a201      	add	r2, pc, #4	@ (adr r2, 800aedc <USBD_GetDescriptor+0x2c>)
 800aed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aedc:	0800af4d 	.word	0x0800af4d
 800aee0:	0800af65 	.word	0x0800af65
 800aee4:	0800afa5 	.word	0x0800afa5
 800aee8:	0800b17b 	.word	0x0800b17b
 800aeec:	0800b17b 	.word	0x0800b17b
 800aef0:	0800b11b 	.word	0x0800b11b
 800aef4:	0800b147 	.word	0x0800b147
 800aef8:	0800b17b 	.word	0x0800b17b
 800aefc:	0800b17b 	.word	0x0800b17b
 800af00:	0800b17b 	.word	0x0800b17b
 800af04:	0800b17b 	.word	0x0800b17b
 800af08:	0800b17b 	.word	0x0800b17b
 800af0c:	0800b17b 	.word	0x0800b17b
 800af10:	0800b17b 	.word	0x0800b17b
 800af14:	0800af19 	.word	0x0800af19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af1e:	69db      	ldr	r3, [r3, #28]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	7c12      	ldrb	r2, [r2, #16]
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af3a:	e126      	b.n	800b18a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fb0e 	bl	800b560 <USBD_CtlError>
        err++;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	3301      	adds	r3, #1
 800af48:	72fb      	strb	r3, [r7, #11]
      break;
 800af4a:	e11e      	b.n	800b18a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	7c12      	ldrb	r2, [r2, #16]
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	60f8      	str	r0, [r7, #12]
      break;
 800af62:	e112      	b.n	800b18a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	7c1b      	ldrb	r3, [r3, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10d      	bne.n	800af88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af74:	f107 0208 	add.w	r2, r7, #8
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
 800af7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
 800af82:	2202      	movs	r2, #2
 800af84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af86:	e100      	b.n	800b18a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af90:	f107 0208 	add.w	r2, r7, #8
 800af94:	4610      	mov	r0, r2
 800af96:	4798      	blx	r3
 800af98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3301      	adds	r3, #1
 800af9e:	2202      	movs	r2, #2
 800afa0:	701a      	strb	r2, [r3, #0]
      break;
 800afa2:	e0f2      	b.n	800b18a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	885b      	ldrh	r3, [r3, #2]
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b05      	cmp	r3, #5
 800afac:	f200 80ac 	bhi.w	800b108 <USBD_GetDescriptor+0x258>
 800afb0:	a201      	add	r2, pc, #4	@ (adr r2, 800afb8 <USBD_GetDescriptor+0x108>)
 800afb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb6:	bf00      	nop
 800afb8:	0800afd1 	.word	0x0800afd1
 800afbc:	0800b005 	.word	0x0800b005
 800afc0:	0800b039 	.word	0x0800b039
 800afc4:	0800b06d 	.word	0x0800b06d
 800afc8:	0800b0a1 	.word	0x0800b0a1
 800afcc:	0800b0d5 	.word	0x0800b0d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00b      	beq.n	800aff4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	7c12      	ldrb	r2, [r2, #16]
 800afe8:	f107 0108 	add.w	r1, r7, #8
 800afec:	4610      	mov	r0, r2
 800afee:	4798      	blx	r3
 800aff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aff2:	e091      	b.n	800b118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fab2 	bl	800b560 <USBD_CtlError>
            err++;
 800affc:	7afb      	ldrb	r3, [r7, #11]
 800affe:	3301      	adds	r3, #1
 800b000:	72fb      	strb	r3, [r7, #11]
          break;
 800b002:	e089      	b.n	800b118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00b      	beq.n	800b028 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	7c12      	ldrb	r2, [r2, #16]
 800b01c:	f107 0108 	add.w	r1, r7, #8
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
 800b024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b026:	e077      	b.n	800b118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fa98 	bl	800b560 <USBD_CtlError>
            err++;
 800b030:	7afb      	ldrb	r3, [r7, #11]
 800b032:	3301      	adds	r3, #1
 800b034:	72fb      	strb	r3, [r7, #11]
          break;
 800b036:	e06f      	b.n	800b118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00b      	beq.n	800b05c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	7c12      	ldrb	r2, [r2, #16]
 800b050:	f107 0108 	add.w	r1, r7, #8
 800b054:	4610      	mov	r0, r2
 800b056:	4798      	blx	r3
 800b058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b05a:	e05d      	b.n	800b118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fa7e 	bl	800b560 <USBD_CtlError>
            err++;
 800b064:	7afb      	ldrb	r3, [r7, #11]
 800b066:	3301      	adds	r3, #1
 800b068:	72fb      	strb	r3, [r7, #11]
          break;
 800b06a:	e055      	b.n	800b118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00b      	beq.n	800b090 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	7c12      	ldrb	r2, [r2, #16]
 800b084:	f107 0108 	add.w	r1, r7, #8
 800b088:	4610      	mov	r0, r2
 800b08a:	4798      	blx	r3
 800b08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b08e:	e043      	b.n	800b118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fa64 	bl	800b560 <USBD_CtlError>
            err++;
 800b098:	7afb      	ldrb	r3, [r7, #11]
 800b09a:	3301      	adds	r3, #1
 800b09c:	72fb      	strb	r3, [r7, #11]
          break;
 800b09e:	e03b      	b.n	800b118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	7c12      	ldrb	r2, [r2, #16]
 800b0b8:	f107 0108 	add.w	r1, r7, #8
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4798      	blx	r3
 800b0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0c2:	e029      	b.n	800b118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa4a 	bl	800b560 <USBD_CtlError>
            err++;
 800b0cc:	7afb      	ldrb	r3, [r7, #11]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0d2:	e021      	b.n	800b118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	7c12      	ldrb	r2, [r2, #16]
 800b0ec:	f107 0108 	add.w	r1, r7, #8
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	4798      	blx	r3
 800b0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0f6:	e00f      	b.n	800b118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fa30 	bl	800b560 <USBD_CtlError>
            err++;
 800b100:	7afb      	ldrb	r3, [r7, #11]
 800b102:	3301      	adds	r3, #1
 800b104:	72fb      	strb	r3, [r7, #11]
          break;
 800b106:	e007      	b.n	800b118 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fa28 	bl	800b560 <USBD_CtlError>
          err++;
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	3301      	adds	r3, #1
 800b114:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b116:	bf00      	nop
      }
      break;
 800b118:	e037      	b.n	800b18a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	7c1b      	ldrb	r3, [r3, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d109      	bne.n	800b136 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b12a:	f107 0208 	add.w	r2, r7, #8
 800b12e:	4610      	mov	r0, r2
 800b130:	4798      	blx	r3
 800b132:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b134:	e029      	b.n	800b18a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fa11 	bl	800b560 <USBD_CtlError>
        err++;
 800b13e:	7afb      	ldrb	r3, [r7, #11]
 800b140:	3301      	adds	r3, #1
 800b142:	72fb      	strb	r3, [r7, #11]
      break;
 800b144:	e021      	b.n	800b18a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	7c1b      	ldrb	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10d      	bne.n	800b16a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b156:	f107 0208 	add.w	r2, r7, #8
 800b15a:	4610      	mov	r0, r2
 800b15c:	4798      	blx	r3
 800b15e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3301      	adds	r3, #1
 800b164:	2207      	movs	r2, #7
 800b166:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b168:	e00f      	b.n	800b18a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f9f7 	bl	800b560 <USBD_CtlError>
        err++;
 800b172:	7afb      	ldrb	r3, [r7, #11]
 800b174:	3301      	adds	r3, #1
 800b176:	72fb      	strb	r3, [r7, #11]
      break;
 800b178:	e007      	b.n	800b18a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f9ef 	bl	800b560 <USBD_CtlError>
      err++;
 800b182:	7afb      	ldrb	r3, [r7, #11]
 800b184:	3301      	adds	r3, #1
 800b186:	72fb      	strb	r3, [r7, #11]
      break;
 800b188:	bf00      	nop
  }

  if (err != 0U)
 800b18a:	7afb      	ldrb	r3, [r7, #11]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d11e      	bne.n	800b1ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	88db      	ldrh	r3, [r3, #6]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d016      	beq.n	800b1c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b198:	893b      	ldrh	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00e      	beq.n	800b1bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	88da      	ldrh	r2, [r3, #6]
 800b1a2:	893b      	ldrh	r3, [r7, #8]
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	bf28      	it	cs
 800b1a8:	4613      	movcs	r3, r2
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1ae:	893b      	ldrh	r3, [r7, #8]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	68f9      	ldr	r1, [r7, #12]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fa44 	bl	800b642 <USBD_CtlSendData>
 800b1ba:	e009      	b.n	800b1d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9ce 	bl	800b560 <USBD_CtlError>
 800b1c4:	e004      	b.n	800b1d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa95 	bl	800b6f6 <USBD_CtlSendStatus>
 800b1cc:	e000      	b.n	800b1d0 <USBD_GetDescriptor+0x320>
    return;
 800b1ce:	bf00      	nop
  }
}
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop

0800b1d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	889b      	ldrh	r3, [r3, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d131      	bne.n	800b24e <USBD_SetAddress+0x76>
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	88db      	ldrh	r3, [r3, #6]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d12d      	bne.n	800b24e <USBD_SetAddress+0x76>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	885b      	ldrh	r3, [r3, #2]
 800b1f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b1f8:	d829      	bhi.n	800b24e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	885b      	ldrh	r3, [r3, #2]
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b204:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d104      	bne.n	800b21c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f9a3 	bl	800b560 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21a:	e01d      	b.n	800b258 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	7bfa      	ldrb	r2, [r7, #15]
 800b220:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 feb3 	bl	800bf94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fa61 	bl	800b6f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d004      	beq.n	800b244 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2202      	movs	r2, #2
 800b23e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b242:	e009      	b.n	800b258 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24c:	e004      	b.n	800b258 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f985 	bl	800b560 <USBD_CtlError>
  }
}
 800b256:	bf00      	nop
 800b258:	bf00      	nop
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	885b      	ldrh	r3, [r3, #2]
 800b272:	b2da      	uxtb	r2, r3
 800b274:	4b4c      	ldr	r3, [pc, #304]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b276:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b278:	4b4b      	ldr	r3, [pc, #300]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d905      	bls.n	800b28c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f96c 	bl	800b560 <USBD_CtlError>
    return USBD_FAIL;
 800b288:	2303      	movs	r3, #3
 800b28a:	e088      	b.n	800b39e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b02      	cmp	r3, #2
 800b296:	d002      	beq.n	800b29e <USBD_SetConfig+0x3e>
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d025      	beq.n	800b2e8 <USBD_SetConfig+0x88>
 800b29c:	e071      	b.n	800b382 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b29e:	4b42      	ldr	r3, [pc, #264]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d01c      	beq.n	800b2e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b2a6:	4b40      	ldr	r3, [pc, #256]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2b0:	4b3d      	ldr	r3, [pc, #244]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7ff f992 	bl	800a5e0 <USBD_SetClassConfig>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d004      	beq.n	800b2d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f949 	bl	800b560 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2ce:	e065      	b.n	800b39c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fa10 	bl	800b6f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2203      	movs	r2, #3
 800b2da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b2de:	e05d      	b.n	800b39c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fa08 	bl	800b6f6 <USBD_CtlSendStatus>
      break;
 800b2e6:	e059      	b.n	800b39c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b2e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d112      	bne.n	800b316 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b2f8:	4b2b      	ldr	r3, [pc, #172]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b302:	4b29      	ldr	r3, [pc, #164]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7ff f985 	bl	800a618 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f9f1 	bl	800b6f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b314:	e042      	b.n	800b39c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b316:	4b24      	ldr	r3, [pc, #144]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	429a      	cmp	r2, r3
 800b322:	d02a      	beq.n	800b37a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7ff f973 	bl	800a618 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b332:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b33c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff f94c 	bl	800a5e0 <USBD_SetClassConfig>
 800b348:	4603      	mov	r3, r0
 800b34a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00f      	beq.n	800b372 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f903 	bl	800b560 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff f958 	bl	800a618 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2202      	movs	r2, #2
 800b36c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b370:	e014      	b.n	800b39c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f9bf 	bl	800b6f6 <USBD_CtlSendStatus>
      break;
 800b378:	e010      	b.n	800b39c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f9bb 	bl	800b6f6 <USBD_CtlSendStatus>
      break;
 800b380:	e00c      	b.n	800b39c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f8eb 	bl	800b560 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b38a:	4b07      	ldr	r3, [pc, #28]	@ (800b3a8 <USBD_SetConfig+0x148>)
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff f941 	bl	800a618 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b396:	2303      	movs	r3, #3
 800b398:	73fb      	strb	r3, [r7, #15]
      break;
 800b39a:	bf00      	nop
  }

  return ret;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	200005bc 	.word	0x200005bc

0800b3ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	88db      	ldrh	r3, [r3, #6]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d004      	beq.n	800b3c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f8cd 	bl	800b560 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3c6:	e023      	b.n	800b410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	dc02      	bgt.n	800b3da <USBD_GetConfig+0x2e>
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dc03      	bgt.n	800b3e0 <USBD_GetConfig+0x34>
 800b3d8:	e015      	b.n	800b406 <USBD_GetConfig+0x5a>
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d00b      	beq.n	800b3f6 <USBD_GetConfig+0x4a>
 800b3de:	e012      	b.n	800b406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f927 	bl	800b642 <USBD_CtlSendData>
        break;
 800b3f4:	e00c      	b.n	800b410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f91f 	bl	800b642 <USBD_CtlSendData>
        break;
 800b404:	e004      	b.n	800b410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f8a9 	bl	800b560 <USBD_CtlError>
        break;
 800b40e:	bf00      	nop
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	3b01      	subs	r3, #1
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d81e      	bhi.n	800b46e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	88db      	ldrh	r3, [r3, #6]
 800b434:	2b02      	cmp	r3, #2
 800b436:	d004      	beq.n	800b442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f890 	bl	800b560 <USBD_CtlError>
        break;
 800b440:	e01a      	b.n	800b478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d005      	beq.n	800b45e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	f043 0202 	orr.w	r2, r3, #2
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	330c      	adds	r3, #12
 800b462:	2202      	movs	r2, #2
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f8eb 	bl	800b642 <USBD_CtlSendData>
      break;
 800b46c:	e004      	b.n	800b478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f875 	bl	800b560 <USBD_CtlError>
      break;
 800b476:	bf00      	nop
  }
}
 800b478:	bf00      	nop
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	885b      	ldrh	r3, [r3, #2]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d106      	bne.n	800b4a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f92b 	bl	800b6f6 <USBD_CtlSendStatus>
  }
}
 800b4a0:	bf00      	nop
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d80b      	bhi.n	800b4d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	885b      	ldrh	r3, [r3, #2]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d10c      	bne.n	800b4e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f910 	bl	800b6f6 <USBD_CtlSendStatus>
      }
      break;
 800b4d6:	e004      	b.n	800b4e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f840 	bl	800b560 <USBD_CtlError>
      break;
 800b4e0:	e000      	b.n	800b4e4 <USBD_ClrFeature+0x3c>
      break;
 800b4e2:	bf00      	nop
  }
}
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	781a      	ldrb	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3301      	adds	r3, #1
 800b506:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	781a      	ldrb	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	3301      	adds	r3, #1
 800b514:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fa92 	bl	800aa40 <SWAPBYTE>
 800b51c:	4603      	mov	r3, r0
 800b51e:	461a      	mov	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3301      	adds	r3, #1
 800b52e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff fa85 	bl	800aa40 <SWAPBYTE>
 800b536:	4603      	mov	r3, r0
 800b538:	461a      	mov	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3301      	adds	r3, #1
 800b542:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	3301      	adds	r3, #1
 800b548:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff fa78 	bl	800aa40 <SWAPBYTE>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	80da      	strh	r2, [r3, #6]
}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b56a:	2180      	movs	r1, #128	@ 0x80
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fca7 	bl	800bec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b572:	2100      	movs	r1, #0
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fca3 	bl	800bec0 <USBD_LL_StallEP>
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b086      	sub	sp, #24
 800b586:	af00      	add	r7, sp, #0
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d036      	beq.n	800b606 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b59c:	6938      	ldr	r0, [r7, #16]
 800b59e:	f000 f836 	bl	800b60e <USBD_GetLen>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	7812      	ldrb	r2, [r2, #0]
 800b5ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	2203      	movs	r2, #3
 800b5ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b5d2:	e013      	b.n	800b5fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	4413      	add	r3, r2
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	7812      	ldrb	r2, [r2, #0]
 800b5de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	613b      	str	r3, [r7, #16]
    idx++;
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1e7      	bne.n	800b5d4 <USBD_GetString+0x52>
 800b604:	e000      	b.n	800b608 <USBD_GetString+0x86>
    return;
 800b606:	bf00      	nop
  }
}
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b60e:	b480      	push	{r7}
 800b610:	b085      	sub	sp, #20
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b61e:	e005      	b.n	800b62c <USBD_GetLen+0x1e>
  {
    len++;
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	3301      	adds	r3, #1
 800b624:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	3301      	adds	r3, #1
 800b62a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1f5      	bne.n	800b620 <USBD_GetLen+0x12>
  }

  return len;
 800b634:	7bfb      	ldrb	r3, [r7, #15]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2202      	movs	r2, #2
 800b652:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	2100      	movs	r1, #0
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 fcb2 	bl	800bfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	2100      	movs	r1, #0
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 fca1 	bl	800bfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b084      	sub	sp, #16
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2203      	movs	r2, #3
 800b6aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 fca5 	bl	800c014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 fc94 	bl	800c014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2204      	movs	r2, #4
 800b702:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b706:	2300      	movs	r3, #0
 800b708:	2200      	movs	r2, #0
 800b70a:	2100      	movs	r1, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fc60 	bl	800bfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2205      	movs	r2, #5
 800b728:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b72c:	2300      	movs	r3, #0
 800b72e:	2200      	movs	r2, #0
 800b730:	2100      	movs	r1, #0
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fc6e 	bl	800c014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b748:	2200      	movs	r2, #0
 800b74a:	4912      	ldr	r1, [pc, #72]	@ (800b794 <MX_USB_Device_Init+0x50>)
 800b74c:	4812      	ldr	r0, [pc, #72]	@ (800b798 <MX_USB_Device_Init+0x54>)
 800b74e:	f7fe fed9 	bl	800a504 <USBD_Init>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b758:	f7f5 ff5a 	bl	8001610 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b75c:	490f      	ldr	r1, [pc, #60]	@ (800b79c <MX_USB_Device_Init+0x58>)
 800b75e:	480e      	ldr	r0, [pc, #56]	@ (800b798 <MX_USB_Device_Init+0x54>)
 800b760:	f7fe ff00 	bl	800a564 <USBD_RegisterClass>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b76a:	f7f5 ff51 	bl	8001610 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b76e:	490c      	ldr	r1, [pc, #48]	@ (800b7a0 <MX_USB_Device_Init+0x5c>)
 800b770:	4809      	ldr	r0, [pc, #36]	@ (800b798 <MX_USB_Device_Init+0x54>)
 800b772:	f7fe fe21 	bl	800a3b8 <USBD_CDC_RegisterInterface>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b77c:	f7f5 ff48 	bl	8001610 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b780:	4805      	ldr	r0, [pc, #20]	@ (800b798 <MX_USB_Device_Init+0x54>)
 800b782:	f7fe ff16 	bl	800a5b2 <USBD_Start>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b78c:	f7f5 ff40 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b790:	bf00      	nop
 800b792:	bd80      	pop	{r7, pc}
 800b794:	2000013c 	.word	0x2000013c
 800b798:	200005c0 	.word	0x200005c0
 800b79c:	20000024 	.word	0x20000024
 800b7a0:	20000128 	.word	0x20000128

0800b7a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4905      	ldr	r1, [pc, #20]	@ (800b7c0 <CDC_Init_FS+0x1c>)
 800b7ac:	4805      	ldr	r0, [pc, #20]	@ (800b7c4 <CDC_Init_FS+0x20>)
 800b7ae:	f7fe fe18 	bl	800a3e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b7b2:	4905      	ldr	r1, [pc, #20]	@ (800b7c8 <CDC_Init_FS+0x24>)
 800b7b4:	4803      	ldr	r0, [pc, #12]	@ (800b7c4 <CDC_Init_FS+0x20>)
 800b7b6:	f7fe fe32 	bl	800a41e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b7ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000c90 	.word	0x20000c90
 800b7c4:	200005c0 	.word	0x200005c0
 800b7c8:	20000890 	.word	0x20000890

0800b7cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	6039      	str	r1, [r7, #0]
 800b7e6:	71fb      	strb	r3, [r7, #7]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	2b23      	cmp	r3, #35	@ 0x23
 800b7f0:	d84a      	bhi.n	800b888 <CDC_Control_FS+0xac>
 800b7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f8 <CDC_Control_FS+0x1c>)
 800b7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f8:	0800b889 	.word	0x0800b889
 800b7fc:	0800b889 	.word	0x0800b889
 800b800:	0800b889 	.word	0x0800b889
 800b804:	0800b889 	.word	0x0800b889
 800b808:	0800b889 	.word	0x0800b889
 800b80c:	0800b889 	.word	0x0800b889
 800b810:	0800b889 	.word	0x0800b889
 800b814:	0800b889 	.word	0x0800b889
 800b818:	0800b889 	.word	0x0800b889
 800b81c:	0800b889 	.word	0x0800b889
 800b820:	0800b889 	.word	0x0800b889
 800b824:	0800b889 	.word	0x0800b889
 800b828:	0800b889 	.word	0x0800b889
 800b82c:	0800b889 	.word	0x0800b889
 800b830:	0800b889 	.word	0x0800b889
 800b834:	0800b889 	.word	0x0800b889
 800b838:	0800b889 	.word	0x0800b889
 800b83c:	0800b889 	.word	0x0800b889
 800b840:	0800b889 	.word	0x0800b889
 800b844:	0800b889 	.word	0x0800b889
 800b848:	0800b889 	.word	0x0800b889
 800b84c:	0800b889 	.word	0x0800b889
 800b850:	0800b889 	.word	0x0800b889
 800b854:	0800b889 	.word	0x0800b889
 800b858:	0800b889 	.word	0x0800b889
 800b85c:	0800b889 	.word	0x0800b889
 800b860:	0800b889 	.word	0x0800b889
 800b864:	0800b889 	.word	0x0800b889
 800b868:	0800b889 	.word	0x0800b889
 800b86c:	0800b889 	.word	0x0800b889
 800b870:	0800b889 	.word	0x0800b889
 800b874:	0800b889 	.word	0x0800b889
 800b878:	0800b889 	.word	0x0800b889
 800b87c:	0800b889 	.word	0x0800b889
 800b880:	0800b889 	.word	0x0800b889
 800b884:	0800b889 	.word	0x0800b889
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b888:	bf00      	nop
  }

  return (USBD_OK);
 800b88a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  for (i =0; i != *Len; i++)
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	e009      	b.n	800b8bc <CDC_Receive_FS+0x24>
  {
	 slCanProccesInput(Buf[i]);
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7f5 f957 	bl	8000b64 <slCanProccesInput>
  for (i =0; i != *Len; i++)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d1f0      	bne.n	800b8a8 <CDC_Receive_FS+0x10>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	4805      	ldr	r0, [pc, #20]	@ (800b8e0 <CDC_Receive_FS+0x48>)
 800b8ca:	f7fe fda8 	bl	800a41e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b8ce:	4804      	ldr	r0, [pc, #16]	@ (800b8e0 <CDC_Receive_FS+0x48>)
 800b8d0:	f7fe fdee 	bl	800a4b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b8d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	200005c0 	.word	0x200005c0

0800b8e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b8f4:	4b0d      	ldr	r3, [pc, #52]	@ (800b92c <CDC_Transmit_FS+0x48>)
 800b8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b906:	2301      	movs	r3, #1
 800b908:	e00b      	b.n	800b922 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b90a:	887b      	ldrh	r3, [r7, #2]
 800b90c:	461a      	mov	r2, r3
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4806      	ldr	r0, [pc, #24]	@ (800b92c <CDC_Transmit_FS+0x48>)
 800b912:	f7fe fd66 	bl	800a3e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b916:	4805      	ldr	r0, [pc, #20]	@ (800b92c <CDC_Transmit_FS+0x48>)
 800b918:	f7fe fd9a 	bl	800a450 <USBD_CDC_TransmitPacket>
 800b91c:	4603      	mov	r3, r0
 800b91e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b920:	7bfb      	ldrb	r3, [r7, #15]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	200005c0 	.word	0x200005c0

0800b930 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b930:	b480      	push	{r7}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	4613      	mov	r3, r2
 800b93c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b946:	4618      	mov	r0, r3
 800b948:	371c      	adds	r7, #28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
	...

0800b954 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	6039      	str	r1, [r7, #0]
 800b95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	2212      	movs	r2, #18
 800b964:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b966:	4b03      	ldr	r3, [pc, #12]	@ (800b974 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	2000015c 	.word	0x2000015c

0800b978 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	4603      	mov	r3, r0
 800b980:	6039      	str	r1, [r7, #0]
 800b982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	2204      	movs	r2, #4
 800b988:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b98a:	4b03      	ldr	r3, [pc, #12]	@ (800b998 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	20000170 	.word	0x20000170

0800b99c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	6039      	str	r1, [r7, #0]
 800b9a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9a8:	79fb      	ldrb	r3, [r7, #7]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d105      	bne.n	800b9ba <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	4907      	ldr	r1, [pc, #28]	@ (800b9d0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b9b2:	4808      	ldr	r0, [pc, #32]	@ (800b9d4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b9b4:	f7ff fde5 	bl	800b582 <USBD_GetString>
 800b9b8:	e004      	b.n	800b9c4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	4904      	ldr	r1, [pc, #16]	@ (800b9d0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b9be:	4805      	ldr	r0, [pc, #20]	@ (800b9d4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b9c0:	f7ff fddf 	bl	800b582 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9c4:	4b02      	ldr	r3, [pc, #8]	@ (800b9d0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20001090 	.word	0x20001090
 800b9d4:	0800d46c 	.word	0x0800d46c

0800b9d8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	6039      	str	r1, [r7, #0]
 800b9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	4904      	ldr	r1, [pc, #16]	@ (800b9f8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b9e8:	4804      	ldr	r0, [pc, #16]	@ (800b9fc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b9ea:	f7ff fdca 	bl	800b582 <USBD_GetString>
  return USBD_StrDesc;
 800b9ee:	4b02      	ldr	r3, [pc, #8]	@ (800b9f8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	20001090 	.word	0x20001090
 800b9fc:	0800d484 	.word	0x0800d484

0800ba00 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	6039      	str	r1, [r7, #0]
 800ba0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	221a      	movs	r2, #26
 800ba10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba12:	f000 f843 	bl	800ba9c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ba16:	4b02      	ldr	r3, [pc, #8]	@ (800ba20 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	20000174 	.word	0x20000174

0800ba24 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	6039      	str	r1, [r7, #0]
 800ba2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d105      	bne.n	800ba42 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	4907      	ldr	r1, [pc, #28]	@ (800ba58 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ba3a:	4808      	ldr	r0, [pc, #32]	@ (800ba5c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ba3c:	f7ff fda1 	bl	800b582 <USBD_GetString>
 800ba40:	e004      	b.n	800ba4c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	4904      	ldr	r1, [pc, #16]	@ (800ba58 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ba46:	4805      	ldr	r0, [pc, #20]	@ (800ba5c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ba48:	f7ff fd9b 	bl	800b582 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba4c:	4b02      	ldr	r3, [pc, #8]	@ (800ba58 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20001090 	.word	0x20001090
 800ba5c:	0800d498 	.word	0x0800d498

0800ba60 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	6039      	str	r1, [r7, #0]
 800ba6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d105      	bne.n	800ba7e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	4907      	ldr	r1, [pc, #28]	@ (800ba94 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ba76:	4808      	ldr	r0, [pc, #32]	@ (800ba98 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ba78:	f7ff fd83 	bl	800b582 <USBD_GetString>
 800ba7c:	e004      	b.n	800ba88 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	4904      	ldr	r1, [pc, #16]	@ (800ba94 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ba82:	4805      	ldr	r0, [pc, #20]	@ (800ba98 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ba84:	f7ff fd7d 	bl	800b582 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba88:	4b02      	ldr	r3, [pc, #8]	@ (800ba94 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	20001090 	.word	0x20001090
 800ba98:	0800d4a4 	.word	0x0800d4a4

0800ba9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800baa2:	4b0f      	ldr	r3, [pc, #60]	@ (800bae0 <Get_SerialNum+0x44>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800baa8:	4b0e      	ldr	r3, [pc, #56]	@ (800bae4 <Get_SerialNum+0x48>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800baae:	4b0e      	ldr	r3, [pc, #56]	@ (800bae8 <Get_SerialNum+0x4c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4413      	add	r3, r2
 800baba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d009      	beq.n	800bad6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bac2:	2208      	movs	r2, #8
 800bac4:	4909      	ldr	r1, [pc, #36]	@ (800baec <Get_SerialNum+0x50>)
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 f814 	bl	800baf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bacc:	2204      	movs	r2, #4
 800bace:	4908      	ldr	r1, [pc, #32]	@ (800baf0 <Get_SerialNum+0x54>)
 800bad0:	68b8      	ldr	r0, [r7, #8]
 800bad2:	f000 f80f 	bl	800baf4 <IntToUnicode>
  }
}
 800bad6:	bf00      	nop
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	1fff7590 	.word	0x1fff7590
 800bae4:	1fff7594 	.word	0x1fff7594
 800bae8:	1fff7598 	.word	0x1fff7598
 800baec:	20000176 	.word	0x20000176
 800baf0:	20000186 	.word	0x20000186

0800baf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b087      	sub	sp, #28
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	4613      	mov	r3, r2
 800bb00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb06:	2300      	movs	r3, #0
 800bb08:	75fb      	strb	r3, [r7, #23]
 800bb0a:	e027      	b.n	800bb5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	0f1b      	lsrs	r3, r3, #28
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d80b      	bhi.n	800bb2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	0f1b      	lsrs	r3, r3, #28
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	4619      	mov	r1, r3
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	440b      	add	r3, r1
 800bb24:	3230      	adds	r2, #48	@ 0x30
 800bb26:	b2d2      	uxtb	r2, r2
 800bb28:	701a      	strb	r2, [r3, #0]
 800bb2a:	e00a      	b.n	800bb42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	0f1b      	lsrs	r3, r3, #28
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	4619      	mov	r1, r3
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	440b      	add	r3, r1
 800bb3c:	3237      	adds	r2, #55	@ 0x37
 800bb3e:	b2d2      	uxtb	r2, r2
 800bb40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	4413      	add	r3, r2
 800bb52:	2200      	movs	r2, #0
 800bb54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	75fb      	strb	r3, [r7, #23]
 800bb5c:	7dfa      	ldrb	r2, [r7, #23]
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d3d3      	bcc.n	800bb0c <IntToUnicode+0x18>
  }
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop
 800bb68:	371c      	adds	r7, #28
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
	...

0800bb74 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b094      	sub	sp, #80	@ 0x50
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb7c:	f107 030c 	add.w	r3, r7, #12
 800bb80:	2244      	movs	r2, #68	@ 0x44
 800bb82:	2100      	movs	r1, #0
 800bb84:	4618      	mov	r0, r3
 800bb86:	f001 f99f 	bl	800cec8 <memset>
  if(pcdHandle->Instance==USB)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a15      	ldr	r2, [pc, #84]	@ (800bbe4 <HAL_PCD_MspInit+0x70>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d122      	bne.n	800bbda <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bb94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb9e:	f107 030c 	add.w	r3, r7, #12
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f8 ff4c 	bl	8004a40 <HAL_RCCEx_PeriphCLKConfig>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d001      	beq.n	800bbb2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bbae:	f7f5 fd2f 	bl	8001610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe8 <HAL_PCD_MspInit+0x74>)
 800bbb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbb6:	4a0c      	ldr	r2, [pc, #48]	@ (800bbe8 <HAL_PCD_MspInit+0x74>)
 800bbb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bbbc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <HAL_PCD_MspInit+0x74>)
 800bbc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbc6:	60bb      	str	r3, [r7, #8]
 800bbc8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	2014      	movs	r0, #20
 800bbd0:	f7f6 f950 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bbd4:	2014      	movs	r0, #20
 800bbd6:	f7f6 f967 	bl	8001ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bbda:	bf00      	nop
 800bbdc:	3750      	adds	r7, #80	@ 0x50
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	40005c00 	.word	0x40005c00
 800bbe8:	40021000 	.word	0x40021000

0800bbec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bc00:	4619      	mov	r1, r3
 800bc02:	4610      	mov	r0, r2
 800bc04:	f7fe fd20 	bl	800a648 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bc22:	78fa      	ldrb	r2, [r7, #3]
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	4613      	mov	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	440b      	add	r3, r1
 800bc30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	78fb      	ldrb	r3, [r7, #3]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	f7fe fd5a 	bl	800a6f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b082      	sub	sp, #8
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bc58:	78fa      	ldrb	r2, [r7, #3]
 800bc5a:	6879      	ldr	r1, [r7, #4]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	440b      	add	r3, r1
 800bc66:	3324      	adds	r3, #36	@ 0x24
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	f7fe fda3 	bl	800a7b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bc72:	bf00      	nop
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe feb7 	bl	800a9fc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bc8e:	bf00      	nop
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	795b      	ldrb	r3, [r3, #5]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d001      	beq.n	800bcae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bcaa:	f7f5 fcb1 	bl	8001610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bcb4:	7bfa      	ldrb	r2, [r7, #15]
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fe fe61 	bl	800a980 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe fe0d 	bl	800a8e4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bcca:	bf00      	nop
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
	...

0800bcd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fe fe5c 	bl	800a9a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7a5b      	ldrb	r3, [r3, #9]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d005      	beq.n	800bcfc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcf0:	4b04      	ldr	r3, [pc, #16]	@ (800bd04 <HAL_PCD_SuspendCallback+0x30>)
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	4a03      	ldr	r2, [pc, #12]	@ (800bd04 <HAL_PCD_SuspendCallback+0x30>)
 800bcf6:	f043 0306 	orr.w	r3, r3, #6
 800bcfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	e000ed00 	.word	0xe000ed00

0800bd08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7a5b      	ldrb	r3, [r3, #9]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d007      	beq.n	800bd28 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd18:	4b08      	ldr	r3, [pc, #32]	@ (800bd3c <HAL_PCD_ResumeCallback+0x34>)
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	4a07      	ldr	r2, [pc, #28]	@ (800bd3c <HAL_PCD_ResumeCallback+0x34>)
 800bd1e:	f023 0306 	bic.w	r3, r3, #6
 800bd22:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bd24:	f000 f9f8 	bl	800c118 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fe4c 	bl	800a9cc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	e000ed00 	.word	0xe000ed00

0800bd40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bd48:	4a2b      	ldr	r2, [pc, #172]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a29      	ldr	r2, [pc, #164]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd54:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bd58:	4b27      	ldr	r3, [pc, #156]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd5a:	4a28      	ldr	r2, [pc, #160]	@ (800bdfc <USBD_LL_Init+0xbc>)
 800bd5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bd5e:	4b26      	ldr	r3, [pc, #152]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd60:	2208      	movs	r2, #8
 800bd62:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bd64:	4b24      	ldr	r3, [pc, #144]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd66:	2202      	movs	r2, #2
 800bd68:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd6a:	4b23      	ldr	r3, [pc, #140]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bd70:	4b21      	ldr	r3, [pc, #132]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bd76:	4b20      	ldr	r3, [pc, #128]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bd7c:	4b1e      	ldr	r3, [pc, #120]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bd82:	4b1d      	ldr	r3, [pc, #116]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bd88:	481b      	ldr	r0, [pc, #108]	@ (800bdf8 <USBD_LL_Init+0xb8>)
 800bd8a:	f7f6 fb0f 	bl	80023ac <HAL_PCD_Init>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bd94:	f7f5 fc3c 	bl	8001610 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd9e:	2318      	movs	r3, #24
 800bda0:	2200      	movs	r2, #0
 800bda2:	2100      	movs	r1, #0
 800bda4:	f7f7 ffca 	bl	8003d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bdae:	2358      	movs	r3, #88	@ 0x58
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2180      	movs	r1, #128	@ 0x80
 800bdb4:	f7f7 ffc2 	bl	8003d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bdbe:	23c0      	movs	r3, #192	@ 0xc0
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2181      	movs	r1, #129	@ 0x81
 800bdc4:	f7f7 ffba 	bl	8003d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bdce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	f7f7 ffb1 	bl	8003d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bde0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bde4:	2200      	movs	r2, #0
 800bde6:	2182      	movs	r1, #130	@ 0x82
 800bde8:	f7f7 ffa8 	bl	8003d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20001290 	.word	0x20001290
 800bdfc:	40005c00 	.word	0x40005c00

0800be00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be16:	4618      	mov	r0, r3
 800be18:	f7f6 fb96 	bl	8002548 <HAL_PCD_Start>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f97e 	bl	800c124 <USBD_Get_USB_Status>
 800be28:	4603      	mov	r3, r0
 800be2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	4608      	mov	r0, r1
 800be40:	4611      	mov	r1, r2
 800be42:	461a      	mov	r2, r3
 800be44:	4603      	mov	r3, r0
 800be46:	70fb      	strb	r3, [r7, #3]
 800be48:	460b      	mov	r3, r1
 800be4a:	70bb      	strb	r3, [r7, #2]
 800be4c:	4613      	mov	r3, r2
 800be4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800be5e:	78bb      	ldrb	r3, [r7, #2]
 800be60:	883a      	ldrh	r2, [r7, #0]
 800be62:	78f9      	ldrb	r1, [r7, #3]
 800be64:	f7f6 fcdd 	bl	8002822 <HAL_PCD_EP_Open>
 800be68:	4603      	mov	r3, r0
 800be6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 f958 	bl	800c124 <USBD_Get_USB_Status>
 800be74:	4603      	mov	r3, r0
 800be76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be78:	7bbb      	ldrb	r3, [r7, #14]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	460b      	mov	r3, r1
 800be8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be9c:	78fa      	ldrb	r2, [r7, #3]
 800be9e:	4611      	mov	r1, r2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7f6 fd1d 	bl	80028e0 <HAL_PCD_EP_Close>
 800bea6:	4603      	mov	r3, r0
 800bea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 f939 	bl	800c124 <USBD_Get_USB_Status>
 800beb2:	4603      	mov	r3, r0
 800beb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	460b      	mov	r3, r1
 800beca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	4611      	mov	r1, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f6 fdc6 	bl	8002a70 <HAL_PCD_EP_SetStall>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f91a 	bl	800c124 <USBD_Get_USB_Status>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	460b      	mov	r3, r1
 800bf08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bf18:	78fa      	ldrb	r2, [r7, #3]
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7f6 fdf9 	bl	8002b14 <HAL_PCD_EP_ClrStall>
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 f8fb 	bl	800c124 <USBD_Get_USB_Status>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bf4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	da0b      	bge.n	800bf70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	440b      	add	r3, r1
 800bf6a:	3312      	adds	r3, #18
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	e00b      	b.n	800bf88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf76:	68f9      	ldr	r1, [r7, #12]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4413      	add	r3, r2
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	440b      	add	r3, r1
 800bf82:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800bf86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bfae:	78fa      	ldrb	r2, [r7, #3]
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7f6 fc11 	bl	80027da <HAL_PCD_SetAddress>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 f8b0 	bl	800c124 <USBD_Get_USB_Status>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b086      	sub	sp, #24
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bff0:	7af9      	ldrb	r1, [r7, #11]
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	f7f6 fd04 	bl	8002a02 <HAL_PCD_EP_Transmit>
 800bffa:	4603      	mov	r3, r0
 800bffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	4618      	mov	r0, r3
 800c002:	f000 f88f 	bl	800c124 <USBD_Get_USB_Status>
 800c006:	4603      	mov	r3, r0
 800c008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	607a      	str	r2, [r7, #4]
 800c01e:	603b      	str	r3, [r7, #0]
 800c020:	460b      	mov	r3, r1
 800c022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c032:	7af9      	ldrb	r1, [r7, #11]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	f7f6 fc9a 	bl	8002970 <HAL_PCD_EP_Receive>
 800c03c:	4603      	mov	r3, r0
 800c03e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c040:	7dfb      	ldrb	r3, [r7, #23]
 800c042:	4618      	mov	r0, r3
 800c044:	f000 f86e 	bl	800c124 <USBD_Get_USB_Status>
 800c048:	4603      	mov	r3, r0
 800c04a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c04c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	460b      	mov	r3, r1
 800c060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f6 fcb0 	bl	80029d2 <HAL_PCD_EP_GetRxCount>
 800c072:	4603      	mov	r3, r0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d002      	beq.n	800c094 <HAL_PCDEx_LPM_Callback+0x18>
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d013      	beq.n	800c0ba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c092:	e023      	b.n	800c0dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	7a5b      	ldrb	r3, [r3, #9]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d007      	beq.n	800c0ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c09c:	f000 f83c 	bl	800c118 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0a0:	4b10      	ldr	r3, [pc, #64]	@ (800c0e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	4a0f      	ldr	r2, [pc, #60]	@ (800c0e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c0a6:	f023 0306 	bic.w	r3, r3, #6
 800c0aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fc8a 	bl	800a9cc <USBD_LL_Resume>
    break;
 800c0b8:	e010      	b.n	800c0dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fe fc6d 	bl	800a9a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7a5b      	ldrb	r3, [r3, #9]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d005      	beq.n	800c0da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0ce:	4b05      	ldr	r3, [pc, #20]	@ (800c0e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	4a04      	ldr	r2, [pc, #16]	@ (800c0e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c0d4:	f043 0306 	orr.w	r3, r3, #6
 800c0d8:	6113      	str	r3, [r2, #16]
    break;
 800c0da:	bf00      	nop
}
 800c0dc:	bf00      	nop
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	e000ed00 	.word	0xe000ed00

0800c0e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c0f0:	4b03      	ldr	r3, [pc, #12]	@ (800c100 <USBD_static_malloc+0x18>)
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	2000156c 	.word	0x2000156c

0800c104 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]

}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c11c:	f7f5 f9e0 	bl	80014e0 <SystemClock_Config>
}
 800c120:	bf00      	nop
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	2b03      	cmp	r3, #3
 800c136:	d817      	bhi.n	800c168 <USBD_Get_USB_Status+0x44>
 800c138:	a201      	add	r2, pc, #4	@ (adr r2, 800c140 <USBD_Get_USB_Status+0x1c>)
 800c13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13e:	bf00      	nop
 800c140:	0800c151 	.word	0x0800c151
 800c144:	0800c157 	.word	0x0800c157
 800c148:	0800c15d 	.word	0x0800c15d
 800c14c:	0800c163 	.word	0x0800c163
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	73fb      	strb	r3, [r7, #15]
    break;
 800c154:	e00b      	b.n	800c16e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c156:	2303      	movs	r3, #3
 800c158:	73fb      	strb	r3, [r7, #15]
    break;
 800c15a:	e008      	b.n	800c16e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c15c:	2301      	movs	r3, #1
 800c15e:	73fb      	strb	r3, [r7, #15]
    break;
 800c160:	e005      	b.n	800c16e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c162:	2303      	movs	r3, #3
 800c164:	73fb      	strb	r3, [r7, #15]
    break;
 800c166:	e002      	b.n	800c16e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c168:	2303      	movs	r3, #3
 800c16a:	73fb      	strb	r3, [r7, #15]
    break;
 800c16c:	bf00      	nop
  }
  return usb_status;
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <__NVIC_EnableIRQ>:
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	db0b      	blt.n	800c1a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	f003 021f 	and.w	r2, r3, #31
 800c194:	4907      	ldr	r1, [pc, #28]	@ (800c1b4 <__NVIC_EnableIRQ+0x38>)
 800c196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c19a:	095b      	lsrs	r3, r3, #5
 800c19c:	2001      	movs	r0, #1
 800c19e:	fa00 f202 	lsl.w	r2, r0, r2
 800c1a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c1a6:	bf00      	nop
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	e000e100 	.word	0xe000e100

0800c1b8 <open_lin_error_handler>:
#include "usart.h"

extern UART_HandleTypeDef huart1;

void open_lin_error_handler(t_open_lin_error error_code)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	71fb      	strb	r3, [r7, #7]
	/* no error handling */
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
	...

0800c1d0 <open_lin_hw_check_for_break>:

l_bool open_lin_hw_check_for_break(void)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
	l_bool result = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_LBDF);
 800c1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c20c <open_lin_hw_check_for_break+0x3c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1e4:	bf0c      	ite	eq
 800c1e6:	2301      	moveq	r3, #1
 800c1e8:	2300      	movne	r3, #0
 800c1ea:	71fb      	strb	r3, [r7, #7]
	if (result == true)
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <open_lin_hw_check_for_break+0x2c>
	{
		__HAL_UART_CLEAR_FLAG(&huart1,UART_CLEAR_LBDF);
 800c1f2:	4b06      	ldr	r3, [pc, #24]	@ (800c20c <open_lin_hw_check_for_break+0x3c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1fa:	621a      	str	r2, [r3, #32]
	}

	return result;
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	20000490 	.word	0x20000490

0800c210 <open_lin_hw_set_auto_baud>:

void open_lin_hw_set_auto_baud(void)
{
 800c210:	b480      	push	{r7}
 800c212:	af00      	add	r7, sp, #0
	huart1.Instance->RQR = UART_AUTOBAUD_REQUEST;
 800c214:	4b04      	ldr	r3, [pc, #16]	@ (800c228 <open_lin_hw_set_auto_baud+0x18>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2201      	movs	r2, #1
 800c21a:	619a      	str	r2, [r3, #24]
}
 800c21c:	bf00      	nop
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	20000490 	.word	0x20000490

0800c22c <open_lin_hw_reset>:
extern uint8_t Uart2RxFifo;
void open_lin_hw_reset(void) {
 800c22c:	b580      	push	{r7, lr}
 800c22e:	af00      	add	r7, sp, #0
	open_lin_hw_check_for_break();
 800c230:	f7ff ffce 	bl	800c1d0 <open_lin_hw_check_for_break>
	HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B);
 800c234:	2120      	movs	r1, #32
 800c236:	4806      	ldr	r0, [pc, #24]	@ (800c250 <open_lin_hw_reset+0x24>)
 800c238:	f7f9 f968 	bl	800550c <HAL_LIN_Init>
	HAL_UART_Receive_IT(&huart1, &Uart2RxFifo, 1);
 800c23c:	2201      	movs	r2, #1
 800c23e:	4905      	ldr	r1, [pc, #20]	@ (800c254 <open_lin_hw_reset+0x28>)
 800c240:	4803      	ldr	r0, [pc, #12]	@ (800c250 <open_lin_hw_reset+0x24>)
 800c242:	f7f9 fa61 	bl	8005708 <HAL_UART_Receive_IT>
    NVIC_EnableIRQ(USART1_IRQn);
 800c246:	2025      	movs	r0, #37	@ 0x25
 800c248:	f7ff ff98 	bl	800c17c <__NVIC_EnableIRQ>

}
 800c24c:	bf00      	nop
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	20000490 	.word	0x20000490
 800c254:	2000043c 	.word	0x2000043c

0800c258 <open_lin_set_rx_enabled>:


void open_lin_set_rx_enabled(l_bool v)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	71fb      	strb	r3, [r7, #7]
	if (v == l_true)
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <open_lin_set_rx_enabled+0x16>
	{
		open_lin_hw_reset();
 800c268:	f7ff ffe0 	bl	800c22c <open_lin_hw_reset>
	} else
	{
		CLEAR_BIT(huart1.Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
	}
}
 800c26c:	e007      	b.n	800c27e <open_lin_set_rx_enabled+0x26>
		CLEAR_BIT(huart1.Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c26e:	4b06      	ldr	r3, [pc, #24]	@ (800c288 <open_lin_set_rx_enabled+0x30>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	4b04      	ldr	r3, [pc, #16]	@ (800c288 <open_lin_set_rx_enabled+0x30>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800c27c:	601a      	str	r2, [r3, #0]
}
 800c27e:	bf00      	nop
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20000490 	.word	0x20000490

0800c28c <open_lin_hw_tx_byte>:

l_bool open_lin_hw_tx_byte(l_u8 byte){
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]

	if (HAL_UART_Transmit(&huart1,&byte,1,1000) == HAL_OK)
 800c296:	1df9      	adds	r1, r7, #7
 800c298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c29c:	2201      	movs	r2, #1
 800c29e:	4806      	ldr	r0, [pc, #24]	@ (800c2b8 <open_lin_hw_tx_byte+0x2c>)
 800c2a0:	f7f9 f9a4 	bl	80055ec <HAL_UART_Transmit>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <open_lin_hw_tx_byte+0x22>
		return true;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <open_lin_hw_tx_byte+0x24>
	return false;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	20000490 	.word	0x20000490

0800c2bc <open_lin_hw_tx_break>:

l_bool open_lin_hw_tx_break(void){
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	af00      	add	r7, sp, #0

	if (HAL_LIN_SendBreak(&huart1) == HAL_OK)
 800c2c0:	4805      	ldr	r0, [pc, #20]	@ (800c2d8 <open_lin_hw_tx_break+0x1c>)
 800c2c2:	f7f9 fdc5 	bl	8005e50 <HAL_LIN_SendBreak>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d101      	bne.n	800c2d0 <open_lin_hw_tx_break+0x14>
		return true;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e000      	b.n	800c2d2 <open_lin_hw_tx_break+0x16>
	return false;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20000490 	.word	0x20000490

0800c2dc <open_lin_hw_tx_data>:

l_bool open_lin_hw_tx_data(l_u8* data, l_u8 len)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	70fb      	strb	r3, [r7, #3]
	if (HAL_UART_Transmit(&huart1,data,len,1000) == HAL_OK)
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	4806      	ldr	r0, [pc, #24]	@ (800c30c <open_lin_hw_tx_data+0x30>)
 800c2f4:	f7f9 f97a 	bl	80055ec <HAL_UART_Transmit>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <open_lin_hw_tx_data+0x26>
		return true;
 800c2fe:	2301      	movs	r3, #1
 800c300:	e000      	b.n	800c304 <open_lin_hw_tx_data+0x28>
	else
		return false;
 800c302:	2300      	movs	r3, #0
//	add buffers to use
//	HAL_UART_Transmit_IT(huart1,data,len);

}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20000490 	.word	0x20000490

0800c310 <open_lin_master_dl_rx_callback>:
//{
//
//}

void open_lin_master_dl_rx_callback(open_lin_frame_slot_t* slot)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
	slcanReciveCanFrame(slot);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7f4 ffe1 	bl	80012e0 <slcanReciveCanFrame>
}
 800c31e:	bf00      	nop
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <open_lin_data_layer_parity>:

#include "open_lin_data_layer.h"
#include "open_lin_types.h"
#include "open_lin_hw.h"

open_lin_pid_t open_lin_data_layer_parity(open_lin_pid_t pid) {
 800c326:	b480      	push	{r7}
 800c328:	b085      	sub	sp, #20
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	4603      	mov	r3, r0
 800c32e:	71fb      	strb	r3, [r7, #7]
	open_lin_pid_t result = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_pid_t)(OPEN_LIN_GET_PID_BIT(pid,0) ^ OPEN_LIN_GET_PID_BIT(pid,1) ^
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	085b      	lsrs	r3, r3, #1
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	79fb      	ldrb	r3, [r7, #7]
 800c33c:	4053      	eors	r3, r2
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	089b      	lsrs	r3, r3, #2
 800c344:	b2db      	uxtb	r3, r3
 800c346:	4053      	eors	r3, r2
 800c348:	b2da      	uxtb	r2, r3
			 OPEN_LIN_GET_PID_BIT(pid,2) ^ OPEN_LIN_GET_PID_BIT(pid,4)) << OPEN_LIN_P0_FLAG;
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	091b      	lsrs	r3, r3, #4
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	4053      	eors	r3, r2
 800c352:	b2db      	uxtb	r3, r3
 800c354:	019b      	lsls	r3, r3, #6
 800c356:	b2db      	uxtb	r3, r3
	result = (open_lin_pid_t)(OPEN_LIN_GET_PID_BIT(pid,0) ^ OPEN_LIN_GET_PID_BIT(pid,1) ^
 800c358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c35c:	73fb      	strb	r3, [r7, #15]

    result |= (open_lin_pid_t)(~(OPEN_LIN_GET_PID_BIT(pid,1) ^ OPEN_LIN_GET_PID_BIT(pid,3) ^
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	085b      	lsrs	r3, r3, #1
 800c362:	b2da      	uxtb	r2, r3
 800c364:	79fb      	ldrb	r3, [r7, #7]
 800c366:	08db      	lsrs	r3, r3, #3
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	4053      	eors	r3, r2
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	79fb      	ldrb	r3, [r7, #7]
 800c370:	091b      	lsrs	r3, r3, #4
 800c372:	b2db      	uxtb	r3, r3
 800c374:	4053      	eors	r3, r2
 800c376:	b2da      	uxtb	r2, r3
    			  OPEN_LIN_GET_PID_BIT(pid,4) ^ OPEN_LIN_GET_PID_BIT(pid,5)) << OPEN_LIN_P1_FLAG);
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	095b      	lsrs	r3, r3, #5
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	4053      	eors	r3, r2
 800c380:	b2db      	uxtb	r3, r3
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	b2db      	uxtb	r3, r3
    result |= (open_lin_pid_t)(~(OPEN_LIN_GET_PID_BIT(pid,1) ^ OPEN_LIN_GET_PID_BIT(pid,3) ^
 800c388:	43db      	mvns	r3, r3
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	01db      	lsls	r3, r3, #7
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	4313      	orrs	r3, r2
 800c394:	73fb      	strb	r3, [r7, #15]

    result |= (open_lin_pid_t)(OPEN_LIN_ID_MASK & pid);
 800c396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c39a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c39e:	b25a      	sxtb	r2, r3
 800c3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	73fb      	strb	r3, [r7, #15]
    return result;
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <open_lin_data_layer_checksum>:

extern l_u8 classicChecksum;
open_lin_checksum_t open_lin_data_layer_checksum(open_lin_pid_t pid, l_u8 lenght, const l_u8* data_ptr)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	603a      	str	r2, [r7, #0]
 800c3c2:	71fb      	strb	r3, [r7, #7]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	71bb      	strb	r3, [r7, #6]
	l_u8 i = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
	l_u16 result;

	/* diagnostic request have classic checksum */
	if ((pid == OPEN_LIN_DIAG_REQUEST) || (pid == OPEN_LIN_DIAG_RESPONSE) || (classicChecksum == 1))
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	2b3c      	cmp	r3, #60	@ 0x3c
 800c3d0:	d006      	beq.n	800c3e0 <open_lin_data_layer_checksum+0x28>
 800c3d2:	79fb      	ldrb	r3, [r7, #7]
 800c3d4:	2b3d      	cmp	r3, #61	@ 0x3d
 800c3d6:	d003      	beq.n	800c3e0 <open_lin_data_layer_checksum+0x28>
 800c3d8:	4b16      	ldr	r3, [pc, #88]	@ (800c434 <open_lin_data_layer_checksum+0x7c>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d102      	bne.n	800c3e6 <open_lin_data_layer_checksum+0x2e>
	{
		result = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	81bb      	strh	r3, [r7, #12]
 800c3e4:	e005      	b.n	800c3f2 <open_lin_data_layer_checksum+0x3a>
	} else {
		result = open_lin_data_layer_parity(pid);
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff ff9c 	bl	800c326 <open_lin_data_layer_parity>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	81bb      	strh	r3, [r7, #12]
	}

	for (i = 0; i < lenght; i++)
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
 800c3f6:	e010      	b.n	800c41a <open_lin_data_layer_checksum+0x62>
	{
		result += data_ptr[i];
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
 800c402:	89bb      	ldrh	r3, [r7, #12]
 800c404:	4413      	add	r3, r2
 800c406:	81bb      	strh	r3, [r7, #12]
		if (result > 0xFF)
 800c408:	89bb      	ldrh	r3, [r7, #12]
 800c40a:	2bff      	cmp	r3, #255	@ 0xff
 800c40c:	d902      	bls.n	800c414 <open_lin_data_layer_checksum+0x5c>
		{
			result -= 0xFF;
 800c40e:	89bb      	ldrh	r3, [r7, #12]
 800c410:	3bff      	subs	r3, #255	@ 0xff
 800c412:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < lenght; i++)
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	3301      	adds	r3, #1
 800c418:	73fb      	strb	r3, [r7, #15]
 800c41a:	7bfa      	ldrb	r2, [r7, #15]
 800c41c:	79bb      	ldrb	r3, [r7, #6]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d3ea      	bcc.n	800c3f8 <open_lin_data_layer_checksum+0x40>
		} else
		{
			/* do nothing */
		}
	}
	return (open_lin_checksum_t)(~result);
 800c422:	89bb      	ldrh	r3, [r7, #12]
 800c424:	b2db      	uxtb	r3, r3
 800c426:	43db      	mvns	r3, r3
 800c428:	b2db      	uxtb	r3, r3
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	200003f2 	.word	0x200003f2

0800c438 <open_lin_master_goto_idle>:
static void open_lin_master_goto_idle(l_bool next_item);
static void data_layer_next_item(void);
static t_master_frame_table_item* get_current_item(void);

static void open_lin_master_goto_idle(l_bool next_item)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	71fb      	strb	r3, [r7, #7]
	master_rx_count = 0;
 800c442:	4b09      	ldr	r3, [pc, #36]	@ (800c468 <open_lin_master_goto_idle+0x30>)
 800c444:	2200      	movs	r2, #0
 800c446:	701a      	strb	r2, [r3, #0]
	lin_master_state = OPEN_LIN_MASTER_IDLE;
 800c448:	4b08      	ldr	r3, [pc, #32]	@ (800c46c <open_lin_master_goto_idle+0x34>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]
	time_passed_since_last_frame_ms = 0;
 800c44e:	4b08      	ldr	r3, [pc, #32]	@ (800c470 <open_lin_master_goto_idle+0x38>)
 800c450:	2200      	movs	r2, #0
 800c452:	801a      	strh	r2, [r3, #0]
	if (next_item)
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d001      	beq.n	800c45e <open_lin_master_goto_idle+0x26>
	{
		data_layer_next_item();
 800c45a:	f000 f839 	bl	800c4d0 <data_layer_next_item>
	} else {
		/* do nothing */
	}
}
 800c45e:	bf00      	nop
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	2000178d 	.word	0x2000178d
 800c46c:	2000178c 	.word	0x2000178c
 800c470:	20001796 	.word	0x20001796

0800c474 <open_lin_master_dl_init>:


void open_lin_master_dl_init(t_master_frame_table_item *p_master_frame_table, l_u8 p_master_frame_table_size)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	460b      	mov	r3, r1
 800c47e:	70fb      	strb	r3, [r7, #3]
	master_frame_table = p_master_frame_table;
 800c480:	4a06      	ldr	r2, [pc, #24]	@ (800c49c <open_lin_master_dl_init+0x28>)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6013      	str	r3, [r2, #0]
	master_frame_table_size = p_master_frame_table_size;
 800c486:	4a06      	ldr	r2, [pc, #24]	@ (800c4a0 <open_lin_master_dl_init+0x2c>)
 800c488:	78fb      	ldrb	r3, [r7, #3]
 800c48a:	7013      	strb	r3, [r2, #0]
	open_lin_master_goto_idle(l_false);
 800c48c:	2000      	movs	r0, #0
 800c48e:	f7ff ffd3 	bl	800c438 <open_lin_master_goto_idle>
}
 800c492:	bf00      	nop
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20001790 	.word	0x20001790
 800c4a0:	20001794 	.word	0x20001794

0800c4a4 <get_current_item>:

static t_master_frame_table_item* get_current_item(void)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
	return &(master_frame_table[master_table_index]);
 800c4a8:	4b07      	ldr	r3, [pc, #28]	@ (800c4c8 <get_current_item+0x24>)
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <get_current_item+0x28>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	440b      	add	r3, r1
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4413      	add	r3, r2
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	20001790 	.word	0x20001790
 800c4cc:	2000178e 	.word	0x2000178e

0800c4d0 <data_layer_next_item>:

static void data_layer_next_item(void)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0

	if (master_table_index >= (l_u8)(master_frame_table_size - 1u))
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c504 <data_layer_next_item+0x34>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c508 <data_layer_next_item+0x38>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d803      	bhi.n	800c4ec <data_layer_next_item+0x1c>
	{
		master_table_index = 0;
 800c4e4:	4b08      	ldr	r3, [pc, #32]	@ (800c508 <data_layer_next_item+0x38>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
	} else {
		master_table_index ++;
	}
}
 800c4ea:	e005      	b.n	800c4f8 <data_layer_next_item+0x28>
		master_table_index ++;
 800c4ec:	4b06      	ldr	r3, [pc, #24]	@ (800c508 <data_layer_next_item+0x38>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	4b04      	ldr	r3, [pc, #16]	@ (800c508 <data_layer_next_item+0x38>)
 800c4f6:	701a      	strb	r2, [r3, #0]
}
 800c4f8:	bf00      	nop
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	20001794 	.word	0x20001794
 800c508:	2000178e 	.word	0x2000178e

0800c50c <open_lin_master_data_tx_header>:


l_bool open_lin_master_data_tx_header(open_lin_frame_slot_t  *slot)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	l_bool result = l_true;
 800c514:	2301      	movs	r3, #1
 800c516:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_hw_tx_break()) && result;
 800c518:	f7ff fed0 	bl	800c2bc <open_lin_hw_tx_break>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d004      	beq.n	800c52c <open_lin_master_data_tx_header+0x20>
 800c522:	7bfb      	ldrb	r3, [r7, #15]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <open_lin_master_data_tx_header+0x20>
 800c528:	2301      	movs	r3, #1
 800c52a:	e000      	b.n	800c52e <open_lin_master_data_tx_header+0x22>
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
 800c530:	7bfb      	ldrb	r3, [r7, #15]
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_hw_tx_byte(0x55)) && result;
 800c538:	2055      	movs	r0, #85	@ 0x55
 800c53a:	f7ff fea7 	bl	800c28c <open_lin_hw_tx_byte>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d004      	beq.n	800c54e <open_lin_master_data_tx_header+0x42>
 800c544:	7bfb      	ldrb	r3, [r7, #15]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <open_lin_master_data_tx_header+0x42>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e000      	b.n	800c550 <open_lin_master_data_tx_header+0x44>
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]
 800c552:	7bfb      	ldrb	r3, [r7, #15]
 800c554:	f003 0301 	and.w	r3, r3, #1
 800c558:	73fb      	strb	r3, [r7, #15]
	result = (open_lin_hw_tx_byte(open_lin_data_layer_parity(slot->pid))) && result;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff fee1 	bl	800c326 <open_lin_data_layer_parity>
 800c564:	4603      	mov	r3, r0
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff fe90 	bl	800c28c <open_lin_hw_tx_byte>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d004      	beq.n	800c57c <open_lin_master_data_tx_header+0x70>
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <open_lin_master_data_tx_header+0x70>
 800c578:	2301      	movs	r3, #1
 800c57a:	e000      	b.n	800c57e <open_lin_master_data_tx_header+0x72>
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
 800c580:	7bfb      	ldrb	r3, [r7, #15]
 800c582:	f003 0301 	and.w	r3, r3, #1
 800c586:	73fb      	strb	r3, [r7, #15]
	return result;
 800c588:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <open_lin_master_data_tx_data>:

l_bool open_lin_master_data_tx_data(open_lin_frame_slot_t *slot)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
	l_u8 i = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]
	l_bool result = l_true;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < slot->data_length; i++)
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
 800c5a6:	e018      	b.n	800c5da <open_lin_master_data_tx_data+0x48>
	{
		result = (open_lin_hw_tx_byte(slot->data_ptr[i])) && result;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff fe6a 	bl	800c28c <open_lin_hw_tx_byte>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d004      	beq.n	800c5c8 <open_lin_master_data_tx_data+0x36>
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <open_lin_master_data_tx_data+0x36>
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e000      	b.n	800c5ca <open_lin_master_data_tx_data+0x38>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73bb      	strb	r3, [r7, #14]
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < slot->data_length; i++)
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	73fb      	strb	r3, [r7, #15]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	789b      	ldrb	r3, [r3, #2]
 800c5de:	7bfa      	ldrb	r2, [r7, #15]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d3e1      	bcc.n	800c5a8 <open_lin_master_data_tx_data+0x16>
	}

	result = (open_lin_hw_tx_byte(open_lin_data_layer_checksum(slot->pid, slot->data_length, slot->data_ptr))) && result;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	7818      	ldrb	r0, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7899      	ldrb	r1, [r3, #2]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	f7ff fee1 	bl	800c3b8 <open_lin_data_layer_checksum>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff fe47 	bl	800c28c <open_lin_hw_tx_byte>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d004      	beq.n	800c60e <open_lin_master_data_tx_data+0x7c>
 800c604:	7bbb      	ldrb	r3, [r7, #14]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <open_lin_master_data_tx_data+0x7c>
 800c60a:	2301      	movs	r3, #1
 800c60c:	e000      	b.n	800c610 <open_lin_master_data_tx_data+0x7e>
 800c60e:	2300      	movs	r3, #0
 800c610:	73bb      	strb	r3, [r7, #14]
 800c612:	7bbb      	ldrb	r3, [r7, #14]
 800c614:	f003 0301 	and.w	r3, r3, #1
 800c618:	73bb      	strb	r3, [r7, #14]
	return result;
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <open_lin_master_dl_rx>:

l_bool open_lin_master_dl_rx(l_u8 rx_byte)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	71fb      	strb	r3, [r7, #7]
	open_lin_frame_slot_t* slot = &(get_current_item()->slot);
 800c62e:	f7ff ff39 	bl	800c4a4 <get_current_item>
 800c632:	4603      	mov	r3, r0
 800c634:	3304      	adds	r3, #4
 800c636:	60bb      	str	r3, [r7, #8]
	static l_u8 frame_tmp_buffer[OPEN_LIN_MAX_FRAME_LENGTH];
	l_bool pending = false;
 800c638:	2300      	movs	r3, #0
 800c63a:	73fb      	strb	r3, [r7, #15]

	if (lin_master_state == OPEN_LIN_MASTER_DATA_RX)
 800c63c:	4b1e      	ldr	r3, [pc, #120]	@ (800c6b8 <open_lin_master_dl_rx+0x94>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d133      	bne.n	800c6ac <open_lin_master_dl_rx+0x88>
	{
		if (master_rx_count < slot->data_length)
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	789a      	ldrb	r2, [r3, #2]
 800c648:	4b1c      	ldr	r3, [pc, #112]	@ (800c6bc <open_lin_master_dl_rx+0x98>)
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d90e      	bls.n	800c66e <open_lin_master_dl_rx+0x4a>
		{
			frame_tmp_buffer[master_rx_count] = rx_byte;
 800c650:	4b1a      	ldr	r3, [pc, #104]	@ (800c6bc <open_lin_master_dl_rx+0x98>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	4619      	mov	r1, r3
 800c656:	4a1a      	ldr	r2, [pc, #104]	@ (800c6c0 <open_lin_master_dl_rx+0x9c>)
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	5453      	strb	r3, [r2, r1]
			master_rx_count ++;
 800c65c:	4b17      	ldr	r3, [pc, #92]	@ (800c6bc <open_lin_master_dl_rx+0x98>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	3301      	adds	r3, #1
 800c662:	b2da      	uxtb	r2, r3
 800c664:	4b15      	ldr	r3, [pc, #84]	@ (800c6bc <open_lin_master_dl_rx+0x98>)
 800c666:	701a      	strb	r2, [r3, #0]
			pending = l_true;
 800c668:	2301      	movs	r3, #1
 800c66a:	73fb      	strb	r3, [r7, #15]
 800c66c:	e01e      	b.n	800c6ac <open_lin_master_dl_rx+0x88>
		} else
		{
			if (rx_byte == open_lin_data_layer_checksum(slot->pid,slot->data_length,frame_tmp_buffer))
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	7818      	ldrb	r0, [r3, #0]
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	789b      	ldrb	r3, [r3, #2]
 800c676:	4a12      	ldr	r2, [pc, #72]	@ (800c6c0 <open_lin_master_dl_rx+0x9c>)
 800c678:	4619      	mov	r1, r3
 800c67a:	f7ff fe9d 	bl	800c3b8 <open_lin_data_layer_checksum>
 800c67e:	4603      	mov	r3, r0
 800c680:	461a      	mov	r2, r3
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	4293      	cmp	r3, r2
 800c686:	d10b      	bne.n	800c6a0 <open_lin_master_dl_rx+0x7c>
			{
				(void)open_lin_memcpy(slot->data_ptr,frame_tmp_buffer,slot->data_length);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	6858      	ldr	r0, [r3, #4]
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	789b      	ldrb	r3, [r3, #2]
 800c690:	461a      	mov	r2, r3
 800c692:	490b      	ldr	r1, [pc, #44]	@ (800c6c0 <open_lin_master_dl_rx+0x9c>)
 800c694:	f000 fc93 	bl	800cfbe <memcpy>
				open_lin_master_dl_rx_callback(slot);
 800c698:	68b8      	ldr	r0, [r7, #8]
 800c69a:	f7ff fe39 	bl	800c310 <open_lin_master_dl_rx_callback>
 800c69e:	e002      	b.n	800c6a6 <open_lin_master_dl_rx+0x82>
			} else
			{
				open_lin_error_handler(OPEN_LIN_MASTER_ERROR_CHECKSUM);
 800c6a0:	2008      	movs	r0, #8
 800c6a2:	f7ff fd89 	bl	800c1b8 <open_lin_error_handler>
			}
			open_lin_master_goto_idle(l_true);
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	f7ff fec6 	bl	800c438 <open_lin_master_goto_idle>
		}
	}
	return pending;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	2000178c 	.word	0x2000178c
 800c6bc:	2000178d 	.word	0x2000178d
 800c6c0:	2000179c 	.word	0x2000179c

0800c6c4 <open_lin_master_dl_handler>:

l_u8 diagnostic_slot = 0;

void open_lin_master_dl_handler(l_u8 ms_passed)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	71fb      	strb	r3, [r7, #7]
	t_master_frame_table_item* master_table_item = get_current_item();
 800c6ce:	f7ff fee9 	bl	800c4a4 <get_current_item>
 800c6d2:	60f8      	str	r0, [r7, #12]
	if (master_frame_table_size > 0u)
 800c6d4:	4b46      	ldr	r3, [pc, #280]	@ (800c7f0 <open_lin_master_dl_handler+0x12c>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 8085 	beq.w	800c7e8 <open_lin_master_dl_handler+0x124>
	{
		if ((master_table_item->slot.pid == OPEN_LIN_DIAG_REQUEST) || (master_table_item->slot.pid == OPEN_LIN_DIAG_RESPONSE) )
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	791b      	ldrb	r3, [r3, #4]
 800c6e2:	2b3c      	cmp	r3, #60	@ 0x3c
 800c6e4:	d003      	beq.n	800c6ee <open_lin_master_dl_handler+0x2a>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	791b      	ldrb	r3, [r3, #4]
 800c6ea:	2b3d      	cmp	r3, #61	@ 0x3d
 800c6ec:	d108      	bne.n	800c700 <open_lin_master_dl_handler+0x3c>
		{
			if (diagnostic_slot == 0)
 800c6ee:	4b41      	ldr	r3, [pc, #260]	@ (800c7f4 <open_lin_master_dl_handler+0x130>)
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d104      	bne.n	800c700 <open_lin_master_dl_handler+0x3c>
			{
				data_layer_next_item();
 800c6f6:	f7ff feeb 	bl	800c4d0 <data_layer_next_item>
				master_table_item = get_current_item();
 800c6fa:	f7ff fed3 	bl	800c4a4 <get_current_item>
 800c6fe:	60f8      	str	r0, [r7, #12]
			}
		}
		time_passed_since_last_frame_ms += ms_passed;
 800c700:	79fb      	ldrb	r3, [r7, #7]
 800c702:	b29a      	uxth	r2, r3
 800c704:	4b3c      	ldr	r3, [pc, #240]	@ (800c7f8 <open_lin_master_dl_handler+0x134>)
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	4413      	add	r3, r2
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	4b3a      	ldr	r3, [pc, #232]	@ (800c7f8 <open_lin_master_dl_handler+0x134>)
 800c70e:	801a      	strh	r2, [r3, #0]
		if (lin_master_state == OPEN_LIN_MASTER_IDLE)
 800c710:	4b3a      	ldr	r3, [pc, #232]	@ (800c7fc <open_lin_master_dl_handler+0x138>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d134      	bne.n	800c782 <open_lin_master_dl_handler+0xbe>
		{
			if ((master_table_item->offset_ms) < time_passed_since_last_frame_ms)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	461a      	mov	r2, r3
 800c71e:	4b36      	ldr	r3, [pc, #216]	@ (800c7f8 <open_lin_master_dl_handler+0x134>)
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d22d      	bcs.n	800c782 <open_lin_master_dl_handler+0xbe>
			{
				if ((master_table_item->slot.pid == OPEN_LIN_DIAG_REQUEST) || (master_table_item->slot.pid == OPEN_LIN_DIAG_RESPONSE) )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	791b      	ldrb	r3, [r3, #4]
 800c72a:	2b3c      	cmp	r3, #60	@ 0x3c
 800c72c:	d003      	beq.n	800c736 <open_lin_master_dl_handler+0x72>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	791b      	ldrb	r3, [r3, #4]
 800c732:	2b3d      	cmp	r3, #61	@ 0x3d
 800c734:	d102      	bne.n	800c73c <open_lin_master_dl_handler+0x78>
					diagnostic_slot = 0;
 800c736:	4b2f      	ldr	r3, [pc, #188]	@ (800c7f4 <open_lin_master_dl_handler+0x130>)
 800c738:	2200      	movs	r2, #0
 800c73a:	701a      	strb	r2, [r3, #0]
				time_passed_since_last_frame_ms = 0;
 800c73c:	4b2e      	ldr	r3, [pc, #184]	@ (800c7f8 <open_lin_master_dl_handler+0x134>)
 800c73e:	2200      	movs	r2, #0
 800c740:	801a      	strh	r2, [r3, #0]
				if (open_lin_master_data_tx_header(&master_table_item->slot) == l_true)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3304      	adds	r3, #4
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff fee0 	bl	800c50c <open_lin_master_data_tx_header>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d011      	beq.n	800c776 <open_lin_master_dl_handler+0xb2>
				{
					if (master_table_item->slot.frame_type == OPEN_LIN_FRAME_TYPE_TRANSMIT)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	795b      	ldrb	r3, [r3, #5]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d103      	bne.n	800c762 <open_lin_master_dl_handler+0x9e>
					{
						lin_master_state = OPEN_LIN_MASTER_TX_DATA;
 800c75a:	4b28      	ldr	r3, [pc, #160]	@ (800c7fc <open_lin_master_dl_handler+0x138>)
 800c75c:	2202      	movs	r2, #2
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	e00f      	b.n	800c782 <open_lin_master_dl_handler+0xbe>
					} else
					{
						lin_master_state = OPEN_LIN_MASTER_DATA_RX;
 800c762:	4b26      	ldr	r3, [pc, #152]	@ (800c7fc <open_lin_master_dl_handler+0x138>)
 800c764:	2201      	movs	r2, #1
 800c766:	701a      	strb	r2, [r3, #0]
						master_rx_count = 0;
 800c768:	4b25      	ldr	r3, [pc, #148]	@ (800c800 <open_lin_master_dl_handler+0x13c>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	701a      	strb	r2, [r3, #0]
						open_lin_set_rx_enabled(true);
 800c76e:	2001      	movs	r0, #1
 800c770:	f7ff fd72 	bl	800c258 <open_lin_set_rx_enabled>
 800c774:	e005      	b.n	800c782 <open_lin_master_dl_handler+0xbe>
					}
				} else
				{
					open_lin_error_handler(OPEN_LIN_MASTER_ERROR_HEADER_TX);
 800c776:	2009      	movs	r0, #9
 800c778:	f7ff fd1e 	bl	800c1b8 <open_lin_error_handler>
					lin_master_state = OPEN_LIN_MASTER_IDLE;
 800c77c:	4b1f      	ldr	r3, [pc, #124]	@ (800c7fc <open_lin_master_dl_handler+0x138>)
 800c77e:	2200      	movs	r2, #0
 800c780:	701a      	strb	r2, [r3, #0]
			}
		} else
		{
			/* do nothing */
		}
		switch (lin_master_state)
 800c782:	4b1e      	ldr	r3, [pc, #120]	@ (800c7fc <open_lin_master_dl_handler+0x138>)
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	2b02      	cmp	r3, #2
 800c788:	d018      	beq.n	800c7bc <open_lin_master_dl_handler+0xf8>
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	dc29      	bgt.n	800c7e2 <open_lin_master_dl_handler+0x11e>
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <open_lin_master_dl_handler+0xd4>
 800c792:	2b01      	cmp	r3, #1
 800c794:	d004      	beq.n	800c7a0 <open_lin_master_dl_handler+0xdc>
				}
				break;
			}
			default:
				/* do nothing */
				break;
 800c796:	e024      	b.n	800c7e2 <open_lin_master_dl_handler+0x11e>
				open_lin_set_rx_enabled(false);
 800c798:	2000      	movs	r0, #0
 800c79a:	f7ff fd5d 	bl	800c258 <open_lin_set_rx_enabled>
				break;
 800c79e:	e023      	b.n	800c7e8 <open_lin_master_dl_handler+0x124>
				if (time_passed_since_last_frame_ms > master_table_item->response_wait_ms)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	785b      	ldrb	r3, [r3, #1]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	4b14      	ldr	r3, [pc, #80]	@ (800c7f8 <open_lin_master_dl_handler+0x134>)
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d21b      	bcs.n	800c7e6 <open_lin_master_dl_handler+0x122>
					open_lin_error_handler(OPEN_LIN_MASTER_ERROR_DATA_RX_TIMEOUT);
 800c7ae:	200c      	movs	r0, #12
 800c7b0:	f7ff fd02 	bl	800c1b8 <open_lin_error_handler>
					open_lin_master_goto_idle(l_true);
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	f7ff fe3f 	bl	800c438 <open_lin_master_goto_idle>
				break;
 800c7ba:	e014      	b.n	800c7e6 <open_lin_master_dl_handler+0x122>
				if (open_lin_master_data_tx_data(&master_table_item->slot) == l_true)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	3304      	adds	r3, #4
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7ff fee6 	bl	800c592 <open_lin_master_data_tx_data>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <open_lin_master_dl_handler+0x110>
					open_lin_master_goto_idle(l_true);
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	f7ff fe33 	bl	800c438 <open_lin_master_goto_idle>
				break;
 800c7d2:	e009      	b.n	800c7e8 <open_lin_master_dl_handler+0x124>
					open_lin_error_handler(OPEN_LIN_MASTER_ERROR_DATA_TX);
 800c7d4:	200a      	movs	r0, #10
 800c7d6:	f7ff fcef 	bl	800c1b8 <open_lin_error_handler>
					lin_master_state = OPEN_LIN_MASTER_IDLE;
 800c7da:	4b08      	ldr	r3, [pc, #32]	@ (800c7fc <open_lin_master_dl_handler+0x138>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
				break;
 800c7e0:	e002      	b.n	800c7e8 <open_lin_master_dl_handler+0x124>
				break;
 800c7e2:	bf00      	nop
 800c7e4:	e000      	b.n	800c7e8 <open_lin_master_dl_handler+0x124>
				break;
 800c7e6:	bf00      	nop
		}
	} else {
		/* empty master table do nothing */
	}
}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20001794 	.word	0x20001794
 800c7f4:	20001798 	.word	0x20001798
 800c7f8:	20001796 	.word	0x20001796
 800c7fc:	2000178c 	.word	0x2000178c
 800c800:	2000178d 	.word	0x2000178d

0800c804 <open_lin_net_init>:
static t_master_frame_table_item* slot_array;
static l_u8 slot_array_len;


void open_lin_net_init(t_master_frame_table_item *a_slot_array, l_u8 a_slot_array_len)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
	slot_array = a_slot_array;
 800c810:	4a06      	ldr	r2, [pc, #24]	@ (800c82c <open_lin_net_init+0x28>)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6013      	str	r3, [r2, #0]
	slot_array_len = a_slot_array_len;
 800c816:	4a06      	ldr	r2, [pc, #24]	@ (800c830 <open_lin_net_init+0x2c>)
 800c818:	78fb      	ldrb	r3, [r7, #3]
 800c81a:	7013      	strb	r3, [r2, #0]
	open_lin_set_rx_enabled(true);
 800c81c:	2001      	movs	r0, #1
 800c81e:	f7ff fd1b 	bl	800c258 <open_lin_set_rx_enabled>
}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	200017a4 	.word	0x200017a4
 800c830:	200017a8 	.word	0x200017a8

0800c834 <open_lin_net_get_slot>:
#ifdef OPEN_LIN_DYNAMIC_IDS
	extern open_lin_id_translation_item_t open_lin_id_translation_tab[];
#endif

open_lin_frame_slot_t* open_lin_net_get_slot(open_lin_pid_t pid)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	4603      	mov	r3, r0
 800c83c:	71fb      	strb	r3, [r7, #7]
	open_lin_frame_slot_t *result = OPEN_LIN_NET_SLOT_EMPTY;
 800c83e:	2300      	movs	r3, #0
 800c840:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	72fb      	strb	r3, [r7, #11]
        return result; /* MISRA violation */
    } else {
        /* do nothing */
    }
#endif
	for(i = 0; i < (slot_array_len); i++)
 800c846:	2300      	movs	r3, #0
 800c848:	72fb      	strb	r3, [r7, #11]
 800c84a:	e019      	b.n	800c880 <open_lin_net_get_slot+0x4c>
	{
		if (slot_array[i].slot.pid == pid){
 800c84c:	4b12      	ldr	r3, [pc, #72]	@ (800c898 <open_lin_net_get_slot+0x64>)
 800c84e:	6819      	ldr	r1, [r3, #0]
 800c850:	7afa      	ldrb	r2, [r7, #11]
 800c852:	4613      	mov	r3, r2
 800c854:	005b      	lsls	r3, r3, #1
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	440b      	add	r3, r1
 800c85c:	791b      	ldrb	r3, [r3, #4]
 800c85e:	79fa      	ldrb	r2, [r7, #7]
 800c860:	429a      	cmp	r2, r3
 800c862:	d10a      	bne.n	800c87a <open_lin_net_get_slot+0x46>
			result = &slot_array[i].slot;
 800c864:	4b0c      	ldr	r3, [pc, #48]	@ (800c898 <open_lin_net_get_slot+0x64>)
 800c866:	6819      	ldr	r1, [r3, #0]
 800c868:	7afa      	ldrb	r2, [r7, #11]
 800c86a:	4613      	mov	r3, r2
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	4413      	add	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	440b      	add	r3, r1
 800c874:	3304      	adds	r3, #4
 800c876:	60fb      	str	r3, [r7, #12]
			break;
 800c878:	e007      	b.n	800c88a <open_lin_net_get_slot+0x56>
	for(i = 0; i < (slot_array_len); i++)
 800c87a:	7afb      	ldrb	r3, [r7, #11]
 800c87c:	3301      	adds	r3, #1
 800c87e:	72fb      	strb	r3, [r7, #11]
 800c880:	4b06      	ldr	r3, [pc, #24]	@ (800c89c <open_lin_net_get_slot+0x68>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	7afa      	ldrb	r2, [r7, #11]
 800c886:	429a      	cmp	r2, r3
 800c888:	d3e0      	bcc.n	800c84c <open_lin_net_get_slot+0x18>
		{
			/* do nothing */
		}
	}

	return result;
 800c88a:	68fb      	ldr	r3, [r7, #12]
};
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	200017a4 	.word	0x200017a4
 800c89c:	200017a8 	.word	0x200017a8

0800c8a0 <open_lin_net_rx_handler>:

void open_lin_net_rx_handler(open_lin_pid_t pid) {
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	71fb      	strb	r3, [r7, #7]
	open_lin_frame_slot_t* slot = open_lin_net_get_slot(pid);
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7ff ffc1 	bl	800c834 <open_lin_net_get_slot>
 800c8b2:	60f8      	str	r0, [r7, #12]
	open_lin_on_rx_frame(slot);
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7f3 ffcd 	bl	8000854 <open_lin_on_rx_frame>
};
 800c8ba:	bf00      	nop
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
	...

0800c8c4 <open_lin_slave_set_lin_frame>:

static t_open_lin_slave_state open_lin_slave_state;

static l_u8 open_lin_slave_state_data_count;

static l_bool open_lin_slave_set_lin_frame(t_open_lin_data_layer_frame *frame){
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
	l_bool result = false;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
	open_lin_frame_slot_t *frame_slot = open_lin_net_get_slot(frame->pid);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff ffad 	bl	800c834 <open_lin_net_get_slot>
 800c8da:	60b8      	str	r0, [r7, #8]
	if (frame_slot != OPEN_LIN_NET_SLOT_EMPTY)
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d014      	beq.n	800c90c <open_lin_slave_set_lin_frame+0x48>
	{
		frame->lenght = frame_slot->data_length;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	789a      	ldrb	r2, [r3, #2]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	705a      	strb	r2, [r3, #1]
		frame->data_ptr = frame_slot->data_ptr;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	605a      	str	r2, [r3, #4]
		if (frame_slot->frame_type == OPEN_LIN_FRAME_TYPE_TRANSMIT)
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	785b      	ldrb	r3, [r3, #1]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d103      	bne.n	800c902 <open_lin_slave_set_lin_frame+0x3e>
		{
			open_lin_slave_state = OPEN_LIN_SLAVE_DATA_TX;
 800c8fa:	4b07      	ldr	r3, [pc, #28]	@ (800c918 <open_lin_slave_set_lin_frame+0x54>)
 800c8fc:	2204      	movs	r2, #4
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	e002      	b.n	800c908 <open_lin_slave_set_lin_frame+0x44>
		} else
		{
			open_lin_slave_state = OPEN_LIN_SLAVE_DATA_RX;
 800c902:	4b05      	ldr	r3, [pc, #20]	@ (800c918 <open_lin_slave_set_lin_frame+0x54>)
 800c904:	2203      	movs	r2, #3
 800c906:	701a      	strb	r2, [r3, #0]
		}
		result = true;
 800c908:	2301      	movs	r3, #1
 800c90a:	73fb      	strb	r3, [r7, #15]
	} else
	{
		/* do nothing */
	}
	return result;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	200017a9 	.word	0x200017a9

0800c91c <open_lin_slave_reset>:
void open_lin_slave_init(void)
{
	open_lin_slave_reset();
}

void open_lin_slave_reset(void){
 800c91c:	b480      	push	{r7}
 800c91e:	af00      	add	r7, sp, #0
	open_lin_slave_state = OPEN_LIN_SLAVE_IDLE;
 800c920:	4b05      	ldr	r3, [pc, #20]	@ (800c938 <open_lin_slave_reset+0x1c>)
 800c922:	2200      	movs	r2, #0
 800c924:	701a      	strb	r2, [r3, #0]
	open_lin_slave_state_data_count = 0;
 800c926:	4b05      	ldr	r3, [pc, #20]	@ (800c93c <open_lin_slave_reset+0x20>)
 800c928:	2200      	movs	r2, #0
 800c92a:	701a      	strb	r2, [r3, #0]
}
 800c92c:	bf00      	nop
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	200017a9 	.word	0x200017a9
 800c93c:	200017aa 	.word	0x200017aa

0800c940 <open_lin_slave_rx_header>:

void open_lin_slave_rx_header(l_u8 rx_byte)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	4603      	mov	r3, r0
 800c948:	71fb      	strb	r3, [r7, #7]
	static t_open_lin_data_layer_frame open_lin_data_layer_frame;
	static l_u8 open_lin_slave_data_buff[OPEN_LIN_MAX_FRAME_LENGTH];

	if (open_lin_hw_check_for_break() == l_true)
 800c94a:	f7ff fc41 	bl	800c1d0 <open_lin_hw_check_for_break>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00c      	beq.n	800c96e <open_lin_slave_rx_header+0x2e>
	{
		if (open_lin_slave_state != OPEN_LIN_SLAVE_IDLE)
 800c954:	4b5b      	ldr	r3, [pc, #364]	@ (800cac4 <open_lin_slave_rx_header+0x184>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <open_lin_slave_rx_header+0x22>
		{
			open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_BREAK); /* break should be received only in IDLE state */
 800c95c:	2005      	movs	r0, #5
 800c95e:	f7ff fc2b 	bl	800c1b8 <open_lin_error_handler>
		} else {
			/* do nothing, go to SYNC rx anyway*/
		}
        #ifdef OPEN_LIN_HW_BREAK_IS_SYNCH_BYTE
        open_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 800c962:	4b58      	ldr	r3, [pc, #352]	@ (800cac4 <open_lin_slave_rx_header+0x184>)
 800c964:	2202      	movs	r2, #2
 800c966:	701a      	strb	r2, [r3, #0]
        #else
		open_lin_slave_state = OPEN_LIN_SLAVE_SYNC_RX;
        #endif
        #ifdef OPEN_LIN_AUTO_BAUND
			open_lin_hw_set_auto_baud();
 800c968:	f7ff fc52 	bl	800c210 <open_lin_hw_set_auto_baud>
				open_lin_slave_reset();
				open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_DATA_RX);
				break;
		}
	}
}
 800c96c:	e0a6      	b.n	800cabc <open_lin_slave_rx_header+0x17c>
		switch (open_lin_slave_state){
 800c96e:	4b55      	ldr	r3, [pc, #340]	@ (800cac4 <open_lin_slave_rx_header+0x184>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	2b03      	cmp	r3, #3
 800c974:	d067      	beq.n	800ca46 <open_lin_slave_rx_header+0x106>
 800c976:	2b03      	cmp	r3, #3
 800c978:	f300 8099 	bgt.w	800caae <open_lin_slave_rx_header+0x16e>
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d002      	beq.n	800c986 <open_lin_slave_rx_header+0x46>
 800c980:	2b02      	cmp	r3, #2
 800c982:	d00d      	beq.n	800c9a0 <open_lin_slave_rx_header+0x60>
 800c984:	e093      	b.n	800caae <open_lin_slave_rx_header+0x16e>
				if (rx_byte != OPEN_LIN_SYNCH_BYTE)
 800c986:	79fb      	ldrb	r3, [r7, #7]
 800c988:	2b55      	cmp	r3, #85	@ 0x55
 800c98a:	d005      	beq.n	800c998 <open_lin_slave_rx_header+0x58>
					open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_SYNCH);
 800c98c:	2004      	movs	r0, #4
 800c98e:	f7ff fc13 	bl	800c1b8 <open_lin_error_handler>
					open_lin_slave_reset();
 800c992:	f7ff ffc3 	bl	800c91c <open_lin_slave_reset>
 800c996:	e003      	b.n	800c9a0 <open_lin_slave_rx_header+0x60>
					open_lin_slave_state = OPEN_LIN_SLAVE_PID_RX;
 800c998:	4b4a      	ldr	r3, [pc, #296]	@ (800cac4 <open_lin_slave_rx_header+0x184>)
 800c99a:	2202      	movs	r2, #2
 800c99c:	701a      	strb	r2, [r3, #0]
                    break;
 800c99e:	e08d      	b.n	800cabc <open_lin_slave_rx_header+0x17c>
				if (open_lin_data_layer_parity(rx_byte) == rx_byte)
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7ff fcbf 	bl	800c326 <open_lin_data_layer_parity>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d106      	bne.n	800c9c0 <open_lin_slave_rx_header+0x80>
					open_lin_data_layer_frame.pid = (open_lin_pid_t)(rx_byte & OPEN_LIN_ID_MASK);
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	4b43      	ldr	r3, [pc, #268]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9bc:	701a      	strb	r2, [r3, #0]
 800c9be:	e004      	b.n	800c9ca <open_lin_slave_rx_header+0x8a>
					open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_PID_PARITY);
 800c9c0:	2003      	movs	r0, #3
 800c9c2:	f7ff fbf9 	bl	800c1b8 <open_lin_error_handler>
					open_lin_slave_reset();
 800c9c6:	f7ff ffa9 	bl	800c91c <open_lin_slave_reset>
				if (open_lin_slave_set_lin_frame(&open_lin_data_layer_frame) == true)
 800c9ca:	483f      	ldr	r0, [pc, #252]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9cc:	f7ff ff7a 	bl	800c8c4 <open_lin_slave_set_lin_frame>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d031      	beq.n	800ca3a <open_lin_slave_rx_header+0xfa>
					if (open_lin_slave_state == OPEN_LIN_SLAVE_DATA_TX)
 800c9d6:	4b3b      	ldr	r3, [pc, #236]	@ (800cac4 <open_lin_slave_rx_header+0x184>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d16d      	bne.n	800caba <open_lin_slave_rx_header+0x17a>
						open_lin_data_layer_frame.checksum = open_lin_data_layer_checksum(open_lin_data_layer_frame.pid,
 800c9de:	4b3a      	ldr	r3, [pc, #232]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	4a39      	ldr	r2, [pc, #228]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9e4:	7851      	ldrb	r1, [r2, #1]
																open_lin_data_layer_frame.lenght, open_lin_data_layer_frame.data_ptr);
 800c9e6:	4a38      	ldr	r2, [pc, #224]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9e8:	6852      	ldr	r2, [r2, #4]
						open_lin_data_layer_frame.checksum = open_lin_data_layer_checksum(open_lin_data_layer_frame.pid,
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fce4 	bl	800c3b8 <open_lin_data_layer_checksum>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4b34      	ldr	r3, [pc, #208]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9f6:	721a      	strb	r2, [r3, #8]
						if ((open_lin_hw_tx_data(open_lin_data_layer_frame.data_ptr, open_lin_data_layer_frame.lenght) == l_false) ||
 800c9f8:	4b33      	ldr	r3, [pc, #204]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	4a32      	ldr	r2, [pc, #200]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800c9fe:	7852      	ldrb	r2, [r2, #1]
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff fc6a 	bl	800c2dc <open_lin_hw_tx_data>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f083 0301 	eor.w	r3, r3, #1
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <open_lin_slave_rx_header+0xe8>
						   (open_lin_hw_tx_data(&open_lin_data_layer_frame.checksum, (l_u8)sizeof(open_lin_data_layer_frame.checksum)) == l_false))
 800ca14:	2101      	movs	r1, #1
 800ca16:	482d      	ldr	r0, [pc, #180]	@ (800cacc <open_lin_slave_rx_header+0x18c>)
 800ca18:	f7ff fc60 	bl	800c2dc <open_lin_hw_tx_data>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	f083 0301 	eor.w	r3, r3, #1
 800ca22:	b2db      	uxtb	r3, r3
						if ((open_lin_hw_tx_data(open_lin_data_layer_frame.data_ptr, open_lin_data_layer_frame.lenght) == l_false) ||
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <open_lin_slave_rx_header+0xf4>
							open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_HW_TX);
 800ca28:	2007      	movs	r0, #7
 800ca2a:	f7ff fbc5 	bl	800c1b8 <open_lin_error_handler>
							open_lin_slave_reset();
 800ca2e:	f7ff ff75 	bl	800c91c <open_lin_slave_reset>
						break;
 800ca32:	e043      	b.n	800cabc <open_lin_slave_rx_header+0x17c>
							open_lin_slave_reset();
 800ca34:	f7ff ff72 	bl	800c91c <open_lin_slave_reset>
						break;
 800ca38:	e040      	b.n	800cabc <open_lin_slave_rx_header+0x17c>
					open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_ID_NOT_FOUND);
 800ca3a:	2006      	movs	r0, #6
 800ca3c:	f7ff fbbc 	bl	800c1b8 <open_lin_error_handler>
					open_lin_slave_reset();
 800ca40:	f7ff ff6c 	bl	800c91c <open_lin_slave_reset>
				break;
 800ca44:	e039      	b.n	800caba <open_lin_slave_rx_header+0x17a>
				if (open_lin_slave_state_data_count < open_lin_data_layer_frame.lenght)
 800ca46:	4b20      	ldr	r3, [pc, #128]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800ca48:	785a      	ldrb	r2, [r3, #1]
 800ca4a:	4b21      	ldr	r3, [pc, #132]	@ (800cad0 <open_lin_slave_rx_header+0x190>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d90c      	bls.n	800ca6c <open_lin_slave_rx_header+0x12c>
					open_lin_slave_data_buff[open_lin_slave_state_data_count] = rx_byte;
 800ca52:	4b1f      	ldr	r3, [pc, #124]	@ (800cad0 <open_lin_slave_rx_header+0x190>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	4619      	mov	r1, r3
 800ca58:	4a1e      	ldr	r2, [pc, #120]	@ (800cad4 <open_lin_slave_rx_header+0x194>)
 800ca5a:	79fb      	ldrb	r3, [r7, #7]
 800ca5c:	5453      	strb	r3, [r2, r1]
					open_lin_slave_state_data_count ++;
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	@ (800cad0 <open_lin_slave_rx_header+0x190>)
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	3301      	adds	r3, #1
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	4b1a      	ldr	r3, [pc, #104]	@ (800cad0 <open_lin_slave_rx_header+0x190>)
 800ca68:	701a      	strb	r2, [r3, #0]
				break;
 800ca6a:	e027      	b.n	800cabc <open_lin_slave_rx_header+0x17c>
					if (rx_byte == open_lin_data_layer_checksum(open_lin_data_layer_frame.pid,
 800ca6c:	4b16      	ldr	r3, [pc, #88]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	4a15      	ldr	r2, [pc, #84]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800ca72:	7851      	ldrb	r1, [r2, #1]
 800ca74:	4a17      	ldr	r2, [pc, #92]	@ (800cad4 <open_lin_slave_rx_header+0x194>)
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fc9e 	bl	800c3b8 <open_lin_data_layer_checksum>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	461a      	mov	r2, r3
 800ca80:	79fb      	ldrb	r3, [r7, #7]
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d10d      	bne.n	800caa2 <open_lin_slave_rx_header+0x162>
						open_lin_memcpy(open_lin_data_layer_frame.data_ptr,open_lin_slave_data_buff,open_lin_data_layer_frame.lenght);
 800ca86:	4b10      	ldr	r3, [pc, #64]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	4a0f      	ldr	r2, [pc, #60]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800ca8c:	7852      	ldrb	r2, [r2, #1]
 800ca8e:	4911      	ldr	r1, [pc, #68]	@ (800cad4 <open_lin_slave_rx_header+0x194>)
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 fa94 	bl	800cfbe <memcpy>
						open_lin_net_rx_handler(open_lin_data_layer_frame.pid);
 800ca96:	4b0c      	ldr	r3, [pc, #48]	@ (800cac8 <open_lin_slave_rx_header+0x188>)
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7ff ff00 	bl	800c8a0 <open_lin_net_rx_handler>
 800caa0:	e002      	b.n	800caa8 <open_lin_slave_rx_header+0x168>
						open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_CHECKSUM);
 800caa2:	2002      	movs	r0, #2
 800caa4:	f7ff fb88 	bl	800c1b8 <open_lin_error_handler>
					open_lin_slave_reset();
 800caa8:	f7ff ff38 	bl	800c91c <open_lin_slave_reset>
				break;
 800caac:	e006      	b.n	800cabc <open_lin_slave_rx_header+0x17c>
				open_lin_slave_reset();
 800caae:	f7ff ff35 	bl	800c91c <open_lin_slave_reset>
				open_lin_error_handler(OPEN_LIN_SLAVE_ERROR_INVALID_DATA_RX);
 800cab2:	2001      	movs	r0, #1
 800cab4:	f7ff fb80 	bl	800c1b8 <open_lin_error_handler>
				break;
 800cab8:	e000      	b.n	800cabc <open_lin_slave_rx_header+0x17c>
				break;
 800caba:	bf00      	nop
}
 800cabc:	bf00      	nop
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	200017a9 	.word	0x200017a9
 800cac8:	200017ac 	.word	0x200017ac
 800cacc:	200017b4 	.word	0x200017b4
 800cad0:	200017aa 	.word	0x200017aa
 800cad4:	200017b8 	.word	0x200017b8

0800cad8 <std>:
 800cad8:	2300      	movs	r3, #0
 800cada:	b510      	push	{r4, lr}
 800cadc:	4604      	mov	r4, r0
 800cade:	e9c0 3300 	strd	r3, r3, [r0]
 800cae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cae6:	6083      	str	r3, [r0, #8]
 800cae8:	8181      	strh	r1, [r0, #12]
 800caea:	6643      	str	r3, [r0, #100]	@ 0x64
 800caec:	81c2      	strh	r2, [r0, #14]
 800caee:	6183      	str	r3, [r0, #24]
 800caf0:	4619      	mov	r1, r3
 800caf2:	2208      	movs	r2, #8
 800caf4:	305c      	adds	r0, #92	@ 0x5c
 800caf6:	f000 f9e7 	bl	800cec8 <memset>
 800cafa:	4b0d      	ldr	r3, [pc, #52]	@ (800cb30 <std+0x58>)
 800cafc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cafe:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <std+0x5c>)
 800cb00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb02:	4b0d      	ldr	r3, [pc, #52]	@ (800cb38 <std+0x60>)
 800cb04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb06:	4b0d      	ldr	r3, [pc, #52]	@ (800cb3c <std+0x64>)
 800cb08:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb0a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb40 <std+0x68>)
 800cb0c:	6224      	str	r4, [r4, #32]
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d006      	beq.n	800cb20 <std+0x48>
 800cb12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb16:	4294      	cmp	r4, r2
 800cb18:	d002      	beq.n	800cb20 <std+0x48>
 800cb1a:	33d0      	adds	r3, #208	@ 0xd0
 800cb1c:	429c      	cmp	r4, r3
 800cb1e:	d105      	bne.n	800cb2c <std+0x54>
 800cb20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb28:	f000 ba46 	b.w	800cfb8 <__retarget_lock_init_recursive>
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	bf00      	nop
 800cb30:	0800cd19 	.word	0x0800cd19
 800cb34:	0800cd3b 	.word	0x0800cd3b
 800cb38:	0800cd73 	.word	0x0800cd73
 800cb3c:	0800cd97 	.word	0x0800cd97
 800cb40:	200017c0 	.word	0x200017c0

0800cb44 <stdio_exit_handler>:
 800cb44:	4a02      	ldr	r2, [pc, #8]	@ (800cb50 <stdio_exit_handler+0xc>)
 800cb46:	4903      	ldr	r1, [pc, #12]	@ (800cb54 <stdio_exit_handler+0x10>)
 800cb48:	4803      	ldr	r0, [pc, #12]	@ (800cb58 <stdio_exit_handler+0x14>)
 800cb4a:	f000 b869 	b.w	800cc20 <_fwalk_sglue>
 800cb4e:	bf00      	nop
 800cb50:	20000190 	.word	0x20000190
 800cb54:	0800d2d5 	.word	0x0800d2d5
 800cb58:	200001a0 	.word	0x200001a0

0800cb5c <cleanup_stdio>:
 800cb5c:	6841      	ldr	r1, [r0, #4]
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	@ (800cb90 <cleanup_stdio+0x34>)
 800cb60:	4299      	cmp	r1, r3
 800cb62:	b510      	push	{r4, lr}
 800cb64:	4604      	mov	r4, r0
 800cb66:	d001      	beq.n	800cb6c <cleanup_stdio+0x10>
 800cb68:	f000 fbb4 	bl	800d2d4 <_fflush_r>
 800cb6c:	68a1      	ldr	r1, [r4, #8]
 800cb6e:	4b09      	ldr	r3, [pc, #36]	@ (800cb94 <cleanup_stdio+0x38>)
 800cb70:	4299      	cmp	r1, r3
 800cb72:	d002      	beq.n	800cb7a <cleanup_stdio+0x1e>
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 fbad 	bl	800d2d4 <_fflush_r>
 800cb7a:	68e1      	ldr	r1, [r4, #12]
 800cb7c:	4b06      	ldr	r3, [pc, #24]	@ (800cb98 <cleanup_stdio+0x3c>)
 800cb7e:	4299      	cmp	r1, r3
 800cb80:	d004      	beq.n	800cb8c <cleanup_stdio+0x30>
 800cb82:	4620      	mov	r0, r4
 800cb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb88:	f000 bba4 	b.w	800d2d4 <_fflush_r>
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	bf00      	nop
 800cb90:	200017c0 	.word	0x200017c0
 800cb94:	20001828 	.word	0x20001828
 800cb98:	20001890 	.word	0x20001890

0800cb9c <global_stdio_init.part.0>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cbcc <global_stdio_init.part.0+0x30>)
 800cba0:	4c0b      	ldr	r4, [pc, #44]	@ (800cbd0 <global_stdio_init.part.0+0x34>)
 800cba2:	4a0c      	ldr	r2, [pc, #48]	@ (800cbd4 <global_stdio_init.part.0+0x38>)
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	4620      	mov	r0, r4
 800cba8:	2200      	movs	r2, #0
 800cbaa:	2104      	movs	r1, #4
 800cbac:	f7ff ff94 	bl	800cad8 <std>
 800cbb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	2109      	movs	r1, #9
 800cbb8:	f7ff ff8e 	bl	800cad8 <std>
 800cbbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc6:	2112      	movs	r1, #18
 800cbc8:	f7ff bf86 	b.w	800cad8 <std>
 800cbcc:	200018f8 	.word	0x200018f8
 800cbd0:	200017c0 	.word	0x200017c0
 800cbd4:	0800cb45 	.word	0x0800cb45

0800cbd8 <__sfp_lock_acquire>:
 800cbd8:	4801      	ldr	r0, [pc, #4]	@ (800cbe0 <__sfp_lock_acquire+0x8>)
 800cbda:	f000 b9ee 	b.w	800cfba <__retarget_lock_acquire_recursive>
 800cbde:	bf00      	nop
 800cbe0:	20001901 	.word	0x20001901

0800cbe4 <__sfp_lock_release>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	@ (800cbec <__sfp_lock_release+0x8>)
 800cbe6:	f000 b9e9 	b.w	800cfbc <__retarget_lock_release_recursive>
 800cbea:	bf00      	nop
 800cbec:	20001901 	.word	0x20001901

0800cbf0 <__sinit>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	f7ff fff0 	bl	800cbd8 <__sfp_lock_acquire>
 800cbf8:	6a23      	ldr	r3, [r4, #32]
 800cbfa:	b11b      	cbz	r3, 800cc04 <__sinit+0x14>
 800cbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc00:	f7ff bff0 	b.w	800cbe4 <__sfp_lock_release>
 800cc04:	4b04      	ldr	r3, [pc, #16]	@ (800cc18 <__sinit+0x28>)
 800cc06:	6223      	str	r3, [r4, #32]
 800cc08:	4b04      	ldr	r3, [pc, #16]	@ (800cc1c <__sinit+0x2c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f5      	bne.n	800cbfc <__sinit+0xc>
 800cc10:	f7ff ffc4 	bl	800cb9c <global_stdio_init.part.0>
 800cc14:	e7f2      	b.n	800cbfc <__sinit+0xc>
 800cc16:	bf00      	nop
 800cc18:	0800cb5d 	.word	0x0800cb5d
 800cc1c:	200018f8 	.word	0x200018f8

0800cc20 <_fwalk_sglue>:
 800cc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc24:	4607      	mov	r7, r0
 800cc26:	4688      	mov	r8, r1
 800cc28:	4614      	mov	r4, r2
 800cc2a:	2600      	movs	r6, #0
 800cc2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc30:	f1b9 0901 	subs.w	r9, r9, #1
 800cc34:	d505      	bpl.n	800cc42 <_fwalk_sglue+0x22>
 800cc36:	6824      	ldr	r4, [r4, #0]
 800cc38:	2c00      	cmp	r4, #0
 800cc3a:	d1f7      	bne.n	800cc2c <_fwalk_sglue+0xc>
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d907      	bls.n	800cc58 <_fwalk_sglue+0x38>
 800cc48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	d003      	beq.n	800cc58 <_fwalk_sglue+0x38>
 800cc50:	4629      	mov	r1, r5
 800cc52:	4638      	mov	r0, r7
 800cc54:	47c0      	blx	r8
 800cc56:	4306      	orrs	r6, r0
 800cc58:	3568      	adds	r5, #104	@ 0x68
 800cc5a:	e7e9      	b.n	800cc30 <_fwalk_sglue+0x10>

0800cc5c <_puts_r>:
 800cc5c:	6a03      	ldr	r3, [r0, #32]
 800cc5e:	b570      	push	{r4, r5, r6, lr}
 800cc60:	6884      	ldr	r4, [r0, #8]
 800cc62:	4605      	mov	r5, r0
 800cc64:	460e      	mov	r6, r1
 800cc66:	b90b      	cbnz	r3, 800cc6c <_puts_r+0x10>
 800cc68:	f7ff ffc2 	bl	800cbf0 <__sinit>
 800cc6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc6e:	07db      	lsls	r3, r3, #31
 800cc70:	d405      	bmi.n	800cc7e <_puts_r+0x22>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	0598      	lsls	r0, r3, #22
 800cc76:	d402      	bmi.n	800cc7e <_puts_r+0x22>
 800cc78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc7a:	f000 f99e 	bl	800cfba <__retarget_lock_acquire_recursive>
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	0719      	lsls	r1, r3, #28
 800cc82:	d502      	bpl.n	800cc8a <_puts_r+0x2e>
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d135      	bne.n	800ccf6 <_puts_r+0x9a>
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	f000 f8c5 	bl	800ce1c <__swsetup_r>
 800cc92:	b380      	cbz	r0, 800ccf6 <_puts_r+0x9a>
 800cc94:	f04f 35ff 	mov.w	r5, #4294967295
 800cc98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc9a:	07da      	lsls	r2, r3, #31
 800cc9c:	d405      	bmi.n	800ccaa <_puts_r+0x4e>
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	059b      	lsls	r3, r3, #22
 800cca2:	d402      	bmi.n	800ccaa <_puts_r+0x4e>
 800cca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cca6:	f000 f989 	bl	800cfbc <__retarget_lock_release_recursive>
 800ccaa:	4628      	mov	r0, r5
 800ccac:	bd70      	pop	{r4, r5, r6, pc}
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da04      	bge.n	800ccbc <_puts_r+0x60>
 800ccb2:	69a2      	ldr	r2, [r4, #24]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	dc17      	bgt.n	800cce8 <_puts_r+0x8c>
 800ccb8:	290a      	cmp	r1, #10
 800ccba:	d015      	beq.n	800cce8 <_puts_r+0x8c>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	1c5a      	adds	r2, r3, #1
 800ccc0:	6022      	str	r2, [r4, #0]
 800ccc2:	7019      	strb	r1, [r3, #0]
 800ccc4:	68a3      	ldr	r3, [r4, #8]
 800ccc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ccca:	3b01      	subs	r3, #1
 800cccc:	60a3      	str	r3, [r4, #8]
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	d1ed      	bne.n	800ccae <_puts_r+0x52>
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	da11      	bge.n	800ccfa <_puts_r+0x9e>
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	210a      	movs	r1, #10
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f000 f85f 	bl	800cd9e <__swbuf_r>
 800cce0:	3001      	adds	r0, #1
 800cce2:	d0d7      	beq.n	800cc94 <_puts_r+0x38>
 800cce4:	250a      	movs	r5, #10
 800cce6:	e7d7      	b.n	800cc98 <_puts_r+0x3c>
 800cce8:	4622      	mov	r2, r4
 800ccea:	4628      	mov	r0, r5
 800ccec:	f000 f857 	bl	800cd9e <__swbuf_r>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	d1e7      	bne.n	800ccc4 <_puts_r+0x68>
 800ccf4:	e7ce      	b.n	800cc94 <_puts_r+0x38>
 800ccf6:	3e01      	subs	r6, #1
 800ccf8:	e7e4      	b.n	800ccc4 <_puts_r+0x68>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	1c5a      	adds	r2, r3, #1
 800ccfe:	6022      	str	r2, [r4, #0]
 800cd00:	220a      	movs	r2, #10
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	e7ee      	b.n	800cce4 <_puts_r+0x88>
	...

0800cd08 <puts>:
 800cd08:	4b02      	ldr	r3, [pc, #8]	@ (800cd14 <puts+0xc>)
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	6818      	ldr	r0, [r3, #0]
 800cd0e:	f7ff bfa5 	b.w	800cc5c <_puts_r>
 800cd12:	bf00      	nop
 800cd14:	2000019c 	.word	0x2000019c

0800cd18 <__sread>:
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd20:	f000 f8fc 	bl	800cf1c <_read_r>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	bfab      	itete	ge
 800cd28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd2a:	89a3      	ldrhlt	r3, [r4, #12]
 800cd2c:	181b      	addge	r3, r3, r0
 800cd2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd32:	bfac      	ite	ge
 800cd34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd36:	81a3      	strhlt	r3, [r4, #12]
 800cd38:	bd10      	pop	{r4, pc}

0800cd3a <__swrite>:
 800cd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3e:	461f      	mov	r7, r3
 800cd40:	898b      	ldrh	r3, [r1, #12]
 800cd42:	05db      	lsls	r3, r3, #23
 800cd44:	4605      	mov	r5, r0
 800cd46:	460c      	mov	r4, r1
 800cd48:	4616      	mov	r6, r2
 800cd4a:	d505      	bpl.n	800cd58 <__swrite+0x1e>
 800cd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd50:	2302      	movs	r3, #2
 800cd52:	2200      	movs	r2, #0
 800cd54:	f000 f8d0 	bl	800cef8 <_lseek_r>
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd62:	81a3      	strh	r3, [r4, #12]
 800cd64:	4632      	mov	r2, r6
 800cd66:	463b      	mov	r3, r7
 800cd68:	4628      	mov	r0, r5
 800cd6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6e:	f000 b8e7 	b.w	800cf40 <_write_r>

0800cd72 <__sseek>:
 800cd72:	b510      	push	{r4, lr}
 800cd74:	460c      	mov	r4, r1
 800cd76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd7a:	f000 f8bd 	bl	800cef8 <_lseek_r>
 800cd7e:	1c43      	adds	r3, r0, #1
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	bf15      	itete	ne
 800cd84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd8e:	81a3      	strheq	r3, [r4, #12]
 800cd90:	bf18      	it	ne
 800cd92:	81a3      	strhne	r3, [r4, #12]
 800cd94:	bd10      	pop	{r4, pc}

0800cd96 <__sclose>:
 800cd96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd9a:	f000 b89d 	b.w	800ced8 <_close_r>

0800cd9e <__swbuf_r>:
 800cd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda0:	460e      	mov	r6, r1
 800cda2:	4614      	mov	r4, r2
 800cda4:	4605      	mov	r5, r0
 800cda6:	b118      	cbz	r0, 800cdb0 <__swbuf_r+0x12>
 800cda8:	6a03      	ldr	r3, [r0, #32]
 800cdaa:	b90b      	cbnz	r3, 800cdb0 <__swbuf_r+0x12>
 800cdac:	f7ff ff20 	bl	800cbf0 <__sinit>
 800cdb0:	69a3      	ldr	r3, [r4, #24]
 800cdb2:	60a3      	str	r3, [r4, #8]
 800cdb4:	89a3      	ldrh	r3, [r4, #12]
 800cdb6:	071a      	lsls	r2, r3, #28
 800cdb8:	d501      	bpl.n	800cdbe <__swbuf_r+0x20>
 800cdba:	6923      	ldr	r3, [r4, #16]
 800cdbc:	b943      	cbnz	r3, 800cdd0 <__swbuf_r+0x32>
 800cdbe:	4621      	mov	r1, r4
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f000 f82b 	bl	800ce1c <__swsetup_r>
 800cdc6:	b118      	cbz	r0, 800cdd0 <__swbuf_r+0x32>
 800cdc8:	f04f 37ff 	mov.w	r7, #4294967295
 800cdcc:	4638      	mov	r0, r7
 800cdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	6922      	ldr	r2, [r4, #16]
 800cdd4:	1a98      	subs	r0, r3, r2
 800cdd6:	6963      	ldr	r3, [r4, #20]
 800cdd8:	b2f6      	uxtb	r6, r6
 800cdda:	4283      	cmp	r3, r0
 800cddc:	4637      	mov	r7, r6
 800cdde:	dc05      	bgt.n	800cdec <__swbuf_r+0x4e>
 800cde0:	4621      	mov	r1, r4
 800cde2:	4628      	mov	r0, r5
 800cde4:	f000 fa76 	bl	800d2d4 <_fflush_r>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d1ed      	bne.n	800cdc8 <__swbuf_r+0x2a>
 800cdec:	68a3      	ldr	r3, [r4, #8]
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	60a3      	str	r3, [r4, #8]
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	6022      	str	r2, [r4, #0]
 800cdf8:	701e      	strb	r6, [r3, #0]
 800cdfa:	6962      	ldr	r2, [r4, #20]
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d004      	beq.n	800ce0c <__swbuf_r+0x6e>
 800ce02:	89a3      	ldrh	r3, [r4, #12]
 800ce04:	07db      	lsls	r3, r3, #31
 800ce06:	d5e1      	bpl.n	800cdcc <__swbuf_r+0x2e>
 800ce08:	2e0a      	cmp	r6, #10
 800ce0a:	d1df      	bne.n	800cdcc <__swbuf_r+0x2e>
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 fa60 	bl	800d2d4 <_fflush_r>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d0d9      	beq.n	800cdcc <__swbuf_r+0x2e>
 800ce18:	e7d6      	b.n	800cdc8 <__swbuf_r+0x2a>
	...

0800ce1c <__swsetup_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4b29      	ldr	r3, [pc, #164]	@ (800cec4 <__swsetup_r+0xa8>)
 800ce20:	4605      	mov	r5, r0
 800ce22:	6818      	ldr	r0, [r3, #0]
 800ce24:	460c      	mov	r4, r1
 800ce26:	b118      	cbz	r0, 800ce30 <__swsetup_r+0x14>
 800ce28:	6a03      	ldr	r3, [r0, #32]
 800ce2a:	b90b      	cbnz	r3, 800ce30 <__swsetup_r+0x14>
 800ce2c:	f7ff fee0 	bl	800cbf0 <__sinit>
 800ce30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce34:	0719      	lsls	r1, r3, #28
 800ce36:	d422      	bmi.n	800ce7e <__swsetup_r+0x62>
 800ce38:	06da      	lsls	r2, r3, #27
 800ce3a:	d407      	bmi.n	800ce4c <__swsetup_r+0x30>
 800ce3c:	2209      	movs	r2, #9
 800ce3e:	602a      	str	r2, [r5, #0]
 800ce40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce44:	81a3      	strh	r3, [r4, #12]
 800ce46:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4a:	e033      	b.n	800ceb4 <__swsetup_r+0x98>
 800ce4c:	0758      	lsls	r0, r3, #29
 800ce4e:	d512      	bpl.n	800ce76 <__swsetup_r+0x5a>
 800ce50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce52:	b141      	cbz	r1, 800ce66 <__swsetup_r+0x4a>
 800ce54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce58:	4299      	cmp	r1, r3
 800ce5a:	d002      	beq.n	800ce62 <__swsetup_r+0x46>
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	f000 f8bd 	bl	800cfdc <_free_r>
 800ce62:	2300      	movs	r3, #0
 800ce64:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce6c:	81a3      	strh	r3, [r4, #12]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	6063      	str	r3, [r4, #4]
 800ce72:	6923      	ldr	r3, [r4, #16]
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	f043 0308 	orr.w	r3, r3, #8
 800ce7c:	81a3      	strh	r3, [r4, #12]
 800ce7e:	6923      	ldr	r3, [r4, #16]
 800ce80:	b94b      	cbnz	r3, 800ce96 <__swsetup_r+0x7a>
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce8c:	d003      	beq.n	800ce96 <__swsetup_r+0x7a>
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4628      	mov	r0, r5
 800ce92:	f000 fa6d 	bl	800d370 <__smakebuf_r>
 800ce96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9a:	f013 0201 	ands.w	r2, r3, #1
 800ce9e:	d00a      	beq.n	800ceb6 <__swsetup_r+0x9a>
 800cea0:	2200      	movs	r2, #0
 800cea2:	60a2      	str	r2, [r4, #8]
 800cea4:	6962      	ldr	r2, [r4, #20]
 800cea6:	4252      	negs	r2, r2
 800cea8:	61a2      	str	r2, [r4, #24]
 800ceaa:	6922      	ldr	r2, [r4, #16]
 800ceac:	b942      	cbnz	r2, 800cec0 <__swsetup_r+0xa4>
 800ceae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ceb2:	d1c5      	bne.n	800ce40 <__swsetup_r+0x24>
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	0799      	lsls	r1, r3, #30
 800ceb8:	bf58      	it	pl
 800ceba:	6962      	ldrpl	r2, [r4, #20]
 800cebc:	60a2      	str	r2, [r4, #8]
 800cebe:	e7f4      	b.n	800ceaa <__swsetup_r+0x8e>
 800cec0:	2000      	movs	r0, #0
 800cec2:	e7f7      	b.n	800ceb4 <__swsetup_r+0x98>
 800cec4:	2000019c 	.word	0x2000019c

0800cec8 <memset>:
 800cec8:	4402      	add	r2, r0
 800ceca:	4603      	mov	r3, r0
 800cecc:	4293      	cmp	r3, r2
 800cece:	d100      	bne.n	800ced2 <memset+0xa>
 800ced0:	4770      	bx	lr
 800ced2:	f803 1b01 	strb.w	r1, [r3], #1
 800ced6:	e7f9      	b.n	800cecc <memset+0x4>

0800ced8 <_close_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d06      	ldr	r5, [pc, #24]	@ (800cef4 <_close_r+0x1c>)
 800cedc:	2300      	movs	r3, #0
 800cede:	4604      	mov	r4, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	f7f4 fccd 	bl	8001882 <_close>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_close_r+0x1a>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_close_r+0x1a>
 800cef0:	6023      	str	r3, [r4, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	200018fc 	.word	0x200018fc

0800cef8 <_lseek_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4d07      	ldr	r5, [pc, #28]	@ (800cf18 <_lseek_r+0x20>)
 800cefc:	4604      	mov	r4, r0
 800cefe:	4608      	mov	r0, r1
 800cf00:	4611      	mov	r1, r2
 800cf02:	2200      	movs	r2, #0
 800cf04:	602a      	str	r2, [r5, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	f7f4 fce2 	bl	80018d0 <_lseek>
 800cf0c:	1c43      	adds	r3, r0, #1
 800cf0e:	d102      	bne.n	800cf16 <_lseek_r+0x1e>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	b103      	cbz	r3, 800cf16 <_lseek_r+0x1e>
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	200018fc 	.word	0x200018fc

0800cf1c <_read_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d07      	ldr	r5, [pc, #28]	@ (800cf3c <_read_r+0x20>)
 800cf20:	4604      	mov	r4, r0
 800cf22:	4608      	mov	r0, r1
 800cf24:	4611      	mov	r1, r2
 800cf26:	2200      	movs	r2, #0
 800cf28:	602a      	str	r2, [r5, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	f7f4 fc70 	bl	8001810 <_read>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_read_r+0x1e>
 800cf34:	682b      	ldr	r3, [r5, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_read_r+0x1e>
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	200018fc 	.word	0x200018fc

0800cf40 <_write_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d07      	ldr	r5, [pc, #28]	@ (800cf60 <_write_r+0x20>)
 800cf44:	4604      	mov	r4, r0
 800cf46:	4608      	mov	r0, r1
 800cf48:	4611      	mov	r1, r2
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	602a      	str	r2, [r5, #0]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f7f4 fc7b 	bl	800184a <_write>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_write_r+0x1e>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_write_r+0x1e>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	200018fc 	.word	0x200018fc

0800cf64 <__errno>:
 800cf64:	4b01      	ldr	r3, [pc, #4]	@ (800cf6c <__errno+0x8>)
 800cf66:	6818      	ldr	r0, [r3, #0]
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	2000019c 	.word	0x2000019c

0800cf70 <__libc_init_array>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	4d0d      	ldr	r5, [pc, #52]	@ (800cfa8 <__libc_init_array+0x38>)
 800cf74:	4c0d      	ldr	r4, [pc, #52]	@ (800cfac <__libc_init_array+0x3c>)
 800cf76:	1b64      	subs	r4, r4, r5
 800cf78:	10a4      	asrs	r4, r4, #2
 800cf7a:	2600      	movs	r6, #0
 800cf7c:	42a6      	cmp	r6, r4
 800cf7e:	d109      	bne.n	800cf94 <__libc_init_array+0x24>
 800cf80:	4d0b      	ldr	r5, [pc, #44]	@ (800cfb0 <__libc_init_array+0x40>)
 800cf82:	4c0c      	ldr	r4, [pc, #48]	@ (800cfb4 <__libc_init_array+0x44>)
 800cf84:	f000 fa62 	bl	800d44c <_init>
 800cf88:	1b64      	subs	r4, r4, r5
 800cf8a:	10a4      	asrs	r4, r4, #2
 800cf8c:	2600      	movs	r6, #0
 800cf8e:	42a6      	cmp	r6, r4
 800cf90:	d105      	bne.n	800cf9e <__libc_init_array+0x2e>
 800cf92:	bd70      	pop	{r4, r5, r6, pc}
 800cf94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf98:	4798      	blx	r3
 800cf9a:	3601      	adds	r6, #1
 800cf9c:	e7ee      	b.n	800cf7c <__libc_init_array+0xc>
 800cf9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfa2:	4798      	blx	r3
 800cfa4:	3601      	adds	r6, #1
 800cfa6:	e7f2      	b.n	800cf8e <__libc_init_array+0x1e>
 800cfa8:	0800d4fc 	.word	0x0800d4fc
 800cfac:	0800d4fc 	.word	0x0800d4fc
 800cfb0:	0800d4fc 	.word	0x0800d4fc
 800cfb4:	0800d500 	.word	0x0800d500

0800cfb8 <__retarget_lock_init_recursive>:
 800cfb8:	4770      	bx	lr

0800cfba <__retarget_lock_acquire_recursive>:
 800cfba:	4770      	bx	lr

0800cfbc <__retarget_lock_release_recursive>:
 800cfbc:	4770      	bx	lr

0800cfbe <memcpy>:
 800cfbe:	440a      	add	r2, r1
 800cfc0:	4291      	cmp	r1, r2
 800cfc2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfc6:	d100      	bne.n	800cfca <memcpy+0xc>
 800cfc8:	4770      	bx	lr
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfd4:	4291      	cmp	r1, r2
 800cfd6:	d1f9      	bne.n	800cfcc <memcpy+0xe>
 800cfd8:	bd10      	pop	{r4, pc}
	...

0800cfdc <_free_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4605      	mov	r5, r0
 800cfe0:	2900      	cmp	r1, #0
 800cfe2:	d041      	beq.n	800d068 <_free_r+0x8c>
 800cfe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfe8:	1f0c      	subs	r4, r1, #4
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	bfb8      	it	lt
 800cfee:	18e4      	addlt	r4, r4, r3
 800cff0:	f000 f8e0 	bl	800d1b4 <__malloc_lock>
 800cff4:	4a1d      	ldr	r2, [pc, #116]	@ (800d06c <_free_r+0x90>)
 800cff6:	6813      	ldr	r3, [r2, #0]
 800cff8:	b933      	cbnz	r3, 800d008 <_free_r+0x2c>
 800cffa:	6063      	str	r3, [r4, #4]
 800cffc:	6014      	str	r4, [r2, #0]
 800cffe:	4628      	mov	r0, r5
 800d000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d004:	f000 b8dc 	b.w	800d1c0 <__malloc_unlock>
 800d008:	42a3      	cmp	r3, r4
 800d00a:	d908      	bls.n	800d01e <_free_r+0x42>
 800d00c:	6820      	ldr	r0, [r4, #0]
 800d00e:	1821      	adds	r1, r4, r0
 800d010:	428b      	cmp	r3, r1
 800d012:	bf01      	itttt	eq
 800d014:	6819      	ldreq	r1, [r3, #0]
 800d016:	685b      	ldreq	r3, [r3, #4]
 800d018:	1809      	addeq	r1, r1, r0
 800d01a:	6021      	streq	r1, [r4, #0]
 800d01c:	e7ed      	b.n	800cffa <_free_r+0x1e>
 800d01e:	461a      	mov	r2, r3
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	b10b      	cbz	r3, 800d028 <_free_r+0x4c>
 800d024:	42a3      	cmp	r3, r4
 800d026:	d9fa      	bls.n	800d01e <_free_r+0x42>
 800d028:	6811      	ldr	r1, [r2, #0]
 800d02a:	1850      	adds	r0, r2, r1
 800d02c:	42a0      	cmp	r0, r4
 800d02e:	d10b      	bne.n	800d048 <_free_r+0x6c>
 800d030:	6820      	ldr	r0, [r4, #0]
 800d032:	4401      	add	r1, r0
 800d034:	1850      	adds	r0, r2, r1
 800d036:	4283      	cmp	r3, r0
 800d038:	6011      	str	r1, [r2, #0]
 800d03a:	d1e0      	bne.n	800cffe <_free_r+0x22>
 800d03c:	6818      	ldr	r0, [r3, #0]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	6053      	str	r3, [r2, #4]
 800d042:	4408      	add	r0, r1
 800d044:	6010      	str	r0, [r2, #0]
 800d046:	e7da      	b.n	800cffe <_free_r+0x22>
 800d048:	d902      	bls.n	800d050 <_free_r+0x74>
 800d04a:	230c      	movs	r3, #12
 800d04c:	602b      	str	r3, [r5, #0]
 800d04e:	e7d6      	b.n	800cffe <_free_r+0x22>
 800d050:	6820      	ldr	r0, [r4, #0]
 800d052:	1821      	adds	r1, r4, r0
 800d054:	428b      	cmp	r3, r1
 800d056:	bf04      	itt	eq
 800d058:	6819      	ldreq	r1, [r3, #0]
 800d05a:	685b      	ldreq	r3, [r3, #4]
 800d05c:	6063      	str	r3, [r4, #4]
 800d05e:	bf04      	itt	eq
 800d060:	1809      	addeq	r1, r1, r0
 800d062:	6021      	streq	r1, [r4, #0]
 800d064:	6054      	str	r4, [r2, #4]
 800d066:	e7ca      	b.n	800cffe <_free_r+0x22>
 800d068:	bd38      	pop	{r3, r4, r5, pc}
 800d06a:	bf00      	nop
 800d06c:	20001908 	.word	0x20001908

0800d070 <sbrk_aligned>:
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	4e0f      	ldr	r6, [pc, #60]	@ (800d0b0 <sbrk_aligned+0x40>)
 800d074:	460c      	mov	r4, r1
 800d076:	6831      	ldr	r1, [r6, #0]
 800d078:	4605      	mov	r5, r0
 800d07a:	b911      	cbnz	r1, 800d082 <sbrk_aligned+0x12>
 800d07c:	f000 f9d6 	bl	800d42c <_sbrk_r>
 800d080:	6030      	str	r0, [r6, #0]
 800d082:	4621      	mov	r1, r4
 800d084:	4628      	mov	r0, r5
 800d086:	f000 f9d1 	bl	800d42c <_sbrk_r>
 800d08a:	1c43      	adds	r3, r0, #1
 800d08c:	d103      	bne.n	800d096 <sbrk_aligned+0x26>
 800d08e:	f04f 34ff 	mov.w	r4, #4294967295
 800d092:	4620      	mov	r0, r4
 800d094:	bd70      	pop	{r4, r5, r6, pc}
 800d096:	1cc4      	adds	r4, r0, #3
 800d098:	f024 0403 	bic.w	r4, r4, #3
 800d09c:	42a0      	cmp	r0, r4
 800d09e:	d0f8      	beq.n	800d092 <sbrk_aligned+0x22>
 800d0a0:	1a21      	subs	r1, r4, r0
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f000 f9c2 	bl	800d42c <_sbrk_r>
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	d1f2      	bne.n	800d092 <sbrk_aligned+0x22>
 800d0ac:	e7ef      	b.n	800d08e <sbrk_aligned+0x1e>
 800d0ae:	bf00      	nop
 800d0b0:	20001904 	.word	0x20001904

0800d0b4 <_malloc_r>:
 800d0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b8:	1ccd      	adds	r5, r1, #3
 800d0ba:	f025 0503 	bic.w	r5, r5, #3
 800d0be:	3508      	adds	r5, #8
 800d0c0:	2d0c      	cmp	r5, #12
 800d0c2:	bf38      	it	cc
 800d0c4:	250c      	movcc	r5, #12
 800d0c6:	2d00      	cmp	r5, #0
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	db01      	blt.n	800d0d0 <_malloc_r+0x1c>
 800d0cc:	42a9      	cmp	r1, r5
 800d0ce:	d904      	bls.n	800d0da <_malloc_r+0x26>
 800d0d0:	230c      	movs	r3, #12
 800d0d2:	6033      	str	r3, [r6, #0]
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1b0 <_malloc_r+0xfc>
 800d0de:	f000 f869 	bl	800d1b4 <__malloc_lock>
 800d0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e6:	461c      	mov	r4, r3
 800d0e8:	bb44      	cbnz	r4, 800d13c <_malloc_r+0x88>
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7ff ffbf 	bl	800d070 <sbrk_aligned>
 800d0f2:	1c43      	adds	r3, r0, #1
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	d158      	bne.n	800d1aa <_malloc_r+0xf6>
 800d0f8:	f8d8 4000 	ldr.w	r4, [r8]
 800d0fc:	4627      	mov	r7, r4
 800d0fe:	2f00      	cmp	r7, #0
 800d100:	d143      	bne.n	800d18a <_malloc_r+0xd6>
 800d102:	2c00      	cmp	r4, #0
 800d104:	d04b      	beq.n	800d19e <_malloc_r+0xea>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	4639      	mov	r1, r7
 800d10a:	4630      	mov	r0, r6
 800d10c:	eb04 0903 	add.w	r9, r4, r3
 800d110:	f000 f98c 	bl	800d42c <_sbrk_r>
 800d114:	4581      	cmp	r9, r0
 800d116:	d142      	bne.n	800d19e <_malloc_r+0xea>
 800d118:	6821      	ldr	r1, [r4, #0]
 800d11a:	1a6d      	subs	r5, r5, r1
 800d11c:	4629      	mov	r1, r5
 800d11e:	4630      	mov	r0, r6
 800d120:	f7ff ffa6 	bl	800d070 <sbrk_aligned>
 800d124:	3001      	adds	r0, #1
 800d126:	d03a      	beq.n	800d19e <_malloc_r+0xea>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	442b      	add	r3, r5
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	f8d8 3000 	ldr.w	r3, [r8]
 800d132:	685a      	ldr	r2, [r3, #4]
 800d134:	bb62      	cbnz	r2, 800d190 <_malloc_r+0xdc>
 800d136:	f8c8 7000 	str.w	r7, [r8]
 800d13a:	e00f      	b.n	800d15c <_malloc_r+0xa8>
 800d13c:	6822      	ldr	r2, [r4, #0]
 800d13e:	1b52      	subs	r2, r2, r5
 800d140:	d420      	bmi.n	800d184 <_malloc_r+0xd0>
 800d142:	2a0b      	cmp	r2, #11
 800d144:	d917      	bls.n	800d176 <_malloc_r+0xc2>
 800d146:	1961      	adds	r1, r4, r5
 800d148:	42a3      	cmp	r3, r4
 800d14a:	6025      	str	r5, [r4, #0]
 800d14c:	bf18      	it	ne
 800d14e:	6059      	strne	r1, [r3, #4]
 800d150:	6863      	ldr	r3, [r4, #4]
 800d152:	bf08      	it	eq
 800d154:	f8c8 1000 	streq.w	r1, [r8]
 800d158:	5162      	str	r2, [r4, r5]
 800d15a:	604b      	str	r3, [r1, #4]
 800d15c:	4630      	mov	r0, r6
 800d15e:	f000 f82f 	bl	800d1c0 <__malloc_unlock>
 800d162:	f104 000b 	add.w	r0, r4, #11
 800d166:	1d23      	adds	r3, r4, #4
 800d168:	f020 0007 	bic.w	r0, r0, #7
 800d16c:	1ac2      	subs	r2, r0, r3
 800d16e:	bf1c      	itt	ne
 800d170:	1a1b      	subne	r3, r3, r0
 800d172:	50a3      	strne	r3, [r4, r2]
 800d174:	e7af      	b.n	800d0d6 <_malloc_r+0x22>
 800d176:	6862      	ldr	r2, [r4, #4]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	bf0c      	ite	eq
 800d17c:	f8c8 2000 	streq.w	r2, [r8]
 800d180:	605a      	strne	r2, [r3, #4]
 800d182:	e7eb      	b.n	800d15c <_malloc_r+0xa8>
 800d184:	4623      	mov	r3, r4
 800d186:	6864      	ldr	r4, [r4, #4]
 800d188:	e7ae      	b.n	800d0e8 <_malloc_r+0x34>
 800d18a:	463c      	mov	r4, r7
 800d18c:	687f      	ldr	r7, [r7, #4]
 800d18e:	e7b6      	b.n	800d0fe <_malloc_r+0x4a>
 800d190:	461a      	mov	r2, r3
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	42a3      	cmp	r3, r4
 800d196:	d1fb      	bne.n	800d190 <_malloc_r+0xdc>
 800d198:	2300      	movs	r3, #0
 800d19a:	6053      	str	r3, [r2, #4]
 800d19c:	e7de      	b.n	800d15c <_malloc_r+0xa8>
 800d19e:	230c      	movs	r3, #12
 800d1a0:	6033      	str	r3, [r6, #0]
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f000 f80c 	bl	800d1c0 <__malloc_unlock>
 800d1a8:	e794      	b.n	800d0d4 <_malloc_r+0x20>
 800d1aa:	6005      	str	r5, [r0, #0]
 800d1ac:	e7d6      	b.n	800d15c <_malloc_r+0xa8>
 800d1ae:	bf00      	nop
 800d1b0:	20001908 	.word	0x20001908

0800d1b4 <__malloc_lock>:
 800d1b4:	4801      	ldr	r0, [pc, #4]	@ (800d1bc <__malloc_lock+0x8>)
 800d1b6:	f7ff bf00 	b.w	800cfba <__retarget_lock_acquire_recursive>
 800d1ba:	bf00      	nop
 800d1bc:	20001900 	.word	0x20001900

0800d1c0 <__malloc_unlock>:
 800d1c0:	4801      	ldr	r0, [pc, #4]	@ (800d1c8 <__malloc_unlock+0x8>)
 800d1c2:	f7ff befb 	b.w	800cfbc <__retarget_lock_release_recursive>
 800d1c6:	bf00      	nop
 800d1c8:	20001900 	.word	0x20001900

0800d1cc <__sflush_r>:
 800d1cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d4:	0716      	lsls	r6, r2, #28
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	460c      	mov	r4, r1
 800d1da:	d454      	bmi.n	800d286 <__sflush_r+0xba>
 800d1dc:	684b      	ldr	r3, [r1, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	dc02      	bgt.n	800d1e8 <__sflush_r+0x1c>
 800d1e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dd48      	ble.n	800d27a <__sflush_r+0xae>
 800d1e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	d045      	beq.n	800d27a <__sflush_r+0xae>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1f4:	682f      	ldr	r7, [r5, #0]
 800d1f6:	6a21      	ldr	r1, [r4, #32]
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	d030      	beq.n	800d25e <__sflush_r+0x92>
 800d1fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	0759      	lsls	r1, r3, #29
 800d202:	d505      	bpl.n	800d210 <__sflush_r+0x44>
 800d204:	6863      	ldr	r3, [r4, #4]
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d20a:	b10b      	cbz	r3, 800d210 <__sflush_r+0x44>
 800d20c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d20e:	1ad2      	subs	r2, r2, r3
 800d210:	2300      	movs	r3, #0
 800d212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d214:	6a21      	ldr	r1, [r4, #32]
 800d216:	4628      	mov	r0, r5
 800d218:	47b0      	blx	r6
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	d106      	bne.n	800d22e <__sflush_r+0x62>
 800d220:	6829      	ldr	r1, [r5, #0]
 800d222:	291d      	cmp	r1, #29
 800d224:	d82b      	bhi.n	800d27e <__sflush_r+0xb2>
 800d226:	4a2a      	ldr	r2, [pc, #168]	@ (800d2d0 <__sflush_r+0x104>)
 800d228:	410a      	asrs	r2, r1
 800d22a:	07d6      	lsls	r6, r2, #31
 800d22c:	d427      	bmi.n	800d27e <__sflush_r+0xb2>
 800d22e:	2200      	movs	r2, #0
 800d230:	6062      	str	r2, [r4, #4]
 800d232:	04d9      	lsls	r1, r3, #19
 800d234:	6922      	ldr	r2, [r4, #16]
 800d236:	6022      	str	r2, [r4, #0]
 800d238:	d504      	bpl.n	800d244 <__sflush_r+0x78>
 800d23a:	1c42      	adds	r2, r0, #1
 800d23c:	d101      	bne.n	800d242 <__sflush_r+0x76>
 800d23e:	682b      	ldr	r3, [r5, #0]
 800d240:	b903      	cbnz	r3, 800d244 <__sflush_r+0x78>
 800d242:	6560      	str	r0, [r4, #84]	@ 0x54
 800d244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d246:	602f      	str	r7, [r5, #0]
 800d248:	b1b9      	cbz	r1, 800d27a <__sflush_r+0xae>
 800d24a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d24e:	4299      	cmp	r1, r3
 800d250:	d002      	beq.n	800d258 <__sflush_r+0x8c>
 800d252:	4628      	mov	r0, r5
 800d254:	f7ff fec2 	bl	800cfdc <_free_r>
 800d258:	2300      	movs	r3, #0
 800d25a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d25c:	e00d      	b.n	800d27a <__sflush_r+0xae>
 800d25e:	2301      	movs	r3, #1
 800d260:	4628      	mov	r0, r5
 800d262:	47b0      	blx	r6
 800d264:	4602      	mov	r2, r0
 800d266:	1c50      	adds	r0, r2, #1
 800d268:	d1c9      	bne.n	800d1fe <__sflush_r+0x32>
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0c6      	beq.n	800d1fe <__sflush_r+0x32>
 800d270:	2b1d      	cmp	r3, #29
 800d272:	d001      	beq.n	800d278 <__sflush_r+0xac>
 800d274:	2b16      	cmp	r3, #22
 800d276:	d11e      	bne.n	800d2b6 <__sflush_r+0xea>
 800d278:	602f      	str	r7, [r5, #0]
 800d27a:	2000      	movs	r0, #0
 800d27c:	e022      	b.n	800d2c4 <__sflush_r+0xf8>
 800d27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d282:	b21b      	sxth	r3, r3
 800d284:	e01b      	b.n	800d2be <__sflush_r+0xf2>
 800d286:	690f      	ldr	r7, [r1, #16]
 800d288:	2f00      	cmp	r7, #0
 800d28a:	d0f6      	beq.n	800d27a <__sflush_r+0xae>
 800d28c:	0793      	lsls	r3, r2, #30
 800d28e:	680e      	ldr	r6, [r1, #0]
 800d290:	bf08      	it	eq
 800d292:	694b      	ldreq	r3, [r1, #20]
 800d294:	600f      	str	r7, [r1, #0]
 800d296:	bf18      	it	ne
 800d298:	2300      	movne	r3, #0
 800d29a:	eba6 0807 	sub.w	r8, r6, r7
 800d29e:	608b      	str	r3, [r1, #8]
 800d2a0:	f1b8 0f00 	cmp.w	r8, #0
 800d2a4:	dde9      	ble.n	800d27a <__sflush_r+0xae>
 800d2a6:	6a21      	ldr	r1, [r4, #32]
 800d2a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2aa:	4643      	mov	r3, r8
 800d2ac:	463a      	mov	r2, r7
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b0      	blx	r6
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	dc08      	bgt.n	800d2c8 <__sflush_r+0xfc>
 800d2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2be:	81a3      	strh	r3, [r4, #12]
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c8:	4407      	add	r7, r0
 800d2ca:	eba8 0800 	sub.w	r8, r8, r0
 800d2ce:	e7e7      	b.n	800d2a0 <__sflush_r+0xd4>
 800d2d0:	dfbffffe 	.word	0xdfbffffe

0800d2d4 <_fflush_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	690b      	ldr	r3, [r1, #16]
 800d2d8:	4605      	mov	r5, r0
 800d2da:	460c      	mov	r4, r1
 800d2dc:	b913      	cbnz	r3, 800d2e4 <_fflush_r+0x10>
 800d2de:	2500      	movs	r5, #0
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	b118      	cbz	r0, 800d2ee <_fflush_r+0x1a>
 800d2e6:	6a03      	ldr	r3, [r0, #32]
 800d2e8:	b90b      	cbnz	r3, 800d2ee <_fflush_r+0x1a>
 800d2ea:	f7ff fc81 	bl	800cbf0 <__sinit>
 800d2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d0f3      	beq.n	800d2de <_fflush_r+0xa>
 800d2f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2f8:	07d0      	lsls	r0, r2, #31
 800d2fa:	d404      	bmi.n	800d306 <_fflush_r+0x32>
 800d2fc:	0599      	lsls	r1, r3, #22
 800d2fe:	d402      	bmi.n	800d306 <_fflush_r+0x32>
 800d300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d302:	f7ff fe5a 	bl	800cfba <__retarget_lock_acquire_recursive>
 800d306:	4628      	mov	r0, r5
 800d308:	4621      	mov	r1, r4
 800d30a:	f7ff ff5f 	bl	800d1cc <__sflush_r>
 800d30e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d310:	07da      	lsls	r2, r3, #31
 800d312:	4605      	mov	r5, r0
 800d314:	d4e4      	bmi.n	800d2e0 <_fflush_r+0xc>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	059b      	lsls	r3, r3, #22
 800d31a:	d4e1      	bmi.n	800d2e0 <_fflush_r+0xc>
 800d31c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d31e:	f7ff fe4d 	bl	800cfbc <__retarget_lock_release_recursive>
 800d322:	e7dd      	b.n	800d2e0 <_fflush_r+0xc>

0800d324 <__swhatbuf_r>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	460c      	mov	r4, r1
 800d328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32c:	2900      	cmp	r1, #0
 800d32e:	b096      	sub	sp, #88	@ 0x58
 800d330:	4615      	mov	r5, r2
 800d332:	461e      	mov	r6, r3
 800d334:	da0d      	bge.n	800d352 <__swhatbuf_r+0x2e>
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d33c:	f04f 0100 	mov.w	r1, #0
 800d340:	bf14      	ite	ne
 800d342:	2340      	movne	r3, #64	@ 0x40
 800d344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d348:	2000      	movs	r0, #0
 800d34a:	6031      	str	r1, [r6, #0]
 800d34c:	602b      	str	r3, [r5, #0]
 800d34e:	b016      	add	sp, #88	@ 0x58
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	466a      	mov	r2, sp
 800d354:	f000 f848 	bl	800d3e8 <_fstat_r>
 800d358:	2800      	cmp	r0, #0
 800d35a:	dbec      	blt.n	800d336 <__swhatbuf_r+0x12>
 800d35c:	9901      	ldr	r1, [sp, #4]
 800d35e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d366:	4259      	negs	r1, r3
 800d368:	4159      	adcs	r1, r3
 800d36a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d36e:	e7eb      	b.n	800d348 <__swhatbuf_r+0x24>

0800d370 <__smakebuf_r>:
 800d370:	898b      	ldrh	r3, [r1, #12]
 800d372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d374:	079d      	lsls	r5, r3, #30
 800d376:	4606      	mov	r6, r0
 800d378:	460c      	mov	r4, r1
 800d37a:	d507      	bpl.n	800d38c <__smakebuf_r+0x1c>
 800d37c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	6123      	str	r3, [r4, #16]
 800d384:	2301      	movs	r3, #1
 800d386:	6163      	str	r3, [r4, #20]
 800d388:	b003      	add	sp, #12
 800d38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d38c:	ab01      	add	r3, sp, #4
 800d38e:	466a      	mov	r2, sp
 800d390:	f7ff ffc8 	bl	800d324 <__swhatbuf_r>
 800d394:	9f00      	ldr	r7, [sp, #0]
 800d396:	4605      	mov	r5, r0
 800d398:	4639      	mov	r1, r7
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7ff fe8a 	bl	800d0b4 <_malloc_r>
 800d3a0:	b948      	cbnz	r0, 800d3b6 <__smakebuf_r+0x46>
 800d3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a6:	059a      	lsls	r2, r3, #22
 800d3a8:	d4ee      	bmi.n	800d388 <__smakebuf_r+0x18>
 800d3aa:	f023 0303 	bic.w	r3, r3, #3
 800d3ae:	f043 0302 	orr.w	r3, r3, #2
 800d3b2:	81a3      	strh	r3, [r4, #12]
 800d3b4:	e7e2      	b.n	800d37c <__smakebuf_r+0xc>
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	6020      	str	r0, [r4, #0]
 800d3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3be:	81a3      	strh	r3, [r4, #12]
 800d3c0:	9b01      	ldr	r3, [sp, #4]
 800d3c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3c6:	b15b      	cbz	r3, 800d3e0 <__smakebuf_r+0x70>
 800d3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	f000 f81d 	bl	800d40c <_isatty_r>
 800d3d2:	b128      	cbz	r0, 800d3e0 <__smakebuf_r+0x70>
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	f043 0301 	orr.w	r3, r3, #1
 800d3de:	81a3      	strh	r3, [r4, #12]
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	431d      	orrs	r5, r3
 800d3e4:	81a5      	strh	r5, [r4, #12]
 800d3e6:	e7cf      	b.n	800d388 <__smakebuf_r+0x18>

0800d3e8 <_fstat_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4d07      	ldr	r5, [pc, #28]	@ (800d408 <_fstat_r+0x20>)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	602b      	str	r3, [r5, #0]
 800d3f6:	f7f4 fa50 	bl	800189a <_fstat>
 800d3fa:	1c43      	adds	r3, r0, #1
 800d3fc:	d102      	bne.n	800d404 <_fstat_r+0x1c>
 800d3fe:	682b      	ldr	r3, [r5, #0]
 800d400:	b103      	cbz	r3, 800d404 <_fstat_r+0x1c>
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	bd38      	pop	{r3, r4, r5, pc}
 800d406:	bf00      	nop
 800d408:	200018fc 	.word	0x200018fc

0800d40c <_isatty_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4d06      	ldr	r5, [pc, #24]	@ (800d428 <_isatty_r+0x1c>)
 800d410:	2300      	movs	r3, #0
 800d412:	4604      	mov	r4, r0
 800d414:	4608      	mov	r0, r1
 800d416:	602b      	str	r3, [r5, #0]
 800d418:	f7f4 fa4f 	bl	80018ba <_isatty>
 800d41c:	1c43      	adds	r3, r0, #1
 800d41e:	d102      	bne.n	800d426 <_isatty_r+0x1a>
 800d420:	682b      	ldr	r3, [r5, #0]
 800d422:	b103      	cbz	r3, 800d426 <_isatty_r+0x1a>
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	bd38      	pop	{r3, r4, r5, pc}
 800d428:	200018fc 	.word	0x200018fc

0800d42c <_sbrk_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d06      	ldr	r5, [pc, #24]	@ (800d448 <_sbrk_r+0x1c>)
 800d430:	2300      	movs	r3, #0
 800d432:	4604      	mov	r4, r0
 800d434:	4608      	mov	r0, r1
 800d436:	602b      	str	r3, [r5, #0]
 800d438:	f7f4 fa58 	bl	80018ec <_sbrk>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d102      	bne.n	800d446 <_sbrk_r+0x1a>
 800d440:	682b      	ldr	r3, [r5, #0]
 800d442:	b103      	cbz	r3, 800d446 <_sbrk_r+0x1a>
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	200018fc 	.word	0x200018fc

0800d44c <_init>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	bf00      	nop
 800d450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d452:	bc08      	pop	{r3}
 800d454:	469e      	mov	lr, r3
 800d456:	4770      	bx	lr

0800d458 <_fini>:
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	bf00      	nop
 800d45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45e:	bc08      	pop	{r3}
 800d460:	469e      	mov	lr, r3
 800d462:	4770      	bx	lr
